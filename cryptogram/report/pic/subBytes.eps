%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: subBytes.pdf
%%Creator: Adobe Acrobat 19.8.0
%%For: qfxuz
%%CreationDate: 2018/12/1, 22:06:46
%%BoundingBox: 0 0 641 350
%%HiResBoundingBox: 0 0 641 350
%%CropBox: 0 0 641 350
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 950 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 91.163280, 2018/06/22-11:31:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2018-12-01T22:05:45+08:00"
   xmp:CreatorTool="Microsoft® Visio® 2016"
   xmp:ModifyDate="2018-12-01T22:05:45+08:00"
   pdf:Keywords=""
   pdf:Producer="Microsoft® Visio® 2016">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>徐 泽来</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -350 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 350 li
641 350 li
641 0 li
cp
clp
gsave
0 350 mo
641 350 li
641 0 li
0 0 li
cp
clp
19.275 74.34 mo
73.539 74.34 li
73.539 20.076 li
19.275 20.076 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.101015 0 .000732433 0 cmyk
ef
1.2431 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
19.275 74.34 mo
73.539 74.34 li
73.539 20.076 li
19.275 20.076 li
cp
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
19.275 128.58 mo
73.539 128.58 li
73.539 74.316 li
19.275 74.316 li
cp
.101015 0 .000732433 0 cmyk
ef
19.275 128.58 mo
73.539 128.58 li
73.539 74.316 li
19.275 74.316 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
19.243 182.87 mo
73.507 182.87 li
73.507 128.606 li
19.243 128.606 li
cp
.101015 0 .000732433 0 cmyk
ef
19.243 182.87 mo
73.507 182.87 li
73.507 128.606 li
19.243 128.606 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
19.243 237.11 mo
73.507 237.11 li
73.507 182.846 li
19.243 182.846 li
cp
.101015 0 .000732433 0 cmyk
ef
19.243 237.11 mo
73.507 237.11 li
73.507 182.846 li
19.243 182.846 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
73.503 74.27 mo
127.767 74.27 li
127.767 20.006 li
73.503 20.006 li
cp
.101015 0 .000732433 0 cmyk
ef
73.503 74.27 mo
127.767 74.27 li
127.767 20.006 li
73.503 20.006 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
73.503 128.52 mo
127.767 128.52 li
127.767 74.256 li
73.503 74.256 li
cp
.101015 0 .000732433 0 cmyk
ef
73.503 128.52 mo
127.767 128.52 li
127.767 74.256 li
73.503 74.256 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
73.471 182.8 mo
127.735 182.8 li
127.735 128.536 li
73.471 128.536 li
cp
.101015 0 .000732433 0 cmyk
ef
73.471 182.8 mo
127.735 182.8 li
127.735 128.536 li
73.471 128.536 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
73.471 237.05 mo
127.735 237.05 li
127.735 182.786 li
73.471 182.786 li
cp
.101015 0 .000732433 0 cmyk
ef
73.471 237.05 mo
127.735 237.05 li
127.735 182.786 li
73.471 182.786 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
127.76 74.27 mo
182.024 74.27 li
182.024 20.006 li
127.76 20.006 li
cp
.101015 0 .000732433 0 cmyk
ef
127.76 74.27 mo
182.024 74.27 li
182.024 20.006 li
127.76 20.006 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
127.76 128.52 mo
182.024 128.52 li
182.024 74.256 li
127.76 74.256 li
cp
.101015 0 .000732433 0 cmyk
ef
127.76 128.52 mo
182.024 128.52 li
182.024 74.256 li
127.76 74.256 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
127.73 182.8 mo
181.994 182.8 li
181.994 128.536 li
127.73 128.536 li
cp
.101015 0 .000732433 0 cmyk
ef
127.73 182.8 mo
181.994 182.8 li
181.994 128.536 li
127.73 128.536 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
127.73 237.05 mo
181.994 237.05 li
181.994 182.786 li
127.73 182.786 li
cp
.101015 0 .000732433 0 cmyk
ef
127.73 237.05 mo
181.994 237.05 li
181.994 182.786 li
127.73 182.786 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
181.99 74.21 mo
236.254 74.21 li
236.254 19.946 li
181.99 19.946 li
cp
.101015 0 .000732433 0 cmyk
ef
181.99 74.21 mo
236.254 74.21 li
236.254 19.946 li
181.99 19.946 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
181.99 128.45 mo
236.254 128.45 li
236.254 74.186 li
181.99 74.186 li
cp
.101015 0 .000732433 0 cmyk
ef
181.99 128.45 mo
236.254 128.45 li
236.254 74.186 li
181.99 74.186 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
181.95 182.74 mo
236.214 182.74 li
236.214 128.476 li
181.95 128.476 li
cp
.101015 0 .000732433 0 cmyk
ef
181.95 182.74 mo
236.214 182.74 li
236.214 128.476 li
181.95 128.476 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
181.95 236.98 mo
236.214 236.98 li
236.214 182.716 li
181.95 182.716 li
cp
.101015 0 .000732433 0 cmyk
ef
181.95 236.98 mo
236.214 236.98 li
236.214 182.716 li
181.95 182.716 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: HAAAAA+Tahoma Initial
ct_T42Dict begin
-0.598 -0.418 1.852 1.031
 256 array 0 1 255 {1 index exch /.notdef put} for  /HAAAAA+Tahoma
Type42DictBegin
[<00010000000c000c000c000c4f532f32da425b4e000000cc000000606376
742089dd96940000012c000003086670676dd76941d0000004340000101c
676c7966c111b50f000074d4000013d268656164ee826c49000014500000
003668686561120908420000148800000024686d74783ece070c000014ac
000023746c6f636138d63dbe00003820000022c86d61787015e7109f0000
5ae8000000206e616d65c8198baf00005b08000013d27072657069b9dc07
00006edc000005f7676469720000000000000000000000000003038e0190
00050008059a053300000125059a0533000003a0008202b10800020b0604
030504040204e1002effc000605b00000029000000004d53202000400021
0072061efe59003b080101a7200101ff20280000045d05d1000000200018
061e061405f005d1047c045d03d200100000ffe7ffe1fe78fe64fe59039b
00270000009600aa00b900c600ce000000000000000000bc00c200000000
007600b200c000cb0000000000000000000000000081009400a600cc00da
00ef00000000000000000098009e00ab00b000000097009e007d0166017c
00900098009e00a400a900ae00b300ba00c3000000000000000000000000
000000000000000000000000000000000000000000d3011d000000000000
00c3021401c20000000000e9000c02d10173018e009700970042004200c6
000000000000000000000088008000390039000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000001ff0249033f025a02cc0289026f023700000000
0000027a009400c003d203a7004c004c00c000d600be0000000000000000
00000000000000000000008101f901f9007400e500b900ca019502c600ac
00a7008500880091009800a500ac006f0087008f009b00a0000000000000
00000000000000000000068a051104f200000000000000000000000000b8
00ad009a006c00db00cb00c400a0009a006c0000009700910000007d000a
001a001f056000000000000000aa00a20000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000045e02b50094009402cd034202bc02b0032f020403bc0191061405fa
0304006000600059007d004c008f0066004b008700a600a800bc007d0000
0000008c00b200b2008e00a40000000000710071009a00f8008302aa004c
00750075039c033100a400bc003d0062017b01080087003900b6019e00e2
005a005a007000af00e201c300b90071007104bc0068009000bc04da0718
07ec005f0051005f00aa01b704b605d5007e006d007e00c4006d40658574
737271706f6e6d6c6b6a6968676665625f5e5d5c5b5a5958555453525150
4f4e5857565554483c3b3a393837363534333231302f2e2d2c2b2a292827
262524232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09
0807060504030201002c01b0184358b119072b1b212121592d2c01b01843
58b11a072b1b212121592d2c01b0184358b0032510f221b000121b212121
592d2c01b0184358b11b072b1b212121592d2c01b0184358b11c072b1b21
2121592d2c01b0184358b11d072b1b212121592d2c01b0184358b11e072b
1b212121592d2c4eb00014b046234344b0032510b10046e6b00013b00114
b00010f221b001134db000122d2c01b018435845646a234569b019436460
60b0462344231020b046f02fb000121b21212121592d2c01b10b0a432343
650a2d2c00b10a0b4323430b2d2c00b0462370b101463e01b0462370b102
46453ab10200080d2d2cb0122bb0022545b00225456ab0408b60b0022523
442121212d2cb0132bb0022545b00225456ab8ffc08c60b0022523442121
212d2cb000b0122b2121212d2cb000b0132b2121212d2c01b00643b00743
650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c
58b00361592d2cb100032545685458b0032545b0032545606820b0042523
44b0042523441bb00325204568208a2344b00325456860b003252344592d
2cb00325204568208a2344b00325456860b0032523442d2cb01643588721
c01bb01243588745b0112bb0472344b0477ae41b038a45186920b0472344
8a8a8720b0a05158b0112bb0472344b0477ae41b21b0477ae4595959182d
2c208a4523456860442d2c456a422d2c01182f2d2c21212d2c01b0022545
b002254564606ab00325456a6120b00425456a208a8b65b0042523448cb0
0325234421212d2c01456823456961b00325456a6120b00425456a208a8b
65b0042523448cb00325234421212d2c018a8a45642345646164422d2c01
b0022543b04054b0022543b000545a58b003252045b040614459b0022543
b00054b0022543b040545a58b004252045b040604459212121212d2c014b
525843b00225452361441b2121592d2c014b525843b00225452360441b21
21592d2c4b525845441b2121592d2c0120b003252349b04060b0206320b0
00525823b002253823b002256538008a63381b212121212159012d2c4b50
5845441b2121592d2c01b005251023208af500b0016023edec2d2c01b005
251023208af500b0016123edec2d2c01b0062510f500edec2d2c46234660
8a8a462320468a608a61b8ff8062232010238ab14b4b8a70456020b00050
58b00161b8ffba8b1bb0468c59b0106068013a2d2c2045b003254652583f
1b2111592d2c2045b003254650583f1b2111592d2c00b00743b006430b2d
2c4b5258b00425b0042549b00425b00425496120b0005458212043b00055
58591bb04054582043b0005458591b2043b00054581bb00325b8ffc03859
595959212121212d2c4b52584365381b2121592d2c4b525843381b212159
2d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621b
b200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f
2b59b002602d2c0c6423648bb84000626023212d2cb4000100000015b008
26b00826b00826b008260f10161345683ab001162d2cb4000100000015b0
0826b00826b00826b008260f1016134568653ab001162d2cb0134358031b
02592d2cb0134358021b03592d2cb00a2b2310203cb0172b2d2cb0282b8a
102320d023b0102bb00558c01b3c59201011b00012012d2c4b53234b515a
5820458a60441b2121592d2c4b53234b515a58381b2121592d2c20b00325
4523452361688a204568208a234460442d2c20b003254523452361688a20
4568208a234460442d2c4b5358b00425b00425496423456469b0408b6120
b080626ab00225b00225618cb0462344218a10b046f6211b218a11231220
392f592d2cb0024354584b53234b515a58381b2121591b21212121592d2c
b0024350584b53234b515a58381b2121591b21212121592d2c4b53234b51
5a58381b2121592d2cb1020042b123018851b1400188535a58b910000020
885458b202010243604259b12401885158b920000040885458b202020243
6042b12401885458b2022002436042004b014b5258b2020802436042591b
b940000080885458b202040243604259b94000008063b80100885458b202
080243604259b94000010063b80200885458b202100243604259b1260188
5158b94000020063b80400885458b202400243604259b94000040063b808
00885458b202800243604259b12801885158b94000080063b81000885458
ba00020100000243604259595959595959b10002435458400a0540084009
400c020d021bb10102435458b2054008ba010000090100b30c010d011bb1
8002435258b2054008b80180b109401bb2054008ba01800009014059b940
0000808855b94000020063b8040088555a58b30c000d011bb30c000d0159
595942424242422d2cb0024354580c028a4b53b004264b515a580a381b0a
2121591b21212121592d2cb0572b580c028a4b53b004264b515a580a381b
0a2121591b21212121592d2c20b0024354b00123b05f237821b1000243b0
56237921b0024323b020205c58212121b100471c598a8a208a208a23b810
00635658b81000635658212121b1012c1c591b2159b08062205c58212121
b1001b1c5923b08062205c58212121b1000c1c598ab00161b8ffb31c2321
2d2c20b0024354b00123b07b237821b1000243b072237921b10002438ab0
20205c58212121b0631c598a8a208a208a23b81000635658b81000635658
b00426b0015bb00426b00426b004261b21212121b13600231c591b2159b0
042623b08062205c588a5c8a5a23212321b01d1c598ab08062205c582121
2321b00e1c59b00426b00161b8ff981c23212d2c2320b000508a8a64b100
03255458b0401bb10103255458b005438b59b04f2b5923b0622b23212358
65592d2cb108000c215460432d2c014623466023466123201020468a61b8
ff80628ab140408a704560683a2d2c208a2349648a2353583c1b21592d2c
4b52587d1b7a592d2cb012004b014b54422d2cb1020042b123018851b140
0188535a58b910000020885458b202010243604259b12401885158b92000
0040885458b2020202436042b12401885458b2022002436042004b014b52
58b2020802436042591bb940000080885458b202040243604259b9400000
8063b80100885458b202080243604259b94000010063b80200885458b202
100243604259b12601885158b94000020063b80400885458b20240024360
4259b94000040063b80800885458b202800243604259b12801885158b940
00080063b81000885458ba00020100000243604259595959595959b10002
435458400a0540084009400c020d021bb10102435458b2054008ba010000
090100b30c010d011bb18002435258b2054008b80180b109401bb9010000
02435258b2054008ba0180000901401bb901800002435258b2054008b802
00b109401bb2054008ba010000090100595959b9400000808855b9400002
0063b8040088555a58b30c000d011bb30c000d0159595942424242422d2c
451868234b51582320452064b04050587c59688a6059442d2cb00016b002
25b0022501b001233e00b002233eb10102060cb00a236542b00b234201b0
01233f00b002233fb10102060cb006236542b0072342b00116012d2c20b8
2000628a6023622d2cb0072558001b0159b0042510b00325b0022520b8ff
ff545821cd1bed5921b006255cb006255a58b0092b5920b005254ab00425
47b004254760b0062547b0806361b00225b0005558b00325b00725496359
b0082558001b0159b00425b0062549b009255cb009255a58b0092b59b007
2546b0806361b0032520b0005558631b2159612320b0005558b080631b21
b08059b0592bb006255c586959b00425202010b00048233ab0062658001b
0159b0052658b003252f598a12233221212d2cb00625b00a2587b00625b0
09254ab0005358b00625b00a251bb00925b0072559b00225b00225070cb0
05256323b00625636020b94000040063535821b00426b00426b00a1bb940
00040063655158b0042665b0042665b00a1bb00426b00426b000b00325b0
03250b0d0ab0092eb00725b007250b0d0ab00b2eb00525b0052507595920
b0005558b00525b0052587b00725b007250bb0092510b00b25b0092620b8
ffff545821cd1bed59b00525b0052507b00825b00b254923b00625b00625
87b00a2510b00b25c15920b00051b800522378b00161b00225b00725b007
2507b00a25b00d254961b08062b00525b005250bb00a252338b00625b006
2587b00825b008250bb00a2510b00b25c4b00625b0062507b00925b00c25
49b0032554b8ffa723792121212121212121212121212d2c23b0005458b9
400000001bb900004000598ab0005458b9400000001bb90000400059b05b
2b2d2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a080d
8ab0005458b9400000001bb90000400059b05b2b2d2cb00426b00426080d
b00426b00426080db05b2b2d2cb0022563b0206066b00225b82000626023
622d2c234ab1024e2b2d2c234ab1014e2b2d2c238a4a234564b0022564b0
02256164b00343525821206459b1024e2b23b000505865592d2c238a4a23
4564b0022564b002256164b00343525821206459b1014e2b23b000505865
592d2c20b003254ab1024e2b8a103b2d2c20b003254ab1014e2b8a103b2d
2cb00325b003258ab0672b8a103b2d2cb00325b003258ab0682b8a103b2d
2cb0032546b003254660b004252eb00425b00425b0042620b000505821b0
6a1bb06c592bb0032546b00325466061b08062208a2010233a232010233a
2d2cb0032547b003254760b0052547b0806361b00225b00625496323b005
254ab080632058621b2159b0042646608a468a4660b02063612d2cb00426
b00425b00425b00426b06e2b208a2010233a232010233a2d2c2320b00154
5821b00225b1024e2bb0805020605920606020b001515821211b20b00551
5821206661b0402361b100032550b00325b00325505a5820b00325618a53
5821b000591b21591bb00754582066616523211b2121b000595959b1024e
2b2d2cb00225b004254ab0005358b0001b8a8a238ab00159b00425462066
6120b00526b0062649b00526b00526b0702b236165b02060206661b02061
652d2cb0022546208a20b000505821b1024e2b1b452321596165b0022510
3b2d2cb0042620b802006220b80200638a236120b05d602bb00525118a12
8a20398a58ba005d10000004266356602b23212010204620b1024e2b2361
1b2321208a201049b1024e2b593b2d2cba005d10000009256356602bb005
25b00525b00526b06d2bb15d0725602bb00525b00525b00525b00525b06f
2bba005d10000008266356602b20b0005258b0502bb00525b00525b00725
b00725b00525b0712bb0021738b00052b00225b001525a58b00425b00625
49b00325b00525496020b0405258211bb000525820b0025458b00425b004
25b00725b0072549b00217381bb00425b00425b00425b0062549b0021738
595959595921212121212d2cb12501885058b94000020063b8040088545c
b0124b525b1bb001592d00010000000700001e509c8b5f0f3cf5001b0800
00000000aec0ba1c00000000d6876843fb34fca60ed10846000000090002
000000000000000100000801fe5900000f17fb34fa7a0ed1000100000000
0000000000000000000000570800010000000000028000000000000002a8
00e403360072000000000000000000000000000000000000000000000000
000000000000000000000000026c004a000000000000000000000000045e
0053045e00e2045e006d045e006100000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000062a00970000
0000000000000000000000000000000000000475004d0000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000433003a046c008800000000046c003b
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000002e2008800000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
001f001f001f001f006e00a100a100a100a100a100a100a100a100a100a1
00d400d400d400d401b0022702b8039d039d039d039d039d039d039d039d
039d039d039d039d039d039d039d039d039d039d039d039d039d039d039d
039d039d039d047e047e047e047e047e047e05b105b105b105b105b105b1
05b105b105b105b105b105b105b105b10710082c082c093f093f093f093f
093f093f093f093f093f093f093f093f093f093f09e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e909e909e909e909e9
09e909e909e909e909e909e909e909e909e909e909e90001000011630041
0002000000000002001000400086000003eb101c000000000000002501c2
0003000104030002000c0000000300010405000200100010000300010406
0002000c002000030001040700020010002c00030001040800020010003c
00030001040900000216004c0003000104090001000c0262000300010409
0002000e02f80003000104090003003002d60003000104090004000c0262
0003000104090005001803060003000104090006000c0262000300010409
0007007402620003000104090008002a005a0003000104090009001c031e
000300010409000b0046033a000300010409000d0e18038000030001040a
0002000c000000030001040b00020010119800030001040c0002000c0000
00030001040e0002000c11a80003000104100002000e11b8000300010413
0002001211c60003000104140002000c0000000300010415000200100000
0003000104160002000c00000003000104190002000e11d800030001041b
0002001011a800030001041d0002000c000000030001041f0002000c0000
0003000104240002000e11e600030001042a0002000e11f400030001042d
0002000e120200030001080a0002000c00000003000108160002000c0000
000300010c0a0002000c0000000300010c0c0002000c0000004e006f0072
006d0061006c006e0079006f00620079010d0065006a006e00e9006e006f
0072006d0061006c005300740061006e0064006100720064039a03b103bd
03bf03bd03b903ba03ac00a9002000320030003100380020004d00690063
0072006f0073006f0066007400200043006f00720070006f007200610074
0069006f006e002e00200041006c006c0020007200690067006800740073
002000720065007300650072007600650064002e000d000a000d000a0048
006500620072006500770020004f00700065006e00540079007000650020
004c00610079006f007500740020006c006f00670069006300200063006f
0070007900720069006700680074002000a9002000320030003000330020
002600200032003000300037002c002000520061006c0070006800200048
0061006e0063006f0063006b002000260020004a006f0068006e00200048
007500640073006f006e002e002000540068006900730020006c00610079
006f007500740020006c006f00670069006300200066006f007200200042
00690062006c006900630061006c00200048006500620072006500770020
006900730020006f00700065006e00200073006f00750072006300650020
0073006f00660074007700610072006500200075006e0064006500720020
0074006800650020004d004900540020004c006900630065006e00730065
003b002000730065006500200065006d0062006500640064006500640020
006c006900630065006e0073006500200064006500730063007200690070
00740069006f006e00200066006f0072002000640065007400610069006c
0073002e005400610068006f006d00610020006900730020006100200074
0072006100640065006d00610072006b0020006f00660020007400680065
0020004d006900630072006f0073006f00660074002000670072006f0075
00700020006f006600200063006f006d00700061006e006900650073002e
004d006900630072006f0073006f006600740020005400610068006f006d
006100200052006500670075006c0061007200560065007200730069006f
006e00200037002e00300030004d00610074007400680065007700200043
006100720074006500720068007400740070003a002f002f007700770077
002e006d006900630072006f0073006f00660074002e0063006f006d002f
007400790070006f006700720061007000680079004d006900630072006f
0073006f0066007400200073007500700070006c00690065006400200066
006f006e0074002e00200059006f00750020006d00610079002000750073
00650020007400680069007300200066006f006e007400200074006f0020
006300720065006100740065002c00200064006900730070006c00610079
002c00200061006e00640020007000720069006e007400200063006f006e
00740065006e00740020006100730020007000650072006d006900740074
0065006400200062007900200074006800650020006c006900630065006e
007300650020007400650072006d00730020006f00720020007400650072
006d00730020006f00660020007500730065002c0020006f006600200074
006800650020004d006900630072006f0073006f00660074002000700072
006f0064007500630074002c00200073006500720076006900630065002c
0020006f007200200063006f006e00740065006e007400200069006e0020
007700680069006300680020007400680069007300200066006f006e0074
002000770061007300200069006e0063006c0075006400650064002e0020
0059006f00750020006d006100790020006f006e006c0079002000280069
002900200065006d0062006500640020007400680069007300200066006f
006e007400200069006e00200063006f006e00740065006e007400200061
00730020007000650072006d006900740074006500640020006200790020
00740068006500200065006d00620065006400640069006e006700200072
00650073007400720069006300740069006f006e007300200069006e0063
006c007500640065006400200069006e0020007400680069007300200066
006f006e0074003b00200061006e00640020002800690069002900200074
0065006d0070006f0072006100720069006c007900200064006f0077006e
006c006f006100640020007400680069007300200066006f006e00740020
0074006f002000610020007000720069006e0074006500720020006f0072
0020006f00740068006500720020006f0075007400700075007400200064
0065007600690063006500200074006f002000680065006c007000200070
00720069006e007400200063006f006e00740065006e0074002e00200041
006e00790020006f00740068006500720020007500730065002000690073
002000700072006f0068006900620069007400650064002e000d000a000d
000a00540068006500200066006f006c006c006f00770069006e00670020
006c006900630065006e00730065002c0020006200610073006500640020
006f006e00200074006800650020004d004900540020006c006900630065
006e00730065002000280068007400740070003a002f002f0065006e002e
00770069006b006900700065006400690061002e006f00720067002f0077
0069006b0069002f004d00490054005f004c006900630065006e00730065
0029002c0020006100700070006c00690065007300200074006f00200074
006800650020004f00700065006e00540079007000650020004c00610079
006f007500740020006c006f00670069006300200066006f007200200042
00690062006c006900630061006c00200048006500620072006500770020
201c004c00610079006f007500740020004c006f006700690063201d0020
006100730020006a006f0069006e0074006c007900200064006500760065
006c006f007000650064002000620079002000520061006c007000680020
00480061006e0063006f0063006b00200061006e00640020004a006f0068
006e00200048007500640073006f006e002e0020000d000a000d000a0050
00650072006d0069007300730069006f006e002000690073002000680065
00720065006200790020006700720061006e007400650064002c00200066
0072006500650020006f00660020006300680061007200670065002c0020
0074006f00200061006e007900200070006500720073006f006e0020006f
0062007400610069006e0069006e00670020006100200063006f00700079
0020006f006600200074006800650020004f00700065006e005400790070
00650020004c00610079006f007500740020006c006f0067006900630020
0066006f00720020004200690062006c006900630061006c002000480065
006200720065007700200061006e00640020006100730073006f00630069
006100740065006400200064006f00630075006d0065006e007400610074
0069006f006e002000660069006c00650073002000280074006800650020
201c004c00610079006f007500740020004c006f00670069006300200053
006f006600740077006100720065201d0029002c00200074006f00200064
00650061006c00200069006e00200074006800650020004c00610079006f
007500740020004c006f00670069006300200053006f0066007400770061
0072006500200077006900740068006f0075007400200072006500730074
00720069006300740069006f006e002c00200069006e0063006c00750064
0069006e006700200077006900740068006f007500740020006c0069006d
00690074006100740069006f006e00200074006800650020007200690067
00680074007300200074006f0020007500730065002c00200063006f0070
0079002c0020006d006f0064006900660079002c0020006d006500720067
0065002c0020007000750062006c006900730068002c0020006400690073
0074007200690062007500740065002c0020007300750062006c00690063
0065006e00730065002c00200061006e0064002f006f0072002000730065
006c006c00200063006f00700069006500730020006f0066002000740068
00650020004c00610079006f007500740020004c006f0067006900630020
0053006f006600740077006100720065002c00200061006e006400200074
006f0020007000650072006d0069007400200070006500720073006f006e
007300200074006f002000770068006f006d00200074006800650020004c
00610079006f007500740020004c006f00670069006300200053006f0066
007400770061007200650020006900730020006600750072006e00690073
00680065006400200074006f00200064006f00200073006f002c00200073
00750062006a00650063007400200074006f002000740068006500200066
006f006c006c006f00770069006e006700200063006f006e006400690074
0069006f006e0073003a000d000a000d000a005400680065002000610062
006f0076006500200063006f00700079007200690067006800740020006e
006f007400690063006500200061006e0064002000740068006900730020
007000650072006d0069007300730069006f006e0020006e006f00740069
006300650020007300680061006c006c00200062006500200069006e0063
006c007500640065006400200069006e00200061006c006c00200063006f
00700069006500730020006f00720020007300750062007300740061006e
007400690061006c00200070006f007200740069006f006e00730020006f
006600200074006800650020004c00610079006f007500740020004c006f
00670069006300200053006f006600740077006100720065002e000d000a
000d000a00540048004500200053004f0046005400570041005200450020
00490053002000500052004f005600490044004500440020002700410053
0020004900530027002c00200057004900540048004f0055005400200057
0041005200520041004e005400590020004f004600200041004e00590020
004b0049004e0044002c002000450058005000520045005300530020004f
005200200049004d0050004c004900450044002c00200049004e0043004c
005500440049004e004700200042005500540020004e004f00540020004c
0049004d004900540045004400200054004f002000540048004500200057
0041005200520041004e00540049004500530020004f00460020004d0045
0052004300480041004e0054004100420049004c004900540059002c0020
004600490054004e00450053005300200046004f00520020004100200050
004100520054004900430055004c0041005200200050005500520050004f
0053004500200041004e00440020004e004f004e0049004e004600520049
004e00470045004d0045004e0054002e00200049004e0020004e004f0020
004500560045004e00540020005300480041004c004c0020005400480045
00200041005500540048004f005200530020004f005200200043004f0050
00590052004900470048005400200048004f004c00440045005200530020
004200450020004c004900410042004c004500200046004f005200200041
004e005900200043004c00410049004d002c002000440041004d00410047
004500530020004f00520020004f00540048004500520020004c00490041
00420049004c004900540059002c00200057004800450054004800450052
00200049004e00200041004e00200041004300540049004f004e0020004f
004600200043004f004e00540052004100430054002c00200054004f0052
00540020004f00520020004f00540048004500520057004900530045002c
002000410052004900530049004e0047002000460052004f004d002c0020
004f005500540020004f00460020004f005200200049004e00200043004f
004e004e0045004300540049004f004e0020005700490054004800200054
0048004500200053004f0046005400570041005200450020004f00520020
00540048004500200055005300450020004f00520020004f005400480045
00520020004400450041004c0049004e0047005300200049004e00200054
0048004500200053004f004600540057004100520045002e000d000a004e
006f0072006d00610061006c0069004e006f0072006d00e1006c006e0065
004e006f0072006d0061006c0065005300740061006e0064006100610072
0064041e0431044b0447043d044b0439004e0061007600610064006e006f
0074006801b001a10300006e00670041007200720075006e007400610000
b154004112017d00010010017d0040017d0090017d0003003f0175005f01
75005f017600030040016fb3282d3640b8016fb2171b36b80171b3033a21
90411a01710001003001710050017100700171009f017100bf017100df01
710006000f0171003f0171005f0171007f01710004ffc00153b21c1d36b9
ffc00163b2121336b9ffc0014eb2333436b9ffc0014eb2242636b8014eb3
3c161f0fbd015b00ef015b00020040015ab3191a3640b8015ab315153640
b8015ab2101036b9ffc00159b3090a3640b80170b3282d3640b80170b217
1b36b9ffc0015db2151b36b9ffc00162b2141536b9ffc00162b21c1d36b9
ffc00152b21c1d36b9ffc00167b22f3636b9ffc00167b20e2636b9ffc001
66b2090d36b9ffc00161b2090d36b9ffc00165b2333636b9ffc00165b228
2a36b9ffc00165b21d2036b80165b21a191fb9ffc00161b24f5136b9ffc0
0161b23e3f36b9ffc00161b2191d36b9ffc00161b313153640b80161b30b
0d3640b8015fb2283236b9ffc0014fb2565a36b9ffc0014fb3393b363041
16014f0040014f0050014f00030070014f0080014f000200000164001001
64000200d0016400e0016400020164b270641fb9ffc00146b2131436b9ff
c00146b2161636b9ffc00146b2090a36b9ffc00142b2111336b9ffc40142
b20a0e36b9ffc0013eb2171836b9ffc0013db20b1836b90130012f400b32
1fe7e8641fe8d2301f20bc01390030013900020139b203181f410a013b01
320010001f01370132000d001f01350132b2141f2f410c01320001013601
33000e001f013401330014001f01310133b2101f40ba013800900138404e
020fe32fe302b0d901a0d90190d901d0d901c0d901b0d901b0d301a0d301
90d301d0d301c0d301b0d301d1d73f1fd6d71a1f80d501d5d71a1f1fd701
70d701cac92a1fcac93938ca010bc844c802b8ffc0b6dc0911364fd201b8
ffc0401fb229323610b220b240b250b270b280b2a0b2b0b2d0b2e0b20ac0
b2f0b20285b8ffeeb3b4254836b8ffe0b3b4102336b8ffee400eb4090f36
b41a481fd06e01e07101b8ffc0400998090a364071091136b8ffc1400970
121536406f131536b8ffc0401a6e0912367099014067090f3670668066a0
66b06604af65bf6502b8ffc0402a640911366f937f93026f9001708e017f
8c9f8c0280a00100625062c062034061706102105b205b905b03b8017440
b914321f6814481fb314481f2d14111f2c14251f2b14391f2a14131fdf28
ef2802cf28df28ef28032814101f9e20431f1f141e1f2120431f20143c1f
9f1a521f1a1b471f1b1a3c1f1a14321f1514391f1314411f12141a1f1114
1a1f70140140144143360006010f01010f012f013f016f017f01af01bf01
cf01ef01ff010a0f00010f002f003f006f007f00af00bf00cf00ef00ff00
0a0a09371f0f020f0302cf02cf03ff02ff03040c0d390504390302390100
390350500501b801ff01b0124b004b5442b013014b004b5342b116322b4b
b0645242858d8d1d42b0964b5258b20380801d4259b808004b5458b001b0
018e59b0084b5358b001b0018e59002b2b2b2b73742b73747374b00345b0
06456861b006234473b00345b00e456861b00e2344b00e45b00f456861b0
0f234401b0144568b01423442b732b2b2b2b2b2b2b2b2b2b2b2b2b73742b
2b2b2b2b2b2b73737373737373732b73732b732b2b2b2b2b73742b2b2b2b
002b58b8ffc04044b51718361f44010f561f56024f555f550238bf2a1f6f
bf019fbfafbf0237b9151f2fbb01bcbe171fbdbe161fbebd151fbab9521f
b6b9291fb7b9321fb8b9321fb935391fb80173403a3f321f3c3f321f3d3f
3d1f3e3f211f433f1d1f423f521f413f521f403f521f3f35321f3233641f
3335341f3534541f34351e1fd034e034f03403752b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b742b73742b7373742b1b400c02033b1f04053b
1f0a083b1f2b2b2b5973742b01742b0073732b2b73742b732b2b73737374
747473737374747473732b2b2b732b2b2b2b732b2b2b2b2b2b2b2b2b2b2b
737474752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
73002b2b2b2b2bb801714568b8017123447374752b2b2b7373742b0000>
[5075 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 864 20 <000100e2000003b805d6000c00bcb0852b58401a05b6060609030b03b801
082f0001af000100050100090b020d0db80140b4560b0c0c0cb80140b456
0b0c0b0bb801404010560b080c0c023b0b2001200380030203b8ffeeb40d
0d023b03b8fffe400b0c0c023b030c0b0b023b03b8fff4b40c0c063b03b8
fff4400e0d0d063b030c0b0b063b03030e0d1112392f2b2b2b2b2b2b5d33
ed2b2b2b2b39322f332f5d71003ffd3c3f332fed31301b400f0605b66c06
0609030b0103b86c010800183f2bc43f332f2b3031592121352111213532
363733112103b8fd2a010efef29991099b01089803e6885779fac200>HAAAAA+Tahoma AddT42Char 
1 0 0 <00020100000007000600000300070014b706020400060204002fcdddcd00
2fcdddcd3130211121112521112101000600fa800500fb000600fa008005
0000>HAAAAA+Tahoma AddT42Char 
HAAAAA+Tahoma /CharStrings get begin
/one 20 def
end
HAAAAA+Tahoma /Encoding get
dup 49 /one put
pop
end
%ADOEndSubsetFont
/SFCUQU+Tahoma /HAAAAA+Tahoma findfont ct_VMDictPut
/SFCUQU+Tahoma*1 
[49{/.notdef}rp /one 206{/.notdef}rp]
SFCUQU+Tahoma nf
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
152.5 114.37 mo
(1)sh
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQU+Tahoma gcheck setglobal} if
1 322 15 <0001004afe8e01f4011d00030048b0852b5840252a012b02350039024500
480255005902640074000a02020356042f050100000a021a0202022f5d33
2f5d0010f4322f3130015d1bb302020304001810c6322f30315901012313
01f4fee892b0011dfd71028f>SFCUQU+Tahoma AddT42Char 
SFCUQU+Tahoma /CharStrings get begin
/comma 15 def
end
SFCUQU+Tahoma /Encoding get
dup 44 /comma put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQU+Tahoma*1 
[44{/.notdef}rp /comma 4{/.notdef}rp /one 206{/.notdef}rp]
SFCUQU+Tahoma nf
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
161.17 114.37 mo
(,)sh
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQU+Tahoma gcheck setglobal} if
1 1102 21 <0001006d0000040405f0002600a9b0852b5840331a2225172b1f2b213c05
361739234c054617492354175a215b226517601b7417771b7b207f221314
140eba19020225ba010825b8ffc0b50b1037262608bbfff4000b000b0140
401b5608213f1c4f1c021c1a0c0c023b1c1625161c032f0201c0020102b8
ffc0b30a0d37022f2b5d7117332f2f2b5ded2b332f2b003ffd323fed332f
31305d1b400f1414190eba6c1902020125ba6c010800183f2b323f2b332f
303159212135363637363635342627262623220607060607233536363332
1615140607060607060607210404fc6963b054aa7c2722235c37356d322a
4e180b3edd63d0ec292425683a5ee74502dcd15eac5dbbe1783e5e1f1e1e
1b14113011d41f3bddbd57943f41803e66dc4000>SFCUQU+Tahoma AddT42Char 
SFCUQU+Tahoma /CharStrings get begin
/two 21 def
end
SFCUQU+Tahoma /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQU+Tahoma*1 
[44{/.notdef}rp /comma 4{/.notdef}rp /one /two 205{/.notdef}rp]
SFCUQU+Tahoma nf
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
166 114.37 mo
(2)sh
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQU+Tahoma gcheck setglobal} if
1 2914 68 <0002003affe103b30478000c00360217b0852b58b10602435458b9000cff
eab40d0d063b00b8ffea400c0d0d063b00010d0a131f3d01b8ffc0401d0c
0c063b100101000101010113263f2e040a41133608130a35361f0036b8ff
f4400b0c0c063b360c0f0f063b36b8ffe040220b0b063b3636383707190c
1010063b190c0f0f063b190c0c0c063b19160d0d063b19b8ffdcb70b0b06
3b191938371112392f2b2b2b2b2bcd1112392f2b2b2bd0c010cd003f3f10
ed3fed12392f5d5d2bed11123911393130002b2b1bb638400c0c023b0cb8
ffeab40d0d023b0db8ffeab40d0d023b00b8ffeab40d0d023b2cb8fff0b3
1619372eb8fff0b3090a372bb8ffc0b50e1137013d1fb8ffc0401c0c0d37
1f1f132e4f2a012a2a263f2e04000e1336080a41130a1f0036b8fff8b40c
0c023b36410afff4000b000b014000560036fffa000d000d0140402d5636
1a351a0f0f023b351a0c0c023b35060d0d023b356f3819100e1037191009
0b372b40090b372b2b070c0b0bb80140b45607020d0db80140401f56071b
19160f0f023b19200b0b023b191a0c0c023b19120d0d023b19160c0cb801
40b45619160d0db80140b45619160b0bb80140b35619703710f42b2b2b2b
2b2b2bed2b2b332f2b2b2b10f62b2b2bfd2b2b2b3c3c003fed3f1133333f
ed332f5d1112392f2bed2b2b31302b2b2b2b012b591b401b1f013d6c1f1f
132e2a2a2e263f6c2e04000e133608130a416c130a00183f2b3f1133333f
2b332f1112392f2b30315901110606070606151416333236170606070606
232226272626353436373624373534262726262322060723353636333216
17161615112302f843cd3f4b626c6859903f174d24325d54457c2f2d3662
6a5e010094282424683741b0580b34c25f739e3f3d3cbb01130136061513
175f5560624d64113d121a1c342f2e874b74a3302b210824425116170f27
25bf0f24242f2e9269fd0400>SFCUQU+Tahoma AddT42Char 
SFCUQU+Tahoma /CharStrings get begin
/a 68 def
end
SFCUQU+Tahoma /Encoding get
dup 97 /a put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQU+Tahoma*1 
[44{/.notdef}rp /comma 4{/.notdef}rp /one /two 46{/.notdef}rp /a 158{/.notdef}rp]
SFCUQU+Tahoma nf
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
29.925 51.33 mo
(a)sh
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
139.02 51.33 mo
(a)sh
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
193.75 51.33 mo
(a)sh
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
193.75 105.77 mo
(a)sh
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
139.02 105.77 mo
(a)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
98.35 114.37 mo
(1)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
107.02 114.37 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
111.83 114.37 mo
(1)sh
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
84.125 105.77 mo
(a)sh
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
30.025 105.77 mo
(a)sh
SFCUQU+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
30.025 160.15 mo
(a)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
97.9 168.5 mo
(2)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
106.57 168.5 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
111.37 168.5 mo
(1)sh
SFCUQU+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
84.45 160.05 mo
(a)sh
118.57 190.57 mo
188.84 190.57 li
188.84 120.3 li
118.57 120.3 li
cp
0 .167056 .528618 0 cmyk
ef
2.3216 lw
118.57 190.57 mo
188.84 190.57 li
188.84 120.3 li
118.57 120.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
123.24 191.29 mo
123.24 196.58 li
195.97 196.64 li
195.85 123.94 li
189.95 123.94 li
189.76 191.58 li
123.24 191.29 li
cp
ef
.63722 lw
1 lc
1 lj
123.24 191.29 mo
123.24 196.58 li
195.97 196.64 li
195.85 123.94 li
189.95 123.94 li
189.76 191.58 li
123.24 191.29 li
cp
@
SFCUQU+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
139.02 160.05 mo
(a)sh
SFCUQU+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
193.43 160.05 mo
(a)sh
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
193.43 214.78 mo
(a)sh
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
138.85 214.82 mo
(a)sh
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
30.2 214.82 mo
(a)sh
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQU+Tahoma gcheck setglobal} if
1 424 19 <00020053ffe1040b05ef000b0023013fb0852b58401534013b0b45014a0b
7a11053a1535214a1545210409b8fff040130e0f003b03100e0f003b15b9
090221b9030a0fbbfff4000b000b01404009560f2110007f000200b8ffd4
b40d0d023b00b8fff0b40c0c023b00b8ffd6b40b0b023b00b8ffe0b40c0c
063b00b8ffe0b40d0d063b00b8fffcb40b0b063b004110ffe8000d000d01
4000560000ffee000c000c014000560000ffe8000b000b0140b65600001b
0c0b0bb80140400c561b21a006c00602060c0d0db80140b456060c0c0cb8
0140b456060c0b0bb8014040205606100d0d023b06100c0c023b06160b0b
023b060c0d0d063b060c0c0c063b06b8ffe2b40b0b063b06b8ffc0b30d11
37062f2b2b2b2b2b2b2b2b2b2b5ded2b332f2b2b2b2b2b2b2b2b2b5ded2b
003fed3fed2b2b5d31305d1b400c0915b96c09020321b96c030a00183f2b
3f2b30315901100223220211101233321201363635342627262623220607
0606151416171616333236040be9f3f6e6e9f3f6e6ff001d18181e1e6954
536b1f1e1613201d6b56536b02e9fe6ffe89017e018801930175fe7efcb6
4ae29a99e24b4c4f4f4e4ce8929cd2534d534f00>SFCUQU+Tahoma AddT42Char 
SFCUQU+Tahoma /CharStrings get begin
/zero 19 def
end
SFCUQU+Tahoma /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQU+Tahoma*1 
[44{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two 46{/.notdef}rp /a 
158{/.notdef}rp]
SFCUQU+Tahoma nf
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
43.2 59.7 mo
(0)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
51.875 59.7 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
56.7 59.7 mo
(0)sh
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
84.6 51.33 mo
(a)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
98.35 59.7 mo
(0)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
107.02 59.7 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
111.83 59.7 mo
(1)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
152.83 59.73 mo
(0)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
161.5 59.73 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
166.33 59.73 mo
(2)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
207.33 59.73 mo
(0)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
216 59.73 mo
(,)sh
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQU+Tahoma gcheck setglobal} if
1 1392 22 <00010061ffe103ea05f00040010fb0852b58405b160e2609291529233609
32123a23342d353a450944124a23442d443a55095a165a23552c5c31533a
6309600e630f641969237509700e710f79231d15143635b9603801383821
0b070700ba0b02252529ba210a363b080d0d063b3bbbfff4000b000b0140
400a563b211136141103242fbbfff4000b000b0140400f562f213f1b801b
021b160c0c023b1bb8fff4b40b0b023b1bb8fff8400c0d0d063b1b081b08
60240124b8ffc0b30b0d37242f2b5d33332f2f2b2b2b5ded2b1217392fed
2b2b2f003fed332f3fed332f1112392f5ded12393931305d1b401b151436
3835b96c3838210b07070b00ba6c0b0225252129ba6c210a00183f2b332f
3f2b332f1112392f2b123939303159012206070606072335363633321617
161615140607151616171616151406070606232226273533161633323637
363635342627262623233533323635342627262601ff366c3430471c0c41
df6565973d4243a2712f6b2e2e3a453f41b87570dc4b0e3fd46a3d7b2928
2a2f2a2a7343554287a92c22265c05431a15142c13d32339292b30885b7b
ba190e092c2b2b876165a94144463626d32e54272c2c6a5151681e1e17a6
807a3851181a1400>SFCUQU+Tahoma AddT42Char 
SFCUQU+Tahoma /CharStrings get begin
/three 22 def
end
SFCUQU+Tahoma /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQU+Tahoma*1 
[44{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two /three 45{/.notdef}rp 
/a 158{/.notdef}rp]
SFCUQU+Tahoma nf
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
220.8 59.73 mo
(3)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
43.7 114.55 mo
(1)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
52.375 114.55 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
57.175 114.55 mo
(0)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
207.33 114.37 mo
(1)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
216 114.37 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
220.8 114.37 mo
(3)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
43.4 168.55 mo
(2)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
52.075 168.55 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
56.875 168.55 mo
(0)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
152.3 168.62 mo
(2)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
160.97 168.62 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
165.78 168.62 mo
(2)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
207 168.65 mo
(2)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
215.67 168.65 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
220.5 168.65 mo
(3)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
43.45 222.92 mo
(3)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
52.125 222.92 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
56.95 222.92 mo
(0)sh
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
84.45 214.82 mo
(a)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
98.15 223.05 mo
(3)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
106.83 223.05 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
111.62 223.05 mo
(1)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
152.4 223.05 mo
(3)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
161.08 223.05 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
165.9 223.05 mo
(2)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
207.1 222.82 mo
(3)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
215.78 222.82 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
220.58 222.82 mo
(3)sh
399.81 73.64 mo
454.074 73.64 li
454.074 19.376 li
399.81 19.376 li
cp
.101015 0 .000732433 0 cmyk
ef
1.2431 lw
0 lc
0 lj
2 ml
399.81 73.64 mo
454.074 73.64 li
454.074 19.376 li
399.81 19.376 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
399.81 127.88 mo
454.074 127.88 li
454.074 73.616 li
399.81 73.616 li
cp
.101015 0 .000732433 0 cmyk
ef
399.81 127.88 mo
454.074 127.88 li
454.074 73.616 li
399.81 73.616 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
399.78 182.17 mo
454.044 182.17 li
454.044 127.906 li
399.78 127.906 li
cp
.101015 0 .000732433 0 cmyk
ef
399.78 182.17 mo
454.044 182.17 li
454.044 127.906 li
399.78 127.906 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
399.78 236.41 mo
454.044 236.41 li
454.044 182.146 li
399.78 182.146 li
cp
.101015 0 .000732433 0 cmyk
ef
399.78 236.41 mo
454.044 236.41 li
454.044 182.146 li
399.78 182.146 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
454.04 73.57 mo
508.304 73.57 li
508.304 19.306 li
454.04 19.306 li
cp
.101015 0 .000732433 0 cmyk
ef
454.04 73.57 mo
508.304 73.57 li
508.304 19.306 li
454.04 19.306 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
454.04 127.82 mo
508.304 127.82 li
508.304 73.556 li
454.04 73.556 li
cp
.101015 0 .000732433 0 cmyk
ef
454.04 127.82 mo
508.304 127.82 li
508.304 73.556 li
454.04 73.556 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
454 182.1 mo
508.264 182.1 li
508.264 127.836 li
454 127.836 li
cp
.101015 0 .000732433 0 cmyk
ef
454 182.1 mo
508.264 182.1 li
508.264 127.836 li
454 127.836 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
454 236.35 mo
508.264 236.35 li
508.264 182.086 li
454 182.086 li
cp
.101015 0 .000732433 0 cmyk
ef
454 236.35 mo
508.264 236.35 li
508.264 182.086 li
454 182.086 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
508.29 73.57 mo
562.554 73.57 li
562.554 19.306 li
508.29 19.306 li
cp
.101015 0 .000732433 0 cmyk
ef
508.29 73.57 mo
562.554 73.57 li
562.554 19.306 li
508.29 19.306 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
508.29 127.82 mo
562.554 127.82 li
562.554 73.556 li
508.29 73.556 li
cp
.101015 0 .000732433 0 cmyk
ef
508.29 127.82 mo
562.554 127.82 li
562.554 73.556 li
508.29 73.556 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
508.26 182.1 mo
562.524 182.1 li
562.524 127.836 li
508.26 127.836 li
cp
.101015 0 .000732433 0 cmyk
ef
508.26 182.1 mo
562.524 182.1 li
562.524 127.836 li
508.26 127.836 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
508.26 236.35 mo
562.524 236.35 li
562.524 182.086 li
508.26 182.086 li
cp
.101015 0 .000732433 0 cmyk
ef
508.26 236.35 mo
562.524 236.35 li
562.524 182.086 li
508.26 182.086 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
562.52 73.51 mo
616.784 73.51 li
616.784 19.246 li
562.52 19.246 li
cp
.101015 0 .000732433 0 cmyk
ef
562.52 73.51 mo
616.784 73.51 li
616.784 19.246 li
562.52 19.246 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
562.52 127.75 mo
616.784 127.75 li
616.784 73.486 li
562.52 73.486 li
cp
.101015 0 .000732433 0 cmyk
ef
562.52 127.75 mo
616.784 127.75 li
616.784 73.486 li
562.52 73.486 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
562.49 182.04 mo
616.754 182.04 li
616.754 127.776 li
562.49 127.776 li
cp
.101015 0 .000732433 0 cmyk
ef
562.49 182.04 mo
616.754 182.04 li
616.754 127.776 li
562.49 127.776 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
562.49 236.28 mo
616.754 236.28 li
616.754 182.016 li
562.49 182.016 li
cp
.101015 0 .000732433 0 cmyk
ef
562.49 236.28 mo
616.754 236.28 li
616.754 182.016 li
562.49 182.016 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQU+Tahoma gcheck setglobal} if
1 3616 69 <00020088ffe104310614000c001d01d3b0852b58b1060243545840120618
03421b041601150807130a40100a000db8fff0b41010063b0db8ffe8b40f
0f063b0db8ffdab40c0c063b0db8fff0b40d0d063b0db8ffd2400b0b0b06
3b0d0d1f1e180713b8fffcb50c0c063b1315b8fff4400b0f0f063b15080d
0d063b15b8ffcab70b0b063b15151f1e1112392f2b2b2bdd2bc0c0111239
2f2b2b2b2b2bcd003fed33333f3f3fed33333130b00b4b5458b9000cfff4
38591b40301f400f0f023b1f400b0b023b3a01330c360e4b01420c450e56
1c661c750709061803421b041601150807130a40100a00410dfffe000d00
0d014000560000fff4000b000c014000560000fff840130c0c023b001b0d
160f0f023b0d160b0b023b0db8fff2b40c0c023b0db8ffd6b40d0d023b0d
4110fff4000b000b01400056000dfff4000c000c01400056000dffea000d
000d0140400a560d711f1807130c0b0cb80140b45613060d0db801404019
5613080c0c023b131a15060b0b023b15020d0d023b15060b0bb80140b456
15080d0db80140b356156e1e10f62b2b2b2bfd2b2b2b3c3c10f42b2b2b2b
2b2b2bed2b2b2b003fed33333f3f3fed333331305d012b2b591b40140618
1b03426c1b04160115080713100a406c100a00183f2b33333f3f3f2b3333
303159013426232206071116163332363710002322262707231133113636
333212036f7a874d9d40476e4290a4c2fef6c85b813f0cb0bc47a669bdda
0232c8cf4837fd80231dccebfeeefeb22d26340614fdd44054fed100>SFCUQU+Tahoma AddT42Char 
SFCUQU+Tahoma /CharStrings get begin
/b 69 def
end
SFCUQU+Tahoma /Encoding get
dup 98 /b put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQU+Tahoma*1 
[44{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two /three 45{/.notdef}rp 
/a /b 157{/.notdef}rp]
SFCUQU+Tahoma nf
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
519.33 214.12 mo
(b)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
478.72 167.8 mo
(2)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
487.4 167.8 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
492.22 167.8 mo
(1)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
533.33 113.67 mo
(1)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
542 113.67 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
546.83 113.67 mo
(2)sh
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
410.38 50.62 mo
(b)sh
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
465.07 50.62 mo
(b)sh
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
519.47 50.62 mo
(b)sh
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
574.22 50.62 mo
(b)sh
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
574.22 105.08 mo
(b)sh
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
519.47 105.08 mo
(b)sh
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
464.6 105.08 mo
(b)sh
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
410.5 105.08 mo
(b)sh
SFCUQU+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
410.5 159.45 mo
(b)sh
SFCUQU+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
464.9 159.35 mo
(b)sh
499.63 190.23 mo
569.9 190.23 li
569.9 119.96 li
499.63 119.96 li
cp
0 .167056 .528618 0 cmyk
ef
2.3216 lw
499.63 190.23 mo
569.9 190.23 li
569.9 119.96 li
499.63 119.96 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
504.3 190.95 mo
504.3 196.24 li
577.03 196.3 li
576.91 123.6 li
571.01 123.6 li
570.82 191.24 li
504.3 190.95 li
cp
ef
.63722 lw
1 lc
1 lj
504.3 190.95 mo
504.3 196.24 li
577.03 196.3 li
576.91 123.6 li
571.01 123.6 li
570.82 191.24 li
504.3 190.95 li
cp
@
SFCUQU+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
519.47 159.35 mo
(b)sh
SFCUQU+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
573.9 159.35 mo
(b)sh
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
573.9 214.08 mo
(b)sh
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
464.9 214.12 mo
(b)sh
SFCUQU+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
410.65 214.12 mo
(b)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
424.05 59 mo
(0)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
432.73 59 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
437.52 59 mo
(0)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
479.17 59 mo
(0)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
487.85 59 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
492.65 59 mo
(1)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
533.65 59.02 mo
(0)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
542.33 59.02 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
547.15 59.02 mo
(2)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
588.15 59.02 mo
(0)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
596.83 59.02 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
601.63 59.02 mo
(3)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
424.52 113.85 mo
(1)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
433.2 113.85 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
438.02 113.85 mo
(0)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
479.17 113.67 mo
(1)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
487.85 113.67 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
492.65 113.67 mo
(1)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
588.15 113.67 mo
(1)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
596.83 113.67 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
601.63 113.67 mo
(3)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
424.23 167.85 mo
(2)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
432.9 167.85 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
437.73 167.85 mo
(0)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
533.13 167.92 mo
(2)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
541.8 167.92 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
546.63 167.92 mo
(2)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
587.85 167.95 mo
(2)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
596.53 167.95 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
601.33 167.95 mo
(3)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
424.27 222.23 mo
(3)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
432.95 222.23 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
437.77 222.23 mo
(0)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
478.98 222.35 mo
(3)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
487.65 222.35 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
492.48 222.35 mo
(1)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
533.22 222.35 mo
(3)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
541.9 222.35 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
546.72 222.35 mo
(2)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
587.92 222.13 mo
(3)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
596.6 222.13 mo
(,)sh
SFCUQU+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
601.42 222.13 mo
(3)sh
271.17 61.38 mo
266.93 61.38 263.74 64.45 263.74 67.87 cv
263.79 95.68 li
263.79 99.09 266.98 102.17 271.22 102.17 cv
365.12 102.17 li
369.36 102.17 372.54 99.12 372.54 95.7 cv
372.49 67.84 li
372.49 64.43 369.3 61.38 365.06 61.38 cv
271.17 61.38 li
cp
.0852064 0 .302983 0 cmyk
ef
2.4833 lw
0 lc
0 lj
271.17 61.38 mo
266.93 61.38 263.74 64.45 263.74 67.87 cv
263.79 95.68 li
263.79 99.09 266.98 102.17 271.22 102.17 cv
365.12 102.17 li
369.36 102.17 372.54 99.12 372.54 95.7 cv
372.49 67.84 li
372.49 64.43 369.3 61.38 365.06 61.38 cv
271.17 61.38 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
250.83 125.89 mo
359.25 125.89 li
359.25 114.24 li
385.68 127.46 li
359.47 141.35 li
359.47 129.92 li
250.6 129.92 li
250.83 125.89 li
cp
ef
.82627 lw
1 lc
1 lj
250.83 125.89 mo
359.25 125.89 li
359.25 114.24 li
385.68 127.46 li
359.47 141.35 li
359.47 129.92 li
250.6 129.92 li
250.83 125.89 li
cp
@
%ADOBeginSubsetFont: JAAAAA+Microsoft#20Sans#20Serif Initial
ct_T42Dict begin
-0.578 -0.254 1.473 1
 256 array 0 1 255 {1 index exch /.notdef put} for  /JAAAAA+Microsoft#20Sans#20Serif
Type42DictBegin
[<00010000000c000c000c000c4f532f32d93f56dc000000cc000000606376
742077d37c860000012c000002906670676d03741f64000003bc00000789
676c79660d8ee3f800008b9800000eac68656164ecccbb6d00000b480000
0036686865610e8811c500000b8000000024686d74783fb305c900000ba4
00003af46c6f6361d9ddd73000004698000020c26d61787015a908190000
675c000000206e616d658a3bccce0000677c00001c95707265701207efc7
000084140000078267646972000000000000000000000000000303850190
00050008059a05330000011b059a0533000003d1006602120805020b0604
020202020204e5002effc000605b00000029000000004d53202000400021
fb0605d3fe51010d076001ae200101ff20280000042505ba000000200015
05ba0019000005ba00190000000000000000000000000000000000000000
0425001900000000ffe700000000ffe70000000000000000fe68ffea0000
00000000000000000000000002f5ffee05cd000002ddffee02f000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000800000008000000000000000000000000000000
000000000000000000000000000000000000000000d2010e012c01130000
000000c8010900c8000000000000000000000000000000890048001bff77
ffb8ffe500a4005f000aff5cffa1fff6000000000000000afff600000000
0000000000000059ffa700c9000000c3000000c2008300c3000000bd0000
00bd007900c3006c00bd009100af00000000026f00ae00a6009a0000009b
0094008b00cc00ae00a600940000000000ff000001e30000000000000000
000000000000000000000000000000000000000000cd00cd006801ee0060
008c0000000000000000000000000000000000a800a800a800b900cd00a8
0052016a0049007d007d0083008a00000071009b00910078000001fc0071
ff8f022a006d009400a0029a030a00b800ae008b018b019101d10391008c
00730268027d01b001dd021c033302a3026b02730152024c0021004c05e7
04f20098ff6800ac00c500850085005c0054006000b401baff1ffe680000
008300bc00940094ff85ffae00520029061400ae00460046fe580560008f
076002f20025003e004700500058007300a80160006000950025003e0047
00500058007300a801600000002d005000600081009300ba0108ffd3ffae
ff9106520060005c00b0012b012b04ba013e018507600016000a004b047d
069c076000600060004c00cb01dc04b305c2008200660082006e40415452
4d4c49483b393837363534333231302f2e2d2c2b2a292827262524232221
201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403
0201002c01b0184358456ab0194360b0462344231020b0464ef04d2fb000
121b21231133592d2c01b0184358b0052bb000134bb0145058b100403859
b0062b1b21231133592d2c01b01843584eb0032510f221b000124d1b2045
b00425b00425234a6164b0285258212310d21bb0032510f221b000125959
2d2cb01a435821211bb00225b0022549b00325b003254a612064b0105058
2121211bb00325b0032549b0005058b0005058b8ffe238211bb010382159
1bb0005258b01e38211bb8fff03821595959592d2c01b0184358b0052bb0
00134bb0145058b90000ffc03859b0062b1b21231133592d2c4e018a10b1
46194344b00014b10046e2b00015b90000fff03800b0003cb0282bb00225
10b0003c2d2c0118b0002fb00114f2b00113b001154db000122d2c01b018
4358b0052bb00013b90000ffe038b0062b1b21231133592d2c01b0184358
45646a23456469b01943646060b0462344231020b046f02fb000121b2121
208a208a525811331b212159592d2c01b10b0a432343650a2d2c00b10a0b
4323430b2d2c00b0462370b101463e01b0462370b10246453ab10200080d
2d2cb0122bb0022545b00225456ab0408b60b0022523442121212d2cb013
2bb0022545b00225456ab8ffc08c60b0022523442121212d2cb000b0122b
2121212d2cb000b0132b2121212d2c01b00643b00743650a2d2c2069b040
61b0008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2cb1
000325456854b01c4b505a58b0032545b0032545606820b004252344b004
2523441bb00325204568208a2344b00325456860b003252344592d2cb003
25204568208a2344b003254564686560b00425b0016023442d2cb0094358
8721c01bb01243588745b0112bb0472344b0477ae41b038a45186920b047
23448a8a8720b0a05158b0112bb0472344b0477ae41b21b0477ae4595959
182d2c208a4523456860442d2c456a422d2c01182f2d2c01b0184358b004
25b004254964234564696120b080626ab00225b00225618cb0194360b046
2344218a10b046f6211b21212121592d2c01b0184358b0022545b0022545
64606ab00325456a6120b00425456a208a8b65b0042523448cb003252344
21211b20456a4420456a44592d2c012045b00055b018435a584568234569
b0408b6120b080626a208a236120b003258b65b0042523448cb003252344
21211b2121b0192b592d2c018a8a45642345646164422d2cb00425b00425
b0192bb0184358b00425b00425b00325b01b2b01b0022543b04054b00225
43b000545a58b003252045b040614459b0022543b00054b0022543b04054
5a58b004252045b04060445959212121212d2c014b525843b00225452361
441b2121592d2c014b525843b00225452360441b2121592d2c4b52584544
1b2121592d2c0120b003252349b04060b0206320b000525823b002253823
b002256538008a63381b212121212159012d2c4b505845441b2121592d2c
01b005251023208af500b0016023edec2d2c01b005251023208af500b001
6123edec2d2c01b0062510f500edec2d2c462346608a8a462320468a608a
61b8ff8062232010238ab14b4b8a70456020b0005058b00161b8ffba8b1b
b0468c59b0106068013a2d2c2045b00325465258b0022546206861b00325
b003253f2321381b2111592d2c2045b00325465058b0022546206861b003
25b003253f2321381b2111592d2c00b00743b006430b2d2c8a10ec2d2cb0
0c4358211b2046b0005258b8fff0381bb0103859592d2c20b0005558b810
0063b003254564b00325456461b0005358b0021bb04061b0035925456953
5845441b2121591b21b0022545b00225456164b028515845441b21215959
2d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621b
b200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f
2b59b002602d2c0c6423648bb84000626023212d2c4b5358b00425b00425
4964234564696120b080626ab00225b00225618cb0462344218a10b046f6
211b218a11231220392f592d2c2121212121212d2cb0134358031b02592d
2cb0134358021b03592d2cb00a2b2310203cb0172b2d2cb00225b8fff038
b0282b8a102320d023b0102bb0054358c01b3c59201011b00012012d2c4b
53234b515a58381b2121592d2c01b0022510d023c901b00113b0001410b0
013cb001162d2c01b00013b001b0032549b0031738b001132d2c4b53234b
515a5820458a60441b2121592d2cb0024354584b53234b515a58381b2121
591b21212121592d2c4b53234b515a58381b2121592d2c4b5458381b2121
592d2cb002435458b0482b1b21212121592d2cb002435458b0492b1b2121
21592d2c4b52587d1b7a592d2cb1020042b123018851b1400188535a58b9
10000020885458b202010243604259b12401885158b920000040885458b2
02020243604259b12401885458b2022002436042004b014b5258b2020802
436042591bb940000080885458b202040243604259b94000008063b80100
885458b202080243604259b94000010063b80200885458b2021002436042
595959592d00000000010000000700000565e4755f0f3cf5001b08000000
0000aff53caf00000000d67e33c7fb5cfdf20bc908070000000900010000
00000000000100000760fe5200000bdefb5cfa7a0bc90001000000000000
00000000000000000d1a02580032000000000239000000000000023900b6
02d700540000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000055600a4000000000000000000000000000000000000
0000000000000000000000000000000000000000000006aa00a400000000
000000000000000000000000000000000556005c00000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000473008b00000000047300480473
004800000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000002aa008b0400003f0239
0023047300870000000000000000000000000400001b0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000060d003f000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000140014001400140044007900790079
007900790079007900790079007900790079007900790079007900790079
00790079007900790079007900790079007900790079007900790079010f
010f010f010f010f010f010f010f010f010f010f01bf01bf01bf01bf01bf
01bf02990299029902990299029902990299029902990299029902990299
02990322032203a304410441044104410441044104410441044104410441
0441044104800533059605f305f305f305f306ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab
06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab06ab0756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560756
075607560756075607560756075607560756075607560756075607560000
000100001060005f00030000000000020010002f0055000004e007890000
000000>
<0000002c0216000100000000000001090000000100000000000100140109
0001000000000002000701660001000000000003001c0151000100000000
0004001401090001000000000005000c016d000100000000000600120179
000100000000000700480109000100000000000d0702018b000300010403
0002000c088d00030001040500020010089d0003000104060002000c08ad
0003000104070002001008b90003000104080002001008c9000300010409
0000021608d9000300010409000100280aef0003000104090002000e0ba9
000300010409000300380b7f000300010409000400280aef000300010409
000500180bb7000300010409000600240bcf000300010409000700900aef
0003000104090008002a08e7000300010409000d0e140bf300030001040a
0002000c088d00030001040b000200101a0700030001040c0002000c088d
00030001040e0002000c1a170003000104100002000e1a27000300010413
000200121a350003000104140002000c088d00030001041500020010088d
0003000104160002000c088d0003000104190002000e1a4700030001041b
000200101a1700030001041d0002000c088d00030001041f0002000c088d
0003000104240002000e1a5500030001042a0002000e1a6300030001042d
0002000e1a7100030001080a0002000c088d0003000108160002000c088d
000300010c0a0002000c088d000300010c0c0002000c088da92032303138
204d6963726f736f667420436f72706f726174696f6e2e20416c6c207269
676874732072657365727665642e0d0d486562726577204f70656e547970
65204c61796f7574206c6f67696320636f7079726967687420a920323030
33202620323030372c2052616c70682048616e636f636b2026204a6f686e
20487564736f6e2e2054686973206c61796f7574206c6f67696320666f72
204269626c6963616c20486562726577206973206f70656e20736f757263
6520736f66747761726520756e64657220746865204d4954204c6963656e
73653b2073656520656d626564646564206c6963656e7365206465736372
697074696f6e20666f722064657461696c732e4d6963726f736f66742053
616e7320536572696620697320612074726164656d61726b206f66207468
65204d6963726f736f66742067726f7570206f6620636f6d70616e696573
2e4d6963726f736f66742053616e7320536572696620526567756c617256
657273696f6e20372e30304d6963726f736f667453616e7353657269664d
6963726f736f667420737570706c69656420666f6e742e20596f75206d61
7920757365207468697320666f6e7420746f206372656174652c20646973
706c61792c20616e64207072696e7420636f6e74656e7420617320706572
6d697474656420627920746865206c6963656e7365207465726d73206f72
207465726d73206f66207573652c206f6620746865204d6963726f736f66
742070726f647563742c20736572766963652c206f7220636f6e74656e74
20696e207768696368207468697320666f6e742077617320696e636c7564
65642e20596f75206d6179206f6e6c792028692920656d62656420746869
7320666f6e7420696e20636f6e74656e74206173207065726d6974746564
2062792074686520656d62656464696e67207265737472696374696f6e73
20696e636c7564656420696e207468697320666f6e743b20616e64202869
69292074656d706f726172696c7920646f776e6c6f616420746869732066
6f6e7420746f2061207072696e746572206f72206f74686572206f757470
75742064657669636520746f2068656c70207072696e7420636f6e74656e
742e20416e79206f74686572207573652069732070726f68696269746564
2e0d0d54686520666f6c6c6f77696e67206c6963656e73652c2062617365
64206f6e20746865204d4954206c6963656e73652028687474703a2f2f65
6e2e77696b6970656469612e6f72672f77696b692f4d49545f4c6963656e
7365292c206170706c69657320746f20746865204f70656e54797065204c
61796f7574206c6f67696320666f72204269626c6963616c204865627265
7720d24c61796f7574204c6f676963d3206173206a6f696e746c79206465
76656c6f7065642062792052616c70682048616e636f636b20616e64204a
6f686e20487564736f6e2e200d0d5065726d697373696f6e206973206865
72656279206772616e7465642c2066726565206f66206368617267652c20
746f20616e7920706572736f6e206f627461696e696e67206120636f7079
206f6620746865204f70656e54797065204c61796f7574206c6f67696320
666f72204269626c6963616c2048656272657720616e64206173736f6369
6174656420646f63756d656e746174696f6e2066696c6573202874686520
d24c61796f7574204c6f67696320536f667477617265d3292c20746f2064
65616c20696e20746865204c61796f7574204c6f67696320536f66747761
726520776974686f7574207265737472696374696f6e2c20696e636c7564
696e6720776974686f7574206c696d69746174696f6e2074686520726967
68747320746f207573652c20636f70792c206d6f646966792c206d657267
652c207075626c6973682c20646973747269627574652c207375626c6963
656e73652c20616e642f6f722073656c6c20636f70696573206f66207468
65204c61796f7574204c6f67696320536f6674776172652c20616e642074
6f207065726d697420706572736f6e7320746f2077686f6d20746865204c
61796f7574204c6f67696320536f667477617265206973206675726e6973
68656420746f20646f20736f2c207375626a65637420746f207468652066
6f6c6c6f77696e6720636f6e646974696f6e733a0d0d5468652061626f76
6520636f70797269676874206e6f7469636520616e642074686973207065
726d697373696f6e206e6f74696365207368616c6c20626520696e636c75
64656420696e20616c6c20636f70696573206f72207375627374616e7469
616c20706f7274696f6e73206f6620746865204c61796f7574204c6f6769
6320536f6674776172652e0d0d54484520534f4654574152452049532050
524f564944454420274153204953272c20574954484f5554205741525241
4e5459204f4620414e59204b494e442c2045585052455353204f5220494d
504c4945442c20494e434c5544494e4720425554204e4f54204c494d4954
454420544f205448452057415252414e54494553204f46204d4552434841
4e544142494c4954592c204649544e45535320464f522041205041525449
43554c415220505552504f534520414e44204e4f4e494e4652494e47454d
454e542e20494e204e4f204556454e54205348414c4c2054484520415554
484f5253204f5220434f5059524947485420484f4c44455253204245204c
4941424c4520464f5220414e5920434c41494d2c2044414d41474553204f
52204f54484552204c494142494c4954592c205748455448455220494e20
414e20414354494f4e204f4620434f4e54524143542c20544f5254204f52
204f54484552574953452c2041524953494e472046524f4d2c204f555420
4f46204f5220494e20434f4e4e454354494f4e2057495448205448452053
4f465457415245204f522054484520555345204f52204f54484552204445
414c494e475320494e2054484520534f4654574152452e004e006f007200
6d0061006c006e0079006f00620079010d0065006a006e00e9006e006f00
72006d0061006c005300740061006e0064006100720064039a03b103bd03
bf03bd03b903ba03ac00a9002000320030003100380020004d0069006300
72006f0073006f0066007400200043006f00720070006f00720061007400
69006f006e002e00200041006c006c002000720069006700680074007300
2000720065007300650072007600650064002e000d000a000d000a004800
6500620072006500770020004f00700065006e0054007900700065002000
4c00610079006f007500740020006c006f00670069006300200063006f00
70007900720069006700680074002000a900200032003000300033002000
2600200032003000300037002c002000520061006c007000680020004800
61006e0063006f0063006b002000260020004a006f0068006e0020004800
7500640073006f006e002e002000540068006900730020006c0061007900
6f007500740020006c006f00670069006300200066006f00720020004200
690062006c006900630061006c0020004800650062007200650077002000
6900730020006f00700065006e00200073006f0075007200630065002000
73006f00660074007700610072006500200075006e006400650072002000
74006800650020004d004900540020004c006900630065006e0073006500
3b002000730065006500200065006d006200650064006400650064002000
6c006900630065006e007300650020006400650073006300720069007000
740069006f006e00200066006f0072002000640065007400610069006c00
73002e004d006900630072006f0073006f00660074002000530061006e00
730020005300650072006900660020006900730020006100200074007200
6100640065006d00610072006b0020006f00660020007400680065002000
4d006900630072006f0073006f00660074002000670072006f0075007000
20006f006600200063006f006d00700061006e006900650073002e004d00
6900630072006f0073006f00660074002000530061006e00730020005300
6500720069006600200052006500670075006c0061007200560065007200
730069006f006e00200037002e00300030004d006900630072006f007300
6f0066007400530061006e007300530065007200690066004d0069006300
72006f0073006f0066007400200073007500700070006c00690065006400
200066006f006e0074002e00200059006f00750020006d00610079002000
75007300650020007400680069007300200066006f006e00740020007400
6f0020006300720065006100740065002c00200064006900730070006c00
610079002c00200061006e00640020007000720069006e00740020006300
6f006e00740065006e00740020006100730020007000650072006d006900
7400740065006400200062007900200074006800650020006c0069006300
65006e007300650020007400650072006d00730020006f00720020007400
650072006d00730020006f00660020007500730065002c0020006f006600
200074006800650020004d006900630072006f0073006f00660074002000
700072006f0064007500630074002c002000730065007200760069006300
65002c0020006f007200200063006f006e00740065006e00740020006900
6e0020007700680069006300680020007400680069007300200066006f00
6e0074002000770061007300200069006e0063006c007500640065006400
2e00200059006f00750020006d006100790020006f006e006c0079002000
280069002900200065006d00620065006400200074006800690073002000
66006f006e007400200069006e00200063006f006e00740065006e007400
20006100730020007000650072006d006900740074006500640020006200
79002000740068006500200065006d00620065006400640069006e006700
20007200650073007400720069006300740069006f006e00730020006900
6e0063006c007500640065006400200069006e0020007400680069007300
200066006f006e0074003b00200061006e00640020002800690069002900
2000740065006d0070006f0072006100720069006c007900200064006f00
77006e006c006f006100640020007400680069007300200066006f006e00
7400200074006f002000610020007000720069006e007400650072002000
6f00720020006f00740068006500720020006f0075007400700075007400
2000640065007600690063006500200074006f002000680065006c007000
20007000720069006e007400200063006f006e00740065006e0074002e00
200041006e00790020006f00740068006500720020007500730065002000
690073002000700072006f0068006900620069007400650064002e000d00
0a000d000a00540068006500200066006f006c006c006f00770069006e00
670020006c006900630065006e00730065002c0020006200610073006500
640020006f006e00200074006800650020004d004900540020006c006900
630065006e00730065002000280068007400740070003a002f002f006500
6e002e00770069006b006900700065006400690061002e006f0072006700
2f00770069006b0069002f004d00490054005f004c006900630065006e00
7300650029002c0020006100700070006c00690065007300200074006f00
200074006800650020004f00700065006e00540079007000650020004c00
610079006f007500740020006c006f00670069006300200066006f007200
20004200690062006c006900630061006c00200048006500620072006500
770020201c004c00610079006f007500740020004c006f00670069006320
1d0020006100730020006a006f0069006e0074006c007900200064006500
760065006c006f007000650064002000620079002000520061006c007000
68002000480061006e0063006f0063006b00200061006e00640020004a00
6f0068006e00200048007500640073006f006e002e0020000d000a000d00
0a005000650072006d0069007300730069006f006e002000690073002000
68006500720065006200790020006700720061006e007400650064002c00
2000660072006500650020006f0066002000630068006100720067006500
2c00200074006f00200061006e007900200070006500720073006f006e00
20006f0062007400610069006e0069006e00670020006100200063006f00
7000790020006f006600200074006800650020004f00700065006e005400
79007000650020004c00610079006f007500740020006c006f0067006900
6300200066006f00720020004200690062006c006900630061006c002000
480065006200720065007700200061006e00640020006100730073006f00
630069006100740065006400200064006f00630075006d0065006e007400
6100740069006f006e002000660069006c00650073002000280074006800
650020201c004c00610079006f007500740020004c006f00670069006300
200053006f006600740077006100720065201d0029002c00200074006f00
20006400650061006c00200069006e00200074006800650020004c006100
79006f007500740020004c006f00670069006300200053006f0066007400
7700610072006500200077006900740068006f0075007400200072006500
73007400720069006300740069006f006e002c00200069006e0063006c00
7500640069006e006700200077006900740068006f007500740020006c00
69006d00690074006100740069006f006e00200074006800650020007200
69006700680074007300200074006f0020007500730065002c0020006300
6f00700079002c0020006d006f0064006900660079002c0020006d006500
7200670065002c0020007000750062006c006900730068002c0020006400
6900730074007200690062007500740065002c0020007300750062006c00
6900630065006e00730065002c00200061006e0064002f006f0072002000
730065006c006c00200063006f00700069006500730020006f0066002000
74006800650020004c00610079006f007500740020004c006f0067006900
6300200053006f006600740077006100720065002c00200061006e006400
200074006f0020007000650072006d006900740020007000650072007300
6f006e007300200074006f002000770068006f006d002000740068006500
20004c00610079006f007500740020004c006f0067006900630020005300
6f0066007400770061007200650020006900730020006600750072006e00
69007300680065006400200074006f00200064006f00200073006f002c00
20007300750062006a00650063007400200074006f002000740068006500
200066006f006c006c006f00770069006e006700200063006f006e006400
6900740069006f006e0073003a000d000a000d000a005400680065002000
610062006f0076006500200063006f007000790072006900670068007400
20006e006f007400690063006500200061006e0064002000740068006900
730020007000650072006d0069007300730069006f006e0020006e006f00
740069006300650020007300680061006c006c0020006200650020006900
6e0063006c007500640065006400200069006e00200061006c006c002000
63006f00700069006500730020006f007200200073007500620073007400
61006e007400690061006c00200070006f007200740069006f006e007300
20006f006600200074006800650020004c00610079006f00750074002000
4c006f00670069006300200053006f006600740077006100720065002e00
0d000a000d000a00540048004500200053004f0046005400570041005200
45002000490053002000500052004f005600490044004500440020002700
4100530020004900530027002c00200057004900540048004f0055005400
2000570041005200520041004e005400590020004f004600200041004e00
590020004b0049004e0044002c0020004500580050005200450053005300
20004f005200200049004d0050004c004900450044002c00200049004e00
43004c005500440049004e004700200042005500540020004e004f005400
20004c0049004d004900540045004400200054004f002000540048004500
2000570041005200520041004e00540049004500530020004f0046002000
4d00450052004300480041004e0054004100420049004c00490054005900
2c0020004600490054004e00450053005300200046004f00520020004100
200050004100520054004900430055004c00410052002000500055005200
50004f0053004500200041004e00440020004e004f004e0049004e004600
520049004e00470045004d0045004e0054002e00200049004e0020004e00
4f0020004500560045004e00540020005300480041004c004c0020005400
48004500200041005500540048004f005200530020004f00520020004300
4f005000590052004900470048005400200048004f004c00440045005200
530020004200450020004c004900410042004c004500200046004f005200
200041004e005900200043004c00410049004d002c002000440041004d00
410047004500530020004f00520020004f00540048004500520020004c00
49004100420049004c004900540059002c00200057004800450054004800
45005200200049004e00200041004e00200041004300540049004f004e00
20004f004600200043004f004e00540052004100430054002c0020005400
4f005200540020004f00520020004f005400480045005200570049005300
45002c002000410052004900530049004e0047002000460052004f004d00
2c0020004f005500540020004f00460020004f005200200049004e002000
43004f004e004e0045004300540049004f004e0020005700490054004800
2000540048004500200053004f0046005400570041005200450020004f00
52002000540048004500200055005300450020004f00520020004f005400
48004500520020004400450041004c0049004e0047005300200049004e00
2000540048004500200053004f004600540057004100520045002e004e00
6f0072006d00610061006c0069004e006f0072006d00e1006c006e006500
4e006f0072006d0061006c0065005300740061006e006400610061007200
64041e0431044b0447043d044b0439004e0061007600610064006e006f00
74006801b001a10300006e00670041007200720075006e00740061000000
b15440b80135b31c22392f410c0135003f0135004f0135008f0135009f01
3500050040012eb31c1f3930411201280001004001280080012800900128
00a0012800b00128000500ef0126000100400125b31b1f3940410a012400
01002f01050001004f010400010040010340aa090d392f652f662f672f68
2f692f6a2f742f752f7b2f7c2fd12fd20c20fc30fc40fcd0fc04f1f2197f
f2018ff2aff2e0f203d1d216171c7b7c161b7b7c19307c407c507c607c70
7c05767716171c6d7016171c6c6f16171c6b6e161b0f6b7f6b8f6e9f6eaf
6e056b6e7f721a747514151c676a14151ca96ab96ae96af96a0466691415
1cc669016568141b0f651f6502af68bf68ef65ff6504656885711a197316
7a431921794319212f4147014200400142007f014200030050013b000100
2f013a004f013a006f013a007f013a00bf013a0005007f01340001007f01
3300800133009001330003006f0132007f0132008f013200030070012100
01002f0121003f0121004f0121005f0121000400a0011e00b0011e00c001
1e00030020012d0030012d0060012d0070012d0080012d0090012d000600
40010fb40b1f39092f411f010e005f010e009f010e00af010e00bf010e00
050090010e00bf010e00cf010e00df010e00ef010e00050020010e006f01
0e00b0010e00d0010e00e0010eb205d10f4123010e003f010e00bf010e00
cf010e0004000f010e005f010e006f010e00a0010e00bf010e00cf010e00
df010e0007003f010e004f010e007f010e00af010e00ef010e00ff010eb2
069f7f4123010e00af010e00e0010e00ff010e0004001f010e003f010e00
af010e00df010e00ef010e0005000f010e001f010e002f010e007f010e00
8f010e00c0010e00df010e00ef010eb2086d9f411b010e00cf010e00ef01
0e00ff010e0004000f010e00ef010e0002000f010e002f010e003f010e00
4f010e00c0010e00df010e00ef010eb2073a70bd010e00df010e00020040
010eb32b33395f411b010e0070010e008f010e009f010e00cf010e00df01
0e0006000f010e001f010e003f010e0080010e00bf010e00ef010e000600
40010eb3091b3970bb0136000100200108b30d113940b80102b20b1439b9
ffc00107b31b22392f4118010c004f010c0002002f010c0001008f010b00
01002f0107004f010700c0010700d001070004004f010700010040010040
640b103940fe0b1139e0f601e0f60114f424f40274f40140df60df0220d8
30d840d80366c176c10299be0120b230b240b20360b070b0029b93002b9a
92002b9991002b9493002b9293002b9193062b9395032b9885042b979604
2b9695032b9995a995026f410f0131007f0131008f013100030130011600
32001f011901160015001f0116b285032bb9ffe0012fb30b143970410d01
170001002f0117003f0117004f0117005f0117000401130114b22a1fa0bc
011400b0011400c0011440160370fbf0fb022ffb6ffb7ffb0340fa50fa60
faf0fa04b8ffc040fffa11153950ec70ec0250ec70ec0240ec01bfeb0170
ea0130ea0170e9015fe970e9f0e903a0e9015fe870e802efe8017fe8bfe8
efe803f0e701f0e7012fe780e7a0e7f0e70450e6f0e60250e660e670e6c0
e60450e50170e50180e4e0e4f0e40340dca0dc02309050900220a04fa05f
a09fa0afa0efa006e0f501e0f501f3851e1f2fe20140dd019fd5afd5bfd5
030fd340d302e0d0010fc470c4022fc43fc44fc45fc49fc4afc4efc4ffc4
0899bd99bf02dad9042bd685022bcccd062bcd85022bc9c8062bc885022b
8d8b042b8c8b191f8b83c81f897d641f817f082b7d7f082b7f85072baf85
042b8885012b8785002b8485042b8385002b2ffd4ffd027f40abef012df0
3bf04ff069f07ff0051b37151836151535151234150f33150c3215093115
063015032f15002e1526270f28270f26002a1f0f2a2f2a3f2a032f24bf24
022a2b0f2c2b0f22230e24230f1e1f0e201f0f2005010f10110c0c0d0e0c
090a0b0c0607080c0304050c0001020c0003181f500f700f027f0f800fbf
0f030f031f032f034f037f03bf03ef030704012c1f1b011d0d18071a0d15
10170d1204140d701b01501b701bf01b03b8ffc0400b1b131839701b801b
02503301b0124b004b5442b013014b004b5342b0332b4bb8032052b0322b
4bb009505b58b101018e59b0332bb00288b8010054b00488b8020054b012
435a5b58b80119b101018e851bb900040100b04b60858d592b1db0644b53
58b0801d59b0324b5358b0901d5900732b74742b2b2b2b2b7373742b2b2b
2b2b2b2b732b2b2b2b2b2b73732bb1282645b02a4561b02c4560442b2b2b
2b2b2b2b2b2b2b2b2b73b0ef45b0f0456168b0f04560b0ef23447373012b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73737473737373732b74737374
7373737473747374747373747374747374737374742b747374742b73742b
2b2b2b7300732b2b2b2b2b2b2b2b2b2b737373737373737473742b2b7373
7373732b2b2b742b73742b755e7374755e7374755e7374755e7374755e2b
73747374737373737373012b2bb018b0314b53422b2b73742b732b732b2b
2b732b2b2b2b732b2b2b73742b73732b7373732b7373742b732bb109322b
4bb05052424bb03c524bb00f505bb01a23424bb0c8524bb036505bb00c23
422b000000>
[3757 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 242 37 <000300a4000004ec05ba000d0016001e00c24043380d480d02080b010708
0111020b1e910e4005040e91183016910503179104270001081a181a020d
020b04127f0c091c09020f0309180d0d063b090c0b0b063b090904b8fffa
b40d0d063b04b8fffcb70b0b063b041a7d00b8fff4b40d0d063b00b8ffea
b60b0b063b000e17b8fffc40190d0d063b177f044020006f021f046b02a7
20018820e82002005f5d5d2b2b011a18104ded2b32102b2bed122b2b392f
2b2b5f5e5ded12395f5e5d5d002fed3fed2b001a18104ded3931305f5e5d
5d5d01140421211121320415140716160121323635342623211121203534
26232104ecfee8fef5fddb020aea010cd38e8dfc7a0146a19894b7fecc01
61015ca1d4feb801aacedc05bac8aed46624c1012f67786c6dfba2fc8379
>JAAAAA+Microsoft#20Sans#20Serif AddT42Char 
2 894 54 <0001005cffe704ec05d300230140b9001dfff4b40b0b063b1cb8fff44076
0b0b063b5a220103681f0102571f0100071f0101351e451e0203781d0102
131d231d531d0303381a481a020228173817481703007814010255140155
100103680e780e02780d0101080d010a5a0c01580b010225093509020317
05270537050300670201024a0201030a0f1b21040068150115189112b8ff
fc40150d0d063b120407034703570367038703050b000307b8fff040200d
0d063b07910013167f150c0b0b063b151b7f0f0c0b0b063b0f150f030a7f
21b8ffe0b40b0b063b21b8fff4401a0d0d063b21047f034025216f022403
6c02b825e82502a72501005f5d5d2b2b011a18104ded102b2bed1239392f
2bed2f2bed003fed2bc45f5e5d3f2bedc45d12173931305f5d5f5d5f5d5f
5d5f5d5d5e5d5f5d5d5f5d5d5f5d5f5d5f5d5f5d5f5d5f5d5f5d5f5d5f5d
5f5d2b2b0520002733161633323635342624263534243332041723022122
0615141604161615140402cdfecafecd08bb0ff3aca3c7cefe09db011dec
f8013009bd1dfeb1a2b28f0187e6a4fed3190116daa49d8673796e6bbe9e
b2e4e6d2010a7a655c5c5654b195bdfa>JAAAAA+Microsoft#20Sans#20Serif AddT42Char 
2 1330 69 <0002008bffe7042b05ba000e001900bd4047a819b819020248190100a715
b715020225130103580f010a0a1a0a2a0a3a0a5a0a6a0a7a0a0702770687
0697060301a704b70402a801b80102179602100d00119608160c148305b8
fff4b40d0d063b05b8ffd240150b0b063b050805180528054805040d020f
000b850cb8fff4b40d0d063b0cb8ffca40160b0b063b0c401b0569021a0c
6502481be81bf81b03005f5d2b2b011a18102b2b4ded32325f5e5d102b2b
ed002f3fed3f3fed31305d5d5f5d5f5d5d5f5d5f5d5f5d5f5d0136333212
15100223222715231133111633323635342623220701487eb1d0e4ffc2ac
76bdbd799d7a90887a9d8103a697fed9fbfefbfed16b5205bafb4281d1cf
c4cbb600>JAAAAA+Microsoft#20Sans#20Serif AddT42Char 
2 1862 72 <00020048ffe7042b043d0014001b00d840091a110108201317360cb8ffe0
40450b0e360813011067017701020b961b400a1b01110206001b9618304a
185a180218968a060165060103061007121712020900120e962500010a00
010f030016118312158309b8ffeeb40d0d063b09b8ffde400f0b0b063b09
1b0b8303100d0d063b03b8ffde40260b0b063b0340070337034703570304
11021d0969021c036602571d771d02481de81df81d03005f5d712b2b015f
5e5d1a18102b2b4ded32102b2bedd4ed003f5f5e5d5dedcd5f5e5d3f5f5d
5ded5d2b005f5e5d1a18104ded31305d5e5d2b2b015d0522001110003332
0011152116163332363733060613262623220607024eeafee40113dee301
0ffce10cb383639f04c316fd6017a07471a216190125010601040127fede
fef72db8b2655da4b202929998979a00>JAAAAA+Microsoft#20Sans#20Serif AddT42Char 
2 2304 86 <0001003fffe703b0043d001f0101b90003ffe640750b0b063b611b01271b
371b0203271b371b0200771a010247195719671977190403471957196719
77190400050e150e250e350e0403680c01870b0102280b380b0200780a01
02080d181d0400121596101007021702670277028702c702d702e702f702
09000205960016071d171d02090213851218b8fff440100d0d063b18850d
120d02100d0d063b02b8ffe6b70b0b063b0208851db8fff0b40d0d063b1d
b8ffdc40170b0b063b1d03850240211d6902200266022721a72102005f5d
2b2b011a18104ded102b2bed122b2b39392fed2b2fed5f5e5d003fedc45f
5d3fedc412173931305f5d5f5d5f5d5d5f5d5f5d5f5d5f5d5f5d5f5d5d01
2b0520033316213236353426242635343633201323262322061514160416
1514060206fe4d14bd020106757b78fe89add7b401a109bc0ad75f7d6001
81bbe7190156c26149483b5e749284adfed79648453e375d7c9891bf>JAAAAA+Microsoft#20Sans#20Serif AddT42Char 
2 2662 87 <00010023fff20227052d0016007f4045032a091036aa040103280b780b02
0b100d07960a0f1496027716010fa71601160d0a10857807010707170727
070308280701280701a707b707c707d70704070c0d0d063b07b8ffc24012
0b0b063b077818014718a718b718f71804005f5d5d2f2b2b5d5d71cd5d5d
fd3939d65dc65d002fed3fed3939cd5d31305f5d2b050623222626351123
353311331133152311141633323702273e49746c1a8383bcacac3730312d
020c538270025a940108fef894fd9c6d3b08>JAAAAA+Microsoft#20Sans#20Serif AddT42Char 
2 2860 88 <00010087ffe703e704250010007e401f180b01029c08ac08020e031e037e
039e03ae0305090c011c012c01030a030cb8ffe840180b0b063b00020d05
0f100a950216100d850e040d0d063b0eb8ffe8b70b0b063b0e068505b8ff
cc400e0b0b063b0540120e6802110565022b2b011a18102b4ded102b2bed
32003fed2f3f33123931302b5f5e5d5e5d5d5f5d25062320111133111416
33323711331123032b8db0fe99bd5c6a9e83bcbc87a0018802b6fd528272
aa02f8fbdb00>JAAAAA+Microsoft#20Sans#20Serif AddT42Char 
2 3046 92 <0001001bfe5203e504250010012cb10602435458401702080503030c060f
030f0f00950c1c0e05070605030405b8ffdcb70b0b063b05051211111239
2f2bddcd10ddcd10c4003ffdc63f3f1112173931301b4049080818082808
03022607010605160526050300470b570b670b03029702a7020203070217
0227020309013a01010305061c0504068707081407070805041c05060487
03021403030203b8ffe2401d091936071e091936030f08490201000a023a
02020c02020095400c1c0fb8ffc040290910360f02080f03070312076a02
11036702671277120227123712671277128712a712e712f71208005f5d71
2b2b0111121739182f2b003f1a4ded2f5f5e5d5f5d333f3130012b2b8705
2e2b084b52587d1b7a5910c487052e182b084b52587d1b7a5910c4015f5d
5f5e5d5f5d5f5d005f5d5d5f5d591332130133010133010e022322273516
c78c59fe6fcc01190119ccfe6f3a51835f47332cff0001000425fcc2033e
fbdb98a5710eae0e>JAAAAA+Microsoft#20Sans#20Serif AddT42Char 
2 0 0 <0002003200000226060000030007000033112111252111213201f4fe7801
1cfee40600fa006c0528>JAAAAA+Microsoft#20Sans#20Serif AddT42Char 
JAAAAA+Microsoft#20Sans#20Serif /CharStrings get begin
/B 37 def
/S 54 def
/b 69 def
/e 72 def
/s 86 def
/t 87 def
/u 88 def
/y 92 def
end
JAAAAA+Microsoft#20Sans#20Serif /Encoding get
dup 66 /B put
dup 83 /S put
dup 98 /b put
dup 101 /e put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 121 /y put
pop
end
%ADOEndSubsetFont
/SFCUQV+Microsoft#20Sans#20Serif /JAAAAA+Microsoft#20Sans#20Serif findfont ct_VMDictPut
/SFCUQV+Microsoft#20Sans#20Serif*1 
[66{/.notdef}rp /B 16{/.notdef}rp /S 14{/.notdef}rp /b 2{/.notdef}rp /e 
13{/.notdef}rp /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
SFCUQV+Microsoft#20Sans#20Serif nf
SFCUQV+Microsoft#20Sans#20Serif*1 [22.525 0 0 -22.525 0 0 ]msf
270.8 88.6 mo
(SubBytes)
[15.0244 12.5239 12.5239 15.0243 11.5103 5.99164 12.5239 0 ]xsh
520.45 169.94 mo
507.96 178.52 li
512.25 181.63 li
436.34 296.537 252.09 326.591 159.18 175 cv
154.99 175.13 li
248.29 332.186 441.74 301.686 515.51 183.33 cv
520.05 185.89 li
520.45 169.94 li
cp
ef
.75 lw
520.45 169.94 mo
507.96 178.52 li
512.25 181.63 li
436.34 296.537 252.09 326.591 159.18 175 cv
154.99 175.13 li
248.29 332.186 441.74 301.686 515.51 183.33 cv
520.05 185.89 li
520.45 169.94 li
cp
@
309.63 309.341 mo
365.314 309.341 li
365.314 253.657 li
309.63 253.657 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1.5 lw
0 lc
0 lj
309.63 309.341 mo
365.314 309.341 li
365.314 253.657 li
309.63 253.657 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQU+Tahoma gcheck setglobal} if
1 2300 54 <0001004dffe5044205ec003301ccb0852b5840462f0d29142b2b3902390d
361c35274a02450a4a0c451c492444275a02560a590f5a18551c5e246506
6a136c156618651c6628602c6830761c1c7a0e742802282b110e04001a1e
b8ffc040150b0b013c1f1e2f1e7f1e031e1e22341a0271050105b8ffc0b3
090b3705b8ffc0401a0f0f013c05400b0b013c05050834000a282b110e04
2e171e1e0b410afffe000c000c01400056000bfff2000b000b0140400a56
0b0c0d0d063b0b152ebeffea000b000b01400056002effc0400a0914372e
0c0b0b023b2eb8ffd4b40d0d023b2eb8ffe8b40f0f063b2eb8ffeeb40c0c
063b2eb8ffe6b40d0d063b2eb8ffd040120b0b063b2e2e350f354f350204
0425020c0cb80140b456250c0b0bbb014000560025fff440300d0d063b25
15a017b0170217100b0b023b170c0c0c023b170c0d0d023b170e0f0f063b
170c0c0c063b170c0d0d063b17b8ffdcb40b0b063b17b8ffc0b60c113717
120b0bb80140b156172f2b2b2b2b2b2b2b2b2b5ded2b2b2b332f5d11332f
2b2b2b2b2b2b2b2bed2b2b2b332f11121739003fed332f2b2b2b5d3fed33
2f5d2b111217395d31305d1b4017282b110e04001a1e1e1a22346c1a0205
050008346c000a00183f2b332f3f2b332f11121739303159052226273533
161633323635342627262627262627262635342433321617152326262322
061514161716161716161514060706060236a2e3640e62f873a4a8586045
72564d7a2f2e33011adb7ddf5f0f47de7a8aaa645f3fb63c9a8e474048b5
1b4331f85c65897059701b141a16143e32318557b5f5322eed416181695f
701a112b122fbe8b57aa3b414600>SFCUQU+Tahoma AddT42Char 
SFCUQU+Tahoma /CharStrings get begin
/S 54 def
end
SFCUQU+Tahoma /Encoding get
dup 83 /S put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQU+Tahoma*1 
[44{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two /three 31{/.notdef}rp 
/S 13{/.notdef}rp /a /b 157{/.notdef}rp]
SFCUQU+Tahoma nf
SFCUQU+Tahoma*1 [30.05 0 0 -30.05 0 0 ]msf
329.15 292.85 mo
(S)sh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/SFCUQU+Tahoma*1 uf
/SFCUQU+Tahoma uf
/HAAAAA+Tahoma uf
/SFCUQV+Microsoft#20Sans#20Serif*1 uf
/SFCUQV+Microsoft#20Sans#20Serif uf
/JAAAAA+Microsoft#20Sans#20Serif uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
