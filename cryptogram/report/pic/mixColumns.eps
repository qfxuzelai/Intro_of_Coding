%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: mixColumns.pdf
%%Creator: Adobe Acrobat 19.8.0
%%For: qfxuz
%%CreationDate: 2018/12/1, 22:07:06
%%BoundingBox: 0 0 641 357
%%HiResBoundingBox: 0 0 641 356.5000
%%CropBox: 0 0 641 356.5000
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 950 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 91.163280, 2018/06/22-11:31:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2018-12-01T22:03:26+08:00"
   xmp:CreatorTool="Microsoft® Visio® 2016"
   xmp:ModifyDate="2018-12-01T22:03:26+08:00"
   pdf:Keywords=""
   pdf:Producer="Microsoft® Visio® 2016">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>徐 泽来</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -356.5 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 356.5 li
641 356.5 li
641 0 li
cp
clp
gsave
0 356.5 mo
641 356.5 li
641 -.5 li
0 -.5 li
cp
clp
19.275 112.36 mo
73.539 112.36 li
73.539 58.096 li
19.275 58.096 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.101015 0 .000732433 0 cmyk
ef
1.2431 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
19.275 112.36 mo
73.539 112.36 li
73.539 58.096 li
19.275 58.096 li
cp
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
19.275 166.61 mo
73.539 166.61 li
73.539 112.346 li
19.275 112.346 li
cp
.101015 0 .000732433 0 cmyk
ef
19.275 166.61 mo
73.539 166.61 li
73.539 112.346 li
19.275 112.346 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
19.243 220.89 mo
73.507 220.89 li
73.507 166.626 li
19.243 166.626 li
cp
.101015 0 .000732433 0 cmyk
ef
19.243 220.89 mo
73.507 220.89 li
73.507 166.626 li
19.243 166.626 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
19.243 275.139 mo
73.507 275.139 li
73.507 220.875 li
19.243 220.875 li
cp
.101015 0 .000732433 0 cmyk
ef
19.243 275.139 mo
73.507 275.139 li
73.507 220.875 li
19.243 220.875 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
73.503 112.3 mo
127.767 112.3 li
127.767 58.036 li
73.503 58.036 li
cp
.101015 0 .000732433 0 cmyk
ef
73.503 112.3 mo
127.767 112.3 li
127.767 58.036 li
73.503 58.036 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
73.503 166.54 mo
127.767 166.54 li
127.767 112.276 li
73.503 112.276 li
cp
.101015 0 .000732433 0 cmyk
ef
73.503 166.54 mo
127.767 166.54 li
127.767 112.276 li
73.503 112.276 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
73.471 220.83 mo
127.735 220.83 li
127.735 166.566 li
73.471 166.566 li
cp
.101015 0 .000732433 0 cmyk
ef
73.471 220.83 mo
127.735 220.83 li
127.735 166.566 li
73.471 166.566 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
73.471 275.072 mo
127.735 275.072 li
127.735 220.808 li
73.471 220.808 li
cp
.101015 0 .000732433 0 cmyk
ef
73.471 275.072 mo
127.735 275.072 li
127.735 220.808 li
73.471 220.808 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
127.76 112.3 mo
182.024 112.3 li
182.024 58.036 li
127.76 58.036 li
cp
.101015 0 .000732433 0 cmyk
ef
127.76 112.3 mo
182.024 112.3 li
182.024 58.036 li
127.76 58.036 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
127.76 166.54 mo
182.024 166.54 li
182.024 112.276 li
127.76 112.276 li
cp
.101015 0 .000732433 0 cmyk
ef
127.76 166.54 mo
182.024 166.54 li
182.024 112.276 li
127.76 112.276 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
127.73 220.83 mo
181.994 220.83 li
181.994 166.566 li
127.73 166.566 li
cp
.101015 0 .000732433 0 cmyk
ef
127.73 220.83 mo
181.994 220.83 li
181.994 166.566 li
127.73 166.566 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
127.73 275.074 mo
181.994 275.074 li
181.994 220.81 li
127.73 220.81 li
cp
.101015 0 .000732433 0 cmyk
ef
127.73 275.074 mo
181.994 275.074 li
181.994 220.81 li
127.73 220.81 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
64.493 90.63 mo
134.763 90.63 li
134.763 20.36 li
64.493 20.36 li
cp
0 .167056 .528618 0 cmyk
ef
2.3216 lw
64.493 90.63 mo
134.763 90.63 li
134.763 20.36 li
64.493 20.36 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
69.158 91.35 mo
69.158 96.64 li
141.89 96.7 li
141.77 24 li
135.87 24 li
135.68 91.64 li
69.158 91.35 li
cp
ef
.63722 lw
1 lc
1 lj
69.158 91.35 mo
69.158 96.64 li
141.89 96.7 li
141.77 24 li
135.87 24 li
135.68 91.64 li
69.158 91.35 li
cp
@
64.44 161.04 mo
134.71 161.04 li
134.71 90.77 li
64.44 90.77 li
cp
0 .167056 .528618 0 cmyk
ef
2.3216 lw
0 lc
0 lj
2 ml
64.44 161.04 mo
134.71 161.04 li
134.71 90.77 li
64.44 90.77 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
69.104 161.75 mo
69.104 167.04 li
141.84 167.1 li
141.71 94.4 li
135.82 94.4 li
135.63 162.04 li
69.104 161.75 li
cp
ef
.63722 lw
1 lc
1 lj
69.104 161.75 mo
69.104 167.04 li
141.84 167.1 li
141.71 94.4 li
135.82 94.4 li
135.63 162.04 li
69.104 161.75 li
cp
@
64.504 231.35 mo
134.774 231.35 li
134.774 161.08 li
64.504 161.08 li
cp
0 .167056 .528618 0 cmyk
ef
2.3216 lw
0 lc
0 lj
64.504 231.35 mo
134.774 231.35 li
134.774 161.08 li
64.504 161.08 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
69.169 232.06 mo
69.169 237.35 li
141.9 237.41 li
141.78 164.72 li
135.88 164.72 li
135.69 232.36 li
69.169 232.06 li
cp
ef
.63722 lw
1 lc
1 lj
69.169 232.06 mo
69.169 237.35 li
141.9 237.41 li
141.78 164.72 li
135.88 164.72 li
135.69 232.36 li
69.169 232.06 li
cp
@
64.603 301.643 mo
134.873 301.643 li
134.873 231.373 li
64.603 231.373 li
cp
0 .167056 .528618 0 cmyk
ef
2.3216 lw
0 lc
0 lj
64.603 301.643 mo
134.873 301.643 li
134.873 231.373 li
64.603 231.373 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
69.268 302.357 mo
69.268 307.645 li
142 307.708 li
141.88 235.01 li
135.98 235.01 li
135.79 302.653 li
69.268 302.357 li
cp
ef
.63722 lw
1 lc
1 lj
69.268 302.357 mo
69.268 307.645 li
142 307.708 li
141.88 235.01 li
135.98 235.01 li
135.79 302.653 li
69.268 302.357 li
cp
@
181.99 112.23 mo
236.254 112.23 li
236.254 57.966 li
181.99 57.966 li
cp
.101015 0 .000732433 0 cmyk
ef
1.2431 lw
0 lc
0 lj
181.99 112.23 mo
236.254 112.23 li
236.254 57.966 li
181.99 57.966 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
181.99 166.48 mo
236.254 166.48 li
236.254 112.216 li
181.99 112.216 li
cp
.101015 0 .000732433 0 cmyk
ef
181.99 166.48 mo
236.254 166.48 li
236.254 112.216 li
181.99 112.216 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
181.95 220.76 mo
236.214 220.76 li
236.214 166.496 li
181.95 166.496 li
cp
.101015 0 .000732433 0 cmyk
ef
181.95 220.76 mo
236.214 220.76 li
236.214 166.496 li
181.95 166.496 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
181.95 275.007 mo
236.214 275.007 li
236.214 220.743 li
181.95 220.743 li
cp
.101015 0 .000732433 0 cmyk
ef
181.95 275.007 mo
236.214 275.007 li
236.214 220.743 li
181.95 220.743 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: HAAAAA+Tahoma Initial
ct_T42Dict begin
-0.598 -0.418 1.852 1.031
 256 array 0 1 255 {1 index exch /.notdef put} for  /HAAAAA+Tahoma
Type42DictBegin
[<00010000000c000c000c000c4f532f32da425c0d000000cc000000606376
742089dd96940000012c000003086670676dd76941d0000004340000101c
676c7966527bfc90000075d4000024d468656164ee826c49000014500000
003668686561120908c20000148800000024686d747860270aae000014ac
000024746c6f6361b2aebd0f00003920000022c86d61787015e7109f0000
5be8000000206e616d65c8198baf00005c08000013d27072657069b9dc07
00006fdc000005f7676469720000000000000000000000000003038e0190
00050008059a053300000125059a0533000003a0008202b10800020b0604
030504040204e1002effc000605b00000029000000004d53202000400021
0131061efe59003b080101a7200101ff20280000045d05d1000000200018
061e061405f005d1047c045d03d200100000ffe7ffe1fe78fe64fe59039b
00270000009600aa00b900c600ce000000000000000000bc00c200000000
007600b200c000cb0000000000000000000000000081009400a600cc00da
00ef00000000000000000098009e00ab00b000000097009e007d0166017c
00900098009e00a400a900ae00b300ba00c3000000000000000000000000
000000000000000000000000000000000000000000d3011d000000000000
00c3021401c20000000000e9000c02d10173018e009700970042004200c6
000000000000000000000088008000390039000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000001ff0249033f025a02cc0289026f023700000000
0000027a009400c003d203a7004c004c00c000d600be0000000000000000
00000000000000000000008101f901f9007400e500b900ca019502c600ac
00a7008500880091009800a500ac006f0087008f009b00a0000000000000
00000000000000000000068a051104f200000000000000000000000000b8
00ad009a006c00db00cb00c400a0009a006c0000009700910000007d000a
001a001f056000000000000000aa00a20000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000045e02b50094009402cd034202bc02b0032f020403bc0191061405fa
0304006000600059007d004c008f0066004b008700a600a800bc007d0000
0000008c00b200b2008e00a40000000000710071009a00f8008302aa004c
00750075039c033100a400bc003d0062017b01080087003900b6019e00e2
005a005a007000af00e201c300b90071007104bc0068009000bc04da0718
07ec005f0051005f00aa01b704b605d5007e006d007e00c4006d40658574
737271706f6e6d6c6b6a6968676665625f5e5d5c5b5a5958555453525150
4f4e5857565554483c3b3a393837363534333231302f2e2d2c2b2a292827
262524232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09
0807060504030201002c01b0184358b119072b1b212121592d2c01b01843
58b11a072b1b212121592d2c01b0184358b0032510f221b000121b212121
592d2c01b0184358b11b072b1b212121592d2c01b0184358b11c072b1b21
2121592d2c01b0184358b11d072b1b212121592d2c01b0184358b11e072b
1b212121592d2c4eb00014b046234344b0032510b10046e6b00013b00114
b00010f221b001134db000122d2c01b018435845646a234569b019436460
60b0462344231020b046f02fb000121b21212121592d2c01b10b0a432343
650a2d2c00b10a0b4323430b2d2c00b0462370b101463e01b0462370b102
46453ab10200080d2d2cb0122bb0022545b00225456ab0408b60b0022523
442121212d2cb0132bb0022545b00225456ab8ffc08c60b0022523442121
212d2cb000b0122b2121212d2cb000b0132b2121212d2c01b00643b00743
650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c
58b00361592d2cb100032545685458b0032545b0032545606820b0042523
44b0042523441bb00325204568208a2344b00325456860b003252344592d
2cb00325204568208a2344b00325456860b0032523442d2cb01643588721
c01bb01243588745b0112bb0472344b0477ae41b038a45186920b0472344
8a8a8720b0a05158b0112bb0472344b0477ae41b21b0477ae4595959182d
2c208a4523456860442d2c456a422d2c01182f2d2c21212d2c01b0022545
b002254564606ab00325456a6120b00425456a208a8b65b0042523448cb0
0325234421212d2c01456823456961b00325456a6120b00425456a208a8b
65b0042523448cb00325234421212d2c018a8a45642345646164422d2c01
b0022543b04054b0022543b000545a58b003252045b040614459b0022543
b00054b0022543b040545a58b004252045b040604459212121212d2c014b
525843b00225452361441b2121592d2c014b525843b00225452360441b21
21592d2c4b525845441b2121592d2c0120b003252349b04060b0206320b0
00525823b002253823b002256538008a63381b212121212159012d2c4b50
5845441b2121592d2c01b005251023208af500b0016023edec2d2c01b005
251023208af500b0016123edec2d2c01b0062510f500edec2d2c46234660
8a8a462320468a608a61b8ff8062232010238ab14b4b8a70456020b00050
58b00161b8ffba8b1bb0468c59b0106068013a2d2c2045b003254652583f
1b2111592d2c2045b003254650583f1b2111592d2c00b00743b006430b2d
2c4b5258b00425b0042549b00425b00425496120b0005458212043b00055
58591bb04054582043b0005458591b2043b00054581bb00325b8ffc03859
595959212121212d2c4b52584365381b2121592d2c4b525843381b212159
2d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621b
b200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f
2b59b002602d2c0c6423648bb84000626023212d2cb4000100000015b008
26b00826b00826b008260f10161345683ab001162d2cb4000100000015b0
0826b00826b00826b008260f1016134568653ab001162d2cb0134358031b
02592d2cb0134358021b03592d2cb00a2b2310203cb0172b2d2cb0282b8a
102320d023b0102bb00558c01b3c59201011b00012012d2c4b53234b515a
5820458a60441b2121592d2c4b53234b515a58381b2121592d2c20b00325
4523452361688a204568208a234460442d2c20b003254523452361688a20
4568208a234460442d2c4b5358b00425b00425496423456469b0408b6120
b080626ab00225b00225618cb0462344218a10b046f6211b218a11231220
392f592d2cb0024354584b53234b515a58381b2121591b21212121592d2c
b0024350584b53234b515a58381b2121591b21212121592d2c4b53234b51
5a58381b2121592d2cb1020042b123018851b1400188535a58b910000020
885458b202010243604259b12401885158b920000040885458b202020243
6042b12401885458b2022002436042004b014b5258b2020802436042591b
b940000080885458b202040243604259b94000008063b80100885458b202
080243604259b94000010063b80200885458b202100243604259b1260188
5158b94000020063b80400885458b202400243604259b94000040063b808
00885458b202800243604259b12801885158b94000080063b81000885458
ba00020100000243604259595959595959b10002435458400a0540084009
400c020d021bb10102435458b2054008ba010000090100b30c010d011bb1
8002435258b2054008b80180b109401bb2054008ba01800009014059b940
0000808855b94000020063b8040088555a58b30c000d011bb30c000d0159
595942424242422d2cb0024354580c028a4b53b004264b515a580a381b0a
2121591b21212121592d2cb0572b580c028a4b53b004264b515a580a381b
0a2121591b21212121592d2c20b0024354b00123b05f237821b1000243b0
56237921b0024323b020205c58212121b100471c598a8a208a208a23b810
00635658b81000635658212121b1012c1c591b2159b08062205c58212121
b1001b1c5923b08062205c58212121b1000c1c598ab00161b8ffb31c2321
2d2c20b0024354b00123b07b237821b1000243b072237921b10002438ab0
20205c58212121b0631c598a8a208a208a23b81000635658b81000635658
b00426b0015bb00426b00426b004261b21212121b13600231c591b2159b0
042623b08062205c588a5c8a5a23212321b01d1c598ab08062205c582121
2321b00e1c59b00426b00161b8ff981c23212d2c2320b000508a8a64b100
03255458b0401bb10103255458b005438b59b04f2b5923b0622b23212358
65592d2cb108000c215460432d2c014623466023466123201020468a61b8
ff80628ab140408a704560683a2d2c208a2349648a2353583c1b21592d2c
4b52587d1b7a592d2cb012004b014b54422d2cb1020042b123018851b140
0188535a58b910000020885458b202010243604259b12401885158b92000
0040885458b2020202436042b12401885458b2022002436042004b014b52
58b2020802436042591bb940000080885458b202040243604259b9400000
8063b80100885458b202080243604259b94000010063b80200885458b202
100243604259b12601885158b94000020063b80400885458b20240024360
4259b94000040063b80800885458b202800243604259b12801885158b940
00080063b81000885458ba00020100000243604259595959595959b10002
435458400a0540084009400c020d021bb10102435458b2054008ba010000
090100b30c010d011bb18002435258b2054008b80180b109401bb9010000
02435258b2054008ba0180000901401bb901800002435258b2054008b802
00b109401bb2054008ba010000090100595959b9400000808855b9400002
0063b8040088555a58b30c000d011bb30c000d0159595942424242422d2c
451868234b51582320452064b04050587c59688a6059442d2cb00016b002
25b0022501b001233e00b002233eb10102060cb00a236542b00b234201b0
01233f00b002233fb10102060cb006236542b0072342b00116012d2c20b8
2000628a6023622d2cb0072558001b0159b0042510b00325b0022520b8ff
ff545821cd1bed5921b006255cb006255a58b0092b5920b005254ab00425
47b004254760b0062547b0806361b00225b0005558b00325b00725496359
b0082558001b0159b00425b0062549b009255cb009255a58b0092b59b007
2546b0806361b0032520b0005558631b2159612320b0005558b080631b21
b08059b0592bb006255c586959b00425202010b00048233ab0062658001b
0159b0052658b003252f598a12233221212d2cb00625b00a2587b00625b0
09254ab0005358b00625b00a251bb00925b0072559b00225b00225070cb0
05256323b00625636020b94000040063535821b00426b00426b00a1bb940
00040063655158b0042665b0042665b00a1bb00426b00426b000b00325b0
03250b0d0ab0092eb00725b007250b0d0ab00b2eb00525b0052507595920
b0005558b00525b0052587b00725b007250bb0092510b00b25b0092620b8
ffff545821cd1bed59b00525b0052507b00825b00b254923b00625b00625
87b00a2510b00b25c15920b00051b800522378b00161b00225b00725b007
2507b00a25b00d254961b08062b00525b005250bb00a252338b00625b006
2587b00825b008250bb00a2510b00b25c4b00625b0062507b00925b00c25
49b0032554b8ffa723792121212121212121212121212d2c23b0005458b9
400000001bb900004000598ab0005458b9400000001bb90000400059b05b
2b2d2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a080d
8ab0005458b9400000001bb90000400059b05b2b2d2cb00426b00426080d
b00426b00426080db05b2b2d2cb0022563b0206066b00225b82000626023
622d2c234ab1024e2b2d2c234ab1014e2b2d2c238a4a234564b0022564b0
02256164b00343525821206459b1024e2b23b000505865592d2c238a4a23
4564b0022564b002256164b00343525821206459b1014e2b23b000505865
592d2c20b003254ab1024e2b8a103b2d2c20b003254ab1014e2b8a103b2d
2cb00325b003258ab0672b8a103b2d2cb00325b003258ab0682b8a103b2d
2cb0032546b003254660b004252eb00425b00425b0042620b000505821b0
6a1bb06c592bb0032546b00325466061b08062208a2010233a232010233a
2d2cb0032547b003254760b0052547b0806361b00225b00625496323b005
254ab080632058621b2159b0042646608a468a4660b02063612d2cb00426
b00425b00425b00426b06e2b208a2010233a232010233a2d2c2320b00154
5821b00225b1024e2bb0805020605920606020b001515821211b20b00551
5821206661b0402361b100032550b00325b00325505a5820b00325618a53
5821b000591b21591bb00754582066616523211b2121b000595959b1024e
2b2d2cb00225b004254ab0005358b0001b8a8a238ab00159b00425462066
6120b00526b0062649b00526b00526b0702b236165b02060206661b02061
652d2cb0022546208a20b000505821b1024e2b1b452321596165b0022510
3b2d2cb0042620b802006220b80200638a236120b05d602bb00525118a12
8a20398a58ba005d10000004266356602b23212010204620b1024e2b2361
1b2321208a201049b1024e2b593b2d2cba005d10000009256356602bb005
25b00525b00526b06d2bb15d0725602bb00525b00525b00525b00525b06f
2bba005d10000008266356602b20b0005258b0502bb00525b00525b00725
b00725b00525b0712bb0021738b00052b00225b001525a58b00425b00625
49b00325b00525496020b0405258211bb000525820b0025458b00425b004
25b00725b0072549b00217381bb00425b00425b00425b0062549b0021738
595959595921212121212d2cb12501885058b94000020063b8040088545c
b0124b525b1bb001592d000100000007000082f633d95f0f3cf5001b0800
00000000aec0ba1c00000000d6876843fb34fca60ed10846000000090002
000000000000000100000801fe5900000f17fb34fa7a0ed1000100000000
0000000000000000000000d70800010000000000028000000000000002a8
00e403360072000000000000000000000000000000000000000000000000
000000000000000000000000026c004a000000000000000000000000045e
0053045e00e2045e006d045e006100000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000004ce0042000000000000000000000000
000000000000000000000000000000000000000000000000062a00970000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000433003a046c008800000000046c003b
0000000000000000000000000000000001d4007f000000000000000001d4
008c06b800880476008804580039000000000000000002e2008803920043
0000000004760080000000000000000003f6000a00000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000001d4008c0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000001f001f001f001f006e00a100a1
00a100a100a100a100a100a100a100a100d400d400d400d401b0022702b8
039d039d039d039d039d039d039d039d039d039d039d039d039d039d039d
039d04780478047804780478047804780478047804780559055905590559
055905590559055905590559055905590559055905590559055905590559
055906b807d407d408e708e708e708e708e709ec09ec09ec0a910c200d25
0e340e340e340ede104d104d115411541154122012201220122012201220
122012201220122012201220122012201220122012201220122012201220
122012201220122012201220122012201220122012201220122012201220
122012201220122012201220122012201220122012201220122012201220
122012201220122012201220122012201220122012201220122012201220
122012201220122012201220122012201220122012201220122012201220
122012201220122012201220122012201220122012201220122012201220
122012201220122012201220122012201220122012201220122012201220
12201220122012201220122012201220122012201220126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a126a126a126a126a126a126a126a126a126a126a126a
126a126a126a126a00010000116300410002000000000002001000400086
000003eb101c000000000000002501c20003000104030002000c00000003
000104050002001000100003000104060002000c00200003000104070002
0010002c00030001040800020010003c00030001040900000216004c0003
000104090001000c02620003000104090002000e02f80003000104090003
003002d60003000104090004000c02620003000104090005001803060003
000104090006000c02620003000104090007007402620003000104090008
002a005a0003000104090009001c031e000300010409000b0046033a0003
00010409000d0e18038000030001040a0002000c000000030001040b0002
0010119800030001040c0002000c000000030001040e0002000c11a80003
000104100002000e11b80003000104130002001211c60003000104140002
000c00000003000104150002001000000003000104160002000c00000003
000104190002000e11d800030001041b0002001011a800030001041d0002
000c000000030001041f0002000c00000003000104240002000e11e60003
0001042a0002000e11f400030001042d0002000e120200030001080a0002
000c00000003000108160002000c0000000300010c0a0002000c00000003
00010c0c0002000c0000004e006f0072006d0061006c006e0079006f0062
0079010d0065006a006e00e9006e006f0072006d0061006c005300740061
006e0064006100720064039a03b103bd03bf03bd03b903ba03ac00a90020
00320030003100380020004d006900630072006f0073006f006600740020
0043006f00720070006f0072006100740069006f006e002e00200041006c
006c00200072006900670068007400730020007200650073006500720076
00650064002e000d000a000d000a0048006500620072006500770020004f
00700065006e00540079007000650020004c00610079006f007500740020
006c006f00670069006300200063006f0070007900720069006700680074
002000a9002000320030003000330020002600200032003000300037002c
002000520061006c00700068002000480061006e0063006f0063006b0020
00260020004a006f0068006e00200048007500640073006f006e002e0020
00540068006900730020006c00610079006f007500740020006c006f0067
0069006300200066006f00720020004200690062006c006900630061006c
00200048006500620072006500770020006900730020006f00700065006e
00200073006f007500720063006500200073006f00660074007700610072
006500200075006e00640065007200200074006800650020004d00490054
0020004c006900630065006e00730065003b002000730065006500200065
006d0062006500640064006500640020006c006900630065006e00730065
0020006400650073006300720069007000740069006f006e00200066006f
0072002000640065007400610069006c0073002e005400610068006f006d
006100200069007300200061002000740072006100640065006d00610072
006b0020006f006600200074006800650020004d006900630072006f0073
006f00660074002000670072006f007500700020006f006600200063006f
006d00700061006e006900650073002e004d006900630072006f0073006f
006600740020005400610068006f006d006100200052006500670075006c
0061007200560065007200730069006f006e00200037002e00300030004d
006100740074006800650077002000430061007200740065007200680074
00740070003a002f002f007700770077002e006d006900630072006f0073
006f00660074002e0063006f006d002f007400790070006f006700720061
007000680079004d006900630072006f0073006f00660074002000730075
00700070006c00690065006400200066006f006e0074002e00200059006f
00750020006d006100790020007500730065002000740068006900730020
0066006f006e007400200074006f0020006300720065006100740065002c
00200064006900730070006c00610079002c00200061006e006400200070
00720069006e007400200063006f006e00740065006e0074002000610073
0020007000650072006d0069007400740065006400200062007900200074
006800650020006c006900630065006e007300650020007400650072006d
00730020006f00720020007400650072006d00730020006f006600200075
00730065002c0020006f006600200074006800650020004d006900630072
006f0073006f00660074002000700072006f0064007500630074002c0020
0073006500720076006900630065002c0020006f007200200063006f006e
00740065006e007400200069006e00200077006800690063006800200074
00680069007300200066006f006e0074002000770061007300200069006e
0063006c0075006400650064002e00200059006f00750020006d00610079
0020006f006e006c0079002000280069002900200065006d006200650064
0020007400680069007300200066006f006e007400200069006e00200063
006f006e00740065006e00740020006100730020007000650072006d0069
0074007400650064002000620079002000740068006500200065006d0062
0065006400640069006e0067002000720065007300740072006900630074
0069006f006e007300200069006e0063006c007500640065006400200069
006e0020007400680069007300200066006f006e0074003b00200061006e
006400200028006900690029002000740065006d0070006f007200610072
0069006c007900200064006f0077006e006c006f00610064002000740068
0069007300200066006f006e007400200074006f00200061002000700072
0069006e0074006500720020006f00720020006f00740068006500720020
006f00750074007000750074002000640065007600690063006500200074
006f002000680065006c00700020007000720069006e007400200063006f
006e00740065006e0074002e00200041006e00790020006f007400680065
00720020007500730065002000690073002000700072006f006800690062
0069007400650064002e000d000a000d000a00540068006500200066006f
006c006c006f00770069006e00670020006c006900630065006e00730065
002c0020006200610073006500640020006f006e00200074006800650020
004d004900540020006c006900630065006e007300650020002800680074
00740070003a002f002f0065006e002e00770069006b0069007000650064
00690061002e006f00720067002f00770069006b0069002f004d00490054
005f004c006900630065006e007300650029002c0020006100700070006c
00690065007300200074006f00200074006800650020004f00700065006e
00540079007000650020004c00610079006f007500740020006c006f0067
0069006300200066006f00720020004200690062006c006900630061006c
00200048006500620072006500770020201c004c00610079006f00750074
0020004c006f006700690063201d0020006100730020006a006f0069006e
0074006c007900200064006500760065006c006f00700065006400200062
0079002000520061006c00700068002000480061006e0063006f0063006b
00200061006e00640020004a006f0068006e00200048007500640073006f
006e002e0020000d000a000d000a005000650072006d0069007300730069
006f006e0020006900730020006800650072006500620079002000670072
0061006e007400650064002c002000660072006500650020006f00660020
006300680061007200670065002c00200074006f00200061006e00790020
0070006500720073006f006e0020006f0062007400610069006e0069006e
00670020006100200063006f007000790020006f00660020007400680065
0020004f00700065006e00540079007000650020004c00610079006f0075
00740020006c006f00670069006300200066006f00720020004200690062
006c006900630061006c002000480065006200720065007700200061006e
00640020006100730073006f00630069006100740065006400200064006f
00630075006d0065006e0074006100740069006f006e002000660069006c
00650073002000280074006800650020201c004c00610079006f00750074
0020004c006f00670069006300200053006f006600740077006100720065
201d0029002c00200074006f0020006400650061006c00200069006e0020
0074006800650020004c00610079006f007500740020004c006f00670069
006300200053006f00660074007700610072006500200077006900740068
006f007500740020007200650073007400720069006300740069006f006e
002c00200069006e0063006c007500640069006e00670020007700690074
0068006f007500740020006c0069006d00690074006100740069006f006e
0020007400680065002000720069006700680074007300200074006f0020
007500730065002c00200063006f00700079002c0020006d006f00640069
00660079002c0020006d0065007200670065002c0020007000750062006c
006900730068002c00200064006900730074007200690062007500740065
002c0020007300750062006c006900630065006e00730065002c00200061
006e0064002f006f0072002000730065006c006c00200063006f00700069
006500730020006f006600200074006800650020004c00610079006f0075
00740020004c006f00670069006300200053006f00660074007700610072
0065002c00200061006e006400200074006f0020007000650072006d0069
007400200070006500720073006f006e007300200074006f002000770068
006f006d00200074006800650020004c00610079006f007500740020004c
006f00670069006300200053006f00660074007700610072006500200069
00730020006600750072006e0069007300680065006400200074006f0020
0064006f00200073006f002c0020007300750062006a0065006300740020
0074006f002000740068006500200066006f006c006c006f00770069006e
006700200063006f006e0064006900740069006f006e0073003a000d000a
000d000a005400680065002000610062006f0076006500200063006f0070
0079007200690067006800740020006e006f007400690063006500200061
006e0064002000740068006900730020007000650072006d006900730073
0069006f006e0020006e006f00740069006300650020007300680061006c
006c00200062006500200069006e0063006c007500640065006400200069
006e00200061006c006c00200063006f00700069006500730020006f0072
0020007300750062007300740061006e007400690061006c00200070006f
007200740069006f006e00730020006f006600200074006800650020004c
00610079006f007500740020004c006f00670069006300200053006f0066
00740077006100720065002e000d000a000d000a00540048004500200053
004f004600540057004100520045002000490053002000500052004f0056
004900440045004400200027004100530020004900530027002c00200057
004900540048004f00550054002000570041005200520041004e00540059
0020004f004600200041004e00590020004b0049004e0044002c00200045
0058005000520045005300530020004f005200200049004d0050004c0049
00450044002c00200049004e0043004c005500440049004e004700200042
005500540020004e004f00540020004c0049004d00490054004500440020
0054004f0020005400480045002000570041005200520041004e00540049
004500530020004f00460020004d00450052004300480041004e00540041
00420049004c004900540059002c0020004600490054004e004500530053
00200046004f00520020004100200050004100520054004900430055004c
0041005200200050005500520050004f0053004500200041004e00440020
004e004f004e0049004e004600520049004e00470045004d0045004e0054
002e00200049004e0020004e004f0020004500560045004e005400200053
00480041004c004c002000540048004500200041005500540048004f0052
00530020004f005200200043004f00500059005200490047004800540020
0048004f004c00440045005200530020004200450020004c004900410042
004c004500200046004f005200200041004e005900200043004c00410049
004d002c002000440041004d00410047004500530020004f00520020004f
00540048004500520020004c0049004100420049004c004900540059002c
0020005700480045005400480045005200200049004e00200041004e0020
0041004300540049004f004e0020004f004600200043004f004e00540052
004100430054002c00200054004f005200540020004f00520020004f0054
0048004500520057004900530045002c002000410052004900530049004e
0047002000460052004f004d002c0020004f005500540020004f00460020
004f005200200049004e00200043004f004e004e0045004300540049004f
004e00200057004900540048002000540048004500200053004f00460054
00570041005200450020004f005200200054004800450020005500530045
0020004f00520020004f00540048004500520020004400450041004c0049
004e0047005300200049004e002000540048004500200053004f00460054
0057004100520045002e000d000a004e006f0072006d00610061006c0069
004e006f0072006d00e1006c006e0065004e006f0072006d0061006c0065
005300740061006e00640061006100720064041e0431044b0447043d044b
0439004e0061007600610064006e006f0074006801b001a10300006e0067
0041007200720075006e007400610000b154004112017d00010010017d00
40017d0090017d0003003f0175005f0175005f017600030040016fb3282d
3640b8016fb2171b36b80171b3033a2190411a0171000100300171005001
7100700171009f017100bf017100df01710006000f0171003f0171005f01
71007f01710004ffc00153b21c1d36b9ffc00163b2121336b9ffc0014eb2
333436b9ffc0014eb2242636b8014eb33c161f0fbd015b00ef015b000200
40015ab3191a3640b8015ab315153640b8015ab2101036b9ffc00159b309
0a3640b80170b3282d3640b80170b2171b36b9ffc0015db2151b36b9ffc0
0162b2141536b9ffc00162b21c1d36b9ffc00152b21c1d36b9ffc00167b2
2f3636b9ffc00167b20e2636b9ffc00166b2090d36b9ffc00161b2090d36
b9ffc00165b2333636b9ffc00165b2282a36b9ffc00165b21d2036b80165
b21a191fb9ffc00161b24f5136b9ffc00161b23e3f36b9ffc00161b2191d
36b9ffc00161b313153640b80161b30b0d3640b8015fb2283236b9ffc001
4fb2565a36b9ffc0014fb3393b36304116014f0040014f0050014f000300
70014f0080014f00020000016400100164000200d0016400e00164000201
64b270641fb9ffc00146b2131436b9ffc00146b2161636b9ffc00146b209
0a36b9ffc00142b2111336b9ffc40142b20a0e36b9ffc0013eb2171836b9
ffc0013db20b1836b90130012f400b321fe7e8641fe8d2301f20bc013900
30013900020139b203181f410a013b01320010001f01370132000d001f01
350132b2141f2f410c0132000101360133000e001f013401330014001f01
310133b2101f40ba013800900138404e020fe32fe302b0d901a0d90190d9
01d0d901c0d901b0d901b0d301a0d30190d301d0d301c0d301b0d301d1d7
3f1fd6d71a1f80d501d5d71a1f1fd70170d701cac92a1fcac93938ca010b
c844c802b8ffc0b6dc0911364fd201b8ffc0401fb229323610b220b240b2
50b270b280b2a0b2b0b2d0b2e0b20ac0b2f0b20285b8ffeeb3b4254836b8
ffe0b3b4102336b8ffee400eb4090f36b41a481fd06e01e07101b8ffc040
0998090a364071091136b8ffc1400970121536406f131536b8ffc0401a6e
0912367099014067090f3670668066a066b06604af65bf6502b8ffc0402a
640911366f937f93026f9001708e017f8c9f8c0280a00100625062c06203
4061706102105b205b905b03b8017440b914321f6814481fb314481f2d14
111f2c14251f2b14391f2a14131fdf28ef2802cf28df28ef28032814101f
9e20431f1f141e1f2120431f20143c1f9f1a521f1a1b471f1b1a3c1f1a14
321f1514391f1314411f12141a1f11141a1f70140140144143360006010f
01010f012f013f016f017f01af01bf01cf01ef01ff010a0f00010f002f00
3f006f007f00af00bf00cf00ef00ff000a0a09371f0f020f0302cf02cf03
ff02ff03040c0d390504390302390100390350500501b801ff01b0124b00
4b5442b013014b004b5342b116322b4bb0645242858d8d1d42b0964b5258
b20380801d4259b808004b5458b001b0018e59b0084b5358b001b0018e59
002b2b2b2b73742b73747374b00345b006456861b006234473b00345b00e
456861b00e2344b00e45b00f456861b00f234401b0144568b01423442b73
2b2b2b2b2b2b2b2b2b2b2b2b2b73742b2b2b2b2b2b2b7373737373737373
2b73732b732b2b2b2b2b73742b2b2b2b002b58b8ffc04044b51718361f44
010f561f56024f555f550238bf2a1f6fbf019fbfafbf0237b9151f2fbb01
bcbe171fbdbe161fbebd151fbab9521fb6b9291fb7b9321fb8b9321fb935
391fb80173403a3f321f3c3f321f3d3f3d1f3e3f211f433f1d1f423f521f
413f521f403f521f3f35321f3233641f3335341f3534541f34351e1fd034
e034f03403752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b742b73
742b7373742b1b400c02033b1f04053b1f0a083b1f2b2b2b5973742b0174
2b0073732b2b73742b732b2b73737374747473737374747473732b2b2b73
2b2b2b2b732b2b2b2b2b2b2b2b2b2b2b737474752b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73002b2b2b2b2bb801714568b801
7123447374752b2b2b7373742b0000>
[9429 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 864 20 <000100e2000003b805d6000c00bcb0852b58401a05b6060609030b03b801
082f0001af000100050100090b020d0db80140b4560b0c0c0cb80140b456
0b0c0b0bb801404010560b080c0c023b0b2001200380030203b8ffeeb40d
0d023b03b8fffe400b0c0c023b030c0b0b023b03b8fff4b40c0c063b03b8
fff4400e0d0d063b030c0b0b063b03030e0d1112392f2b2b2b2b2b2b5d33
ed2b2b2b2b39322f332f5d71003ffd3c3f332fed31301b400f0605b66c06
0609030b0103b86c010800183f2bc43f332f2b3031592121352111213532
363733112103b8fd2a010efef29991099b01089803e6885779fac200>HAAAAA+Tahoma AddT42Char 
1 0 0 <00020100000007000600000300070014b706020400060204002fcdddcd00
2fcdddcd3130211121112521112101000600fa800500fb000600fa008005
0000>HAAAAA+Tahoma AddT42Char 
HAAAAA+Tahoma /CharStrings get begin
/one 20 def
end
HAAAAA+Tahoma /Encoding get
dup 49 /one put
pop
end
%ADOEndSubsetFont
/SFCUQX+Tahoma /HAAAAA+Tahoma findfont ct_VMDictPut
/SFCUQX+Tahoma*1 
[49{/.notdef}rp /one 206{/.notdef}rp]
SFCUQX+Tahoma nf
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
152.5 152.45 mo
(1)sh
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQX+Tahoma gcheck setglobal} if
1 322 15 <0001004afe8e01f4011d00030048b0852b5840252a012b02350039024500
480255005902640074000a02020356042f050100000a021a0202022f5d33
2f5d0010f4322f3130015d1bb302020304001810c6322f30315901012313
01f4fee892b0011dfd71028f>SFCUQX+Tahoma AddT42Char 
SFCUQX+Tahoma /CharStrings get begin
/comma 15 def
end
SFCUQX+Tahoma /Encoding get
dup 44 /comma put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQX+Tahoma*1 
[44{/.notdef}rp /comma 4{/.notdef}rp /one 206{/.notdef}rp]
SFCUQX+Tahoma nf
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
161.17 152.45 mo
(,)sh
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQX+Tahoma gcheck setglobal} if
1 1102 21 <0001006d0000040405f0002600a9b0852b5840331a2225172b1f2b213c05
361739234c054617492354175a215b226517601b7417771b7b207f221314
140eba19020225ba010825b8ffc0b50b1037262608bbfff4000b000b0140
401b5608213f1c4f1c021c1a0c0c023b1c1625161c032f0201c0020102b8
ffc0b30a0d37022f2b5d7117332f2f2b5ded2b332f2b003ffd323fed332f
31305d1b400f1414190eba6c1902020125ba6c010800183f2b323f2b332f
303159212135363637363635342627262623220607060607233536363332
1615140607060607060607210404fc6963b054aa7c2722235c37356d322a
4e180b3edd63d0ec292425683a5ee74502dcd15eac5dbbe1783e5e1f1e1e
1b14113011d41f3bddbd57943f41803e66dc4000>SFCUQX+Tahoma AddT42Char 
SFCUQX+Tahoma /CharStrings get begin
/two 21 def
end
SFCUQX+Tahoma /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQX+Tahoma*1 
[44{/.notdef}rp /comma 4{/.notdef}rp /one /two 205{/.notdef}rp]
SFCUQX+Tahoma nf
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
166 152.45 mo
(2)sh
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQX+Tahoma gcheck setglobal} if
1 2738 68 <0002003affe103b30478000c00360217b0852b58b10602435458b9000cff
eab40d0d063b00b8ffea400c0d0d063b00010d0a131f3d01b8ffc0401d0c
0c063b100101000101010113263f2e040a41133608130a35361f0036b8ff
f4400b0c0c063b360c0f0f063b36b8ffe040220b0b063b3636383707190c
1010063b190c0f0f063b190c0c0c063b19160d0d063b19b8ffdcb70b0b06
3b191938371112392f2b2b2b2b2bcd1112392f2b2b2bd0c010cd003f3f10
ed3fed12392f5d5d2bed11123911393130002b2b1bb638400c0c023b0cb8
ffeab40d0d023b0db8ffeab40d0d023b00b8ffeab40d0d023b2cb8fff0b3
1619372eb8fff0b3090a372bb8ffc0b50e1137013d1fb8ffc0401c0c0d37
1f1f132e4f2a012a2a263f2e04000e1336080a41130a1f0036b8fff8b40c
0c023b36410afff4000b000b014000560036fffa000d000d0140402d5636
1a351a0f0f023b351a0c0c023b35060d0d023b356f3819100e1037191009
0b372b40090b372b2b070c0b0bb80140b45607020d0db80140401f56071b
19160f0f023b19200b0b023b191a0c0c023b19120d0d023b19160c0cb801
40b45619160d0db80140b45619160b0bb80140b35619703710f42b2b2b2b
2b2b2bed2b2b332f2b2b2b10f62b2b2bfd2b2b2b3c3c003fed3f1133333f
ed332f5d1112392f2bed2b2b31302b2b2b2b012b591b401b1f013d6c1f1f
132e2a2a2e263f6c2e04000e133608130a416c130a00183f2b3f1133333f
2b332f1112392f2b30315901110606070606151416333236170606070606
232226272626353436373624373534262726262322060723353636333216
17161615112302f843cd3f4b626c6859903f174d24325d54457c2f2d3662
6a5e010094282424683741b0580b34c25f739e3f3d3cbb01130136061513
175f5560624d64113d121a1c342f2e874b74a3302b210824425116170f27
25bf0f24242f2e9269fd0400>SFCUQX+Tahoma AddT42Char 
SFCUQX+Tahoma /CharStrings get begin
/a 68 def
end
SFCUQX+Tahoma /Encoding get
dup 97 /a put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQX+Tahoma*1 
[44{/.notdef}rp /comma 4{/.notdef}rp /one /two 46{/.notdef}rp /a 158{/.notdef}rp]
SFCUQX+Tahoma nf
SFCUQX+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
29.925 89.4 mo
(a)sh
SFCUQX+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
139.02 89.4 mo
(a)sh
SFCUQX+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
193.75 89.4 mo
(a)sh
SFCUQX+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
193.75 143.85 mo
(a)sh
SFCUQX+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
139.02 143.85 mo
(a)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
97.15 137.05 mo
(1)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
105.82 137.05 mo
(,)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
110.65 137.05 mo
(1)sh
SFCUQX+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
82.95 128.45 mo
(a)sh
SFCUQX+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
30.025 143.85 mo
(a)sh
SFCUQX+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
30.025 198.25 mo
(a)sh
SFCUQX+Tahoma*1 [16 0 0 -16 0 0 ]msf
95.525 207.77 mo
(2)sh
SFCUQX+Tahoma*1 [16 0 0 -16 0 0 ]msf
104.2 207.77 mo
(,)sh
SFCUQX+Tahoma*1 [16 0 0 -16 0 0 ]msf
109.02 207.77 mo
(1)sh
SFCUQX+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
82.075 199.32 mo
(a)sh
SFCUQX+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
139.02 198.15 mo
(a)sh
SFCUQX+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
193.43 198.15 mo
(a)sh
SFCUQX+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
193.43 252.85 mo
(a)sh
SFCUQX+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
138.88 252.9 mo
(a)sh
SFCUQX+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
30.2 252.9 mo
(a)sh
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQX+Tahoma gcheck setglobal} if
1 424 19 <00020053ffe1040b05ef000b0023013fb0852b58401534013b0b45014a0b
7a11053a1535214a1545210409b8fff040130e0f003b03100e0f003b15b9
090221b9030a0fbbfff4000b000b01404009560f2110007f000200b8ffd4
b40d0d023b00b8fff0b40c0c023b00b8ffd6b40b0b023b00b8ffe0b40c0c
063b00b8ffe0b40d0d063b00b8fffcb40b0b063b004110ffe8000d000d01
4000560000ffee000c000c014000560000ffe8000b000b0140b65600001b
0c0b0bb80140400c561b21a006c00602060c0d0db80140b456060c0c0cb8
0140b456060c0b0bb8014040205606100d0d023b06100c0c023b06160b0b
023b060c0d0d063b060c0c0c063b06b8ffe2b40b0b063b06b8ffc0b30d11
37062f2b2b2b2b2b2b2b2b2b2b5ded2b332f2b2b2b2b2b2b2b2b2b5ded2b
003fed3fed2b2b5d31305d1b400c0915b96c09020321b96c030a00183f2b
3f2b30315901100223220211101233321201363635342627262623220607
0606151416171616333236040be9f3f6e6e9f3f6e6ff001d18181e1e6954
536b1f1e1613201d6b56536b02e9fe6ffe89017e018801930175fe7efcb6
4ae29a99e24b4c4f4f4e4ce8929cd2534d534f00>SFCUQX+Tahoma AddT42Char 
SFCUQX+Tahoma /CharStrings get begin
/zero 19 def
end
SFCUQX+Tahoma /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQX+Tahoma*1 
[44{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two 46{/.notdef}rp /a 
158{/.notdef}rp]
SFCUQX+Tahoma nf
SFCUQX+Tahoma*1 [16 0 0 -16 0 0 ]msf
43.2 97.8 mo
(0)sh
SFCUQX+Tahoma*1 [16 0 0 -16 0 0 ]msf
51.875 97.8 mo
(,)sh
SFCUQX+Tahoma*1 [16 0 0 -16 0 0 ]msf
56.7 97.8 mo
(0)sh
SFCUQX+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
82.175 58.02 mo
(a)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
95.9 66.4 mo
(0)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
104.58 66.4 mo
(,)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
109.4 66.4 mo
(1)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
152.83 97.8 mo
(0)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
161.5 97.8 mo
(,)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
166.33 97.8 mo
(2)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
207.3 97.8 mo
(0)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
216 97.8 mo
(,)sh
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQX+Tahoma gcheck setglobal} if
1 1392 22 <00010061ffe103ea05f00040010fb0852b58405b160e2609291529233609
32123a23342d353a450944124a23442d443a55095a165a23552c5c31533a
6309600e630f641969237509700e710f79231d15143635b9603801383821
0b070700ba0b02252529ba210a363b080d0d063b3bbbfff4000b000b0140
400a563b211136141103242fbbfff4000b000b0140400f562f213f1b801b
021b160c0c023b1bb8fff4b40b0b023b1bb8fff8400c0d0d063b1b081b08
60240124b8ffc0b30b0d37242f2b5d33332f2f2b2b2b5ded2b1217392fed
2b2b2f003fed332f3fed332f1112392f5ded12393931305d1b401b151436
3835b96c3838210b07070b00ba6c0b0225252129ba6c210a00183f2b332f
3f2b332f1112392f2b123939303159012206070606072335363633321617
161615140607151616171616151406070606232226273533161633323637
363635342627262623233533323635342627262601ff366c3430471c0c41
df6565973d4243a2712f6b2e2e3a453f41b87570dc4b0e3fd46a3d7b2928
2a2f2a2a7343554287a92c22265c05431a15142c13d32339292b30885b7b
ba190e092c2b2b876165a94144463626d32e54272c2c6a5151681e1e17a6
807a3851181a1400>SFCUQX+Tahoma AddT42Char 
SFCUQX+Tahoma /CharStrings get begin
/three 22 def
end
SFCUQX+Tahoma /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQX+Tahoma*1 
[44{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two /three 45{/.notdef}rp 
/a 158{/.notdef}rp]
SFCUQX+Tahoma nf
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
220.8 97.8 mo
(3)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
43.7 152.62 mo
(1)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
52.375 152.62 mo
(,)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
57.175 152.62 mo
(0)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
207.3 152.45 mo
(1)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
216 152.45 mo
(,)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
220.8 152.45 mo
(3)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
43.4 206.62 mo
(2)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
52.075 206.62 mo
(,)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
56.875 206.62 mo
(0)sh
SFCUQX+Tahoma*1 [16 0 0 -16 0 0 ]msf
152.3 206.73 mo
(2)sh
SFCUQX+Tahoma*1 [16 0 0 -16 0 0 ]msf
160.97 206.73 mo
(,)sh
SFCUQX+Tahoma*1 [16 0 0 -16 0 0 ]msf
165.78 206.73 mo
(2)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
207 206.75 mo
(2)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
215.67 206.75 mo
(,)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
220.5 206.75 mo
(3)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
43.45 261.025 mo
(3)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
52.125 261.025 mo
(,)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
56.95 261.025 mo
(0)sh
SFCUQX+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
82.675 272.45 mo
(a)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
96.375 280.675 mo
(3)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
105.05 280.675 mo
(,)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
109.85 280.675 mo
(1)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
152.4 261.125 mo
(3)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
161.08 261.125 mo
(,)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
165.9 261.125 mo
(2)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
207.1 260.9 mo
(3)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
215.78 260.9 mo
(,)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
220.58 260.9 mo
(3)sh
399.81 111.67 mo
454.074 111.67 li
454.074 57.406 li
399.81 57.406 li
cp
.101015 0 .000732433 0 cmyk
ef
399.81 111.67 mo
454.074 111.67 li
454.074 57.406 li
399.81 57.406 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
399.81 165.91 mo
454.074 165.91 li
454.074 111.646 li
399.81 111.646 li
cp
.101015 0 .000732433 0 cmyk
ef
399.81 165.91 mo
454.074 165.91 li
454.074 111.646 li
399.81 111.646 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
399.78 220.2 mo
454.044 220.2 li
454.044 165.936 li
399.78 165.936 li
cp
.101015 0 .000732433 0 cmyk
ef
399.78 220.2 mo
454.044 220.2 li
454.044 165.936 li
399.78 165.936 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
399.78 274.439 mo
454.044 274.439 li
454.044 220.175 li
399.78 220.175 li
cp
.101015 0 .000732433 0 cmyk
ef
399.78 274.439 mo
454.044 274.439 li
454.044 220.175 li
399.78 220.175 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
454.04 111.6 mo
508.304 111.6 li
508.304 57.336 li
454.04 57.336 li
cp
.101015 0 .000732433 0 cmyk
ef
454.04 111.6 mo
508.304 111.6 li
508.304 57.336 li
454.04 57.336 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
454.04 165.84 mo
508.304 165.84 li
508.304 111.576 li
454.04 111.576 li
cp
.101015 0 .000732433 0 cmyk
ef
454.04 165.84 mo
508.304 165.84 li
508.304 111.576 li
454.04 111.576 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
454 220.13 mo
508.264 220.13 li
508.264 165.866 li
454 165.866 li
cp
.101015 0 .000732433 0 cmyk
ef
454 220.13 mo
508.264 220.13 li
508.264 165.866 li
454 165.866 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
454 274.372 mo
508.264 274.372 li
508.264 220.108 li
454 220.108 li
cp
.101015 0 .000732433 0 cmyk
ef
454 274.372 mo
508.264 274.372 li
508.264 220.108 li
454 220.108 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
508.29 111.6 mo
562.554 111.6 li
562.554 57.336 li
508.29 57.336 li
cp
.101015 0 .000732433 0 cmyk
ef
508.29 111.6 mo
562.554 111.6 li
562.554 57.336 li
508.29 57.336 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
508.29 165.84 mo
562.554 165.84 li
562.554 111.576 li
508.29 111.576 li
cp
.101015 0 .000732433 0 cmyk
ef
508.29 165.84 mo
562.554 165.84 li
562.554 111.576 li
508.29 111.576 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
508.26 220.13 mo
562.524 220.13 li
562.524 165.866 li
508.26 165.866 li
cp
.101015 0 .000732433 0 cmyk
ef
508.26 220.13 mo
562.524 220.13 li
562.524 165.866 li
508.26 165.866 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
508.26 274.375 mo
562.524 274.375 li
562.524 220.111 li
508.26 220.111 li
cp
.101015 0 .000732433 0 cmyk
ef
508.26 274.375 mo
562.524 274.375 li
562.524 220.111 li
508.26 220.111 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
446.14 90.59 mo
516.41 90.59 li
516.41 20.32 li
446.14 20.32 li
cp
0 .167056 .528618 0 cmyk
ef
2.3216 lw
446.14 90.59 mo
516.41 90.59 li
516.41 20.32 li
446.14 20.32 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
450.8 91.31 mo
450.8 96.59 li
523.54 96.66 li
523.41 23.96 li
517.51 23.96 li
517.32 91.6 li
450.8 91.31 li
cp
ef
.63722 lw
1 lc
1 lj
450.8 91.31 mo
450.8 96.59 li
523.54 96.66 li
523.41 23.96 li
517.51 23.96 li
517.32 91.6 li
450.8 91.31 li
cp
@
446.08 160.99 mo
516.35 160.99 li
516.35 90.72 li
446.08 90.72 li
cp
0 .167056 .528618 0 cmyk
ef
2.3216 lw
0 lc
0 lj
446.08 160.99 mo
516.35 160.99 li
516.35 90.72 li
446.08 90.72 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
450.75 161.71 mo
450.75 166.99 li
523.48 167.06 li
523.36 94.36 li
517.46 94.36 li
517.27 162 li
450.75 161.71 li
cp
ef
.63722 lw
1 lc
1 lj
450.75 161.71 mo
450.75 166.99 li
523.48 167.06 li
523.36 94.36 li
517.46 94.36 li
517.27 162 li
450.75 161.71 li
cp
@
446.15 231.31 mo
516.42 231.31 li
516.42 161.04 li
446.15 161.04 li
cp
0 .167056 .528618 0 cmyk
ef
2.3216 lw
0 lc
0 lj
446.15 231.31 mo
516.42 231.31 li
516.42 161.04 li
446.15 161.04 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
450.81 232.02 mo
450.81 237.31 li
523.55 237.37 li
523.42 164.67 li
517.52 164.67 li
517.34 232.32 li
450.81 232.02 li
cp
ef
.63722 lw
1 lc
1 lj
450.81 232.02 mo
450.81 237.31 li
523.55 237.37 li
523.42 164.67 li
517.52 164.67 li
517.34 232.32 li
450.81 232.02 li
cp
@
446.25 301.6 mo
516.52 301.6 li
516.52 231.33 li
446.25 231.33 li
cp
0 .167056 .528618 0 cmyk
ef
2.3216 lw
0 lc
0 lj
446.25 301.6 mo
516.52 301.6 li
516.52 231.33 li
446.25 231.33 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
450.91 302.314 mo
450.91 307.602 li
523.65 307.665 li
523.52 234.97 li
517.62 234.97 li
517.43 302.61 li
450.91 302.314 li
cp
ef
.63722 lw
1 lc
1 lj
450.91 302.314 mo
450.91 307.602 li
523.65 307.665 li
523.52 234.97 li
517.62 234.97 li
517.43 302.61 li
450.91 302.314 li
cp
@
562.52 111.53 mo
616.784 111.53 li
616.784 57.266 li
562.52 57.266 li
cp
.101015 0 .000732433 0 cmyk
ef
1.2431 lw
0 lc
0 lj
562.52 111.53 mo
616.784 111.53 li
616.784 57.266 li
562.52 57.266 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
562.52 165.78 mo
616.784 165.78 li
616.784 111.516 li
562.52 111.516 li
cp
.101015 0 .000732433 0 cmyk
ef
562.52 165.78 mo
616.784 165.78 li
616.784 111.516 li
562.52 111.516 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
562.49 220.06 mo
616.754 220.06 li
616.754 165.796 li
562.49 165.796 li
cp
.101015 0 .000732433 0 cmyk
ef
562.49 220.06 mo
616.754 220.06 li
616.754 165.796 li
562.49 165.796 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
562.49 274.308 mo
616.754 274.308 li
616.754 220.044 li
562.49 220.044 li
cp
.101015 0 .000732433 0 cmyk
ef
562.49 274.308 mo
616.754 274.308 li
616.754 220.044 li
562.49 220.044 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQX+Tahoma gcheck setglobal} if
1 3440 69 <00020088ffe104310614000c001d01d3b0852b58b1060243545840120618
03421b041601150807130a40100a000db8fff0b41010063b0db8ffe8b40f
0f063b0db8ffdab40c0c063b0db8fff0b40d0d063b0db8ffd2400b0b0b06
3b0d0d1f1e180713b8fffcb50c0c063b1315b8fff4400b0f0f063b15080d
0d063b15b8ffcab70b0b063b15151f1e1112392f2b2b2bdd2bc0c0111239
2f2b2b2b2b2bcd003fed33333f3f3fed33333130b00b4b5458b9000cfff4
38591b40301f400f0f023b1f400b0b023b3a01330c360e4b01420c450e56
1c661c750709061803421b041601150807130a40100a00410dfffe000d00
0d014000560000fff4000b000c014000560000fff840130c0c023b001b0d
160f0f023b0d160b0b023b0db8fff2b40c0c023b0db8ffd6b40d0d023b0d
4110fff4000b000b01400056000dfff4000c000c01400056000dffea000d
000d0140400a560d711f1807130c0b0cb80140b45613060d0db801404019
5613080c0c023b131a15060b0b023b15020d0d023b15060b0bb80140b456
15080d0db80140b356156e1e10f62b2b2b2bfd2b2b2b3c3c10f42b2b2b2b
2b2b2bed2b2b2b003fed33333f3f3fed333331305d012b2b591b40140618
1b03426c1b04160115080713100a406c100a00183f2b33333f3f3f2b3333
303159013426232206071116163332363710002322262707231133113636
333212036f7a874d9d40476e4290a4c2fef6c85b813f0cb0bc47a669bdda
0232c8cf4837fd80231dccebfeeefeb22d26340614fdd44054fed100>SFCUQX+Tahoma AddT42Char 
SFCUQX+Tahoma /CharStrings get begin
/b 69 def
end
SFCUQX+Tahoma /Encoding get
dup 98 /b put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQX+Tahoma*1 
[44{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two /three 45{/.notdef}rp 
/a /b 157{/.notdef}rp]
SFCUQX+Tahoma nf
SFCUQX+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
519.33 252.2 mo
(b)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
533.33 151.75 mo
(1)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
542 151.75 mo
(,)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
546.83 151.75 mo
(2)sh
SFCUQX+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
410.38 88.7 mo
(b)sh
SFCUQX+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
519.47 88.7 mo
(b)sh
SFCUQX+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
574.22 88.7 mo
(b)sh
SFCUQX+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
574.22 143.15 mo
(b)sh
SFCUQX+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
519.47 143.15 mo
(b)sh
SFCUQX+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
410.5 143.15 mo
(b)sh
256.67 335.858 mo
351.551 335.858 li
351.551 282.239 li
256.67 282.239 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
3 lw
256.67 335.858 mo
351.551 335.858 li
351.551 282.239 li
256.67 282.239 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
306.43 317.215 mo
305.4 317.215 304.46 317.056 303.6 316.737 cv
302.73 316.419 301.99 315.937 301.38 315.291 cv
300.76 314.645 300.28 313.832 299.94 312.85 cv
299.6 311.868 299.43 310.713 299.43 309.386 cv
299.43 308.068 299.6 306.929 299.96 305.969 cv
300.31 305.01 300.78 304.202 301.38 303.548 cv
301.97 302.893 302.71 302.389 303.59 302.034 cv
304.47 301.68 305.42 301.503 306.43 301.503 cv
307.26 301.503 308.05 301.62 308.82 301.853 cv
309.59 302.086 310.27 302.355 310.87 302.66 cv
310.87 305.498 li
310.73 305.498 li
310.55 305.346 310.31 305.171 310.03 304.974 cv
309.75 304.776 309.41 304.575 309 304.368 cv
308.65 304.189 308.24 304.032 307.77 303.897 cv
307.29 303.763 306.83 303.696 306.39 303.696 cv
305.08 303.696 304.03 304.191 303.24 305.182 cv
302.45 306.173 302.05 307.574 302.05 309.386 cv
302.05 311.161 302.43 312.545 303.2 313.536 cv
303.97 314.527 305.03 315.022 306.39 315.022 cv
307.22 315.022 308 314.852 308.75 314.511 cv
309.49 314.17 310.15 313.731 310.73 313.193 cv
310.87 313.193 li
310.87 316.031 li
310.62 316.148 310.31 316.289 309.93 316.455 cv
309.55 316.621 309.21 316.744 308.91 316.825 cv
308.48 316.95 308.09 317.047 307.75 317.114 cv
307.41 317.181 306.97 317.215 306.43 317.215 cv
cp
320.88 322.421 mo
317.8 322.421 li
316.24 320.564 315.01 318.6 314.12 316.529 cv
313.23 314.457 312.78 312.009 312.78 309.184 cv
312.78 306.422 313.22 303.989 314.11 301.886 cv
314.99 299.784 316.22 297.804 317.8 295.948 cv
320.88 295.948 li
320.88 296.082 li
320.15 296.737 319.46 297.492 318.8 298.349 cv
318.14 299.205 317.53 300.203 316.97 301.342 cv
316.43 302.445 315.99 303.66 315.66 304.987 cv
315.32 306.314 315.15 307.713 315.15 309.184 cv
315.15 310.718 315.31 312.121 315.64 313.394 cv
315.97 314.668 316.41 315.878 316.97 317.026 cv
317.5 318.129 318.12 319.127 318.81 320.019 cv
319.5 320.912 320.19 321.667 320.88 322.286 cv
320.88 322.421 li
cp
335.38 316.878 mo
332.27 316.878 li
328.63 311.202 li
324.88 316.878 li
322.01 316.878 li
327.23 309.426 li
322.06 301.853 li
325.17 301.853 li
328.79 307.476 li
332.5 301.853 li
335.38 301.853 li
330.19 309.251 li
335.38 316.878 li
cp
344.64 309.184 mo
344.64 311.955 344.19 314.39 343.31 316.488 cv
342.42 318.587 341.19 320.564 339.62 322.421 cv
336.54 322.421 li
336.54 322.286 li
337.23 321.667 337.92 320.907 338.62 320.006 cv
339.32 319.105 339.93 318.111 340.45 317.026 cv
341.01 315.87 341.45 314.648 341.78 313.361 cv
342.11 312.074 342.27 310.682 342.27 309.184 cv
342.27 307.704 342.1 306.305 341.77 304.987 cv
341.44 303.669 341 302.454 340.45 301.342 cv
339.91 300.23 339.29 299.23 338.6 298.342 cv
337.91 297.454 337.22 296.701 336.54 296.082 cv
336.54 295.948 li
339.62 295.948 li
341.18 297.804 342.41 299.777 343.3 301.866 cv
344.19 303.956 344.64 306.395 344.64 309.184 cv
cp
ef
SFCUQX+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
410.5 197.55 mo
(b)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
478.13 207.85 mo
(2)sh
486.8 207.85 mo
(,)sh
491.63 207.85 mo
(1)sh
SFCUQX+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
464.33 199.4 mo
(b)sh
519.47 197.45 mo
(b)sh
573.9 197.45 mo
(b)sh
573.9 252.15 mo
(b)sh
SFCUQX+Tahoma*1 [26.55 0 0 -26.55 0 0 ]msf
410.65 252.2 mo
(b)sh
SFCUQX+Tahoma*1 [16 0 0 -16 0 0 ]msf
424.05 97.1 mo
(0)sh
432.73 97.1 mo
(,)sh
437.52 97.1 mo
(0)sh
SFCUQX+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
464.33 57.73 mo
(b)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
478.42 66.1 mo
(0)sh
487.13 66.1 mo
(,)sh
491.92 66.1 mo
(1)sh
533.65 97.1 mo
(0)sh
542.33 97.1 mo
(,)sh
547.15 97.1 mo
(2)sh
588.15 97.1 mo
(0)sh
596.83 97.1 mo
(,)sh
601.63 97.1 mo
(3)sh
424.52 151.92 mo
(1)sh
433.2 151.92 mo
(,)sh
438.02 151.92 mo
(0)sh
SFCUQX+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
465.33 128.28 mo
(b)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
479.93 136.85 mo
(1)sh
488.6 136.85 mo
(,)sh
493.4 136.85 mo
(1)sh
588.15 151.75 mo
(1)sh
596.83 151.75 mo
(,)sh
601.63 151.75 mo
(3)sh
424.23 205.92 mo
(2)sh
432.9 205.92 mo
(,)sh
437.73 205.92 mo
(0)sh
SFCUQX+Tahoma*1 [16 0 0 -16 0 0 ]msf
533.13 206.02 mo
(2)sh
541.8 206.02 mo
(,)sh
546.63 206.02 mo
(2)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
587.85 206.05 mo
(2)sh
596.53 206.05 mo
(,)sh
601.33 206.05 mo
(3)sh
424.27 260.325 mo
(3)sh
432.95 260.325 mo
(,)sh
437.77 260.325 mo
(0)sh
SFCUQX+Tahoma*1 [26.525 0 0 -26.525 0 0 ]msf
464.75 271.9 mo
(b)sh
SFCUQX+Tahoma*1 [16 0 0 -16 0 0 ]msf
478.83 280.125 mo
(3)sh
487.5 280.125 mo
(,)sh
492.3 280.125 mo
(1)sh
SFCUQX+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
533.22 260.425 mo
(3)sh
541.9 260.425 mo
(,)sh
546.72 260.425 mo
(2)sh
587.92 260.2 mo
(3)sh
596.6 260.2 mo
(,)sh
601.42 260.2 mo
(3)sh
271.17 99.4 mo
266.93 99.4 263.74 102.48 263.74 105.89 cv
263.79 133.7 li
263.79 137.12 266.98 140.19 271.22 140.19 cv
365.12 140.19 li
369.36 140.19 372.54 137.15 372.54 133.73 cv
372.49 105.87 li
372.49 102.45 369.3 99.4 365.06 99.4 cv
271.17 99.4 li
cp
0 .077821 .0421454 0 cmyk
ef
2.4833 lw
271.17 99.4 mo
266.93 99.4 263.74 102.48 263.74 105.89 cv
263.79 133.7 li
263.79 137.12 266.98 140.19 271.22 140.19 cv
365.12 140.19 li
369.36 140.19 372.54 137.15 372.54 133.73 cv
372.49 105.87 li
372.49 102.45 369.3 99.4 365.06 99.4 cv
271.17 99.4 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
250.83 163.92 mo
359.25 163.92 li
359.25 152.27 li
385.68 165.48 li
359.47 179.37 li
359.47 167.95 li
250.6 167.95 li
250.83 163.92 li
cp
ef
.82627 lw
1 lc
1 lj
250.83 163.92 mo
359.25 163.92 li
359.25 152.27 li
385.68 165.48 li
359.47 179.37 li
359.47 167.95 li
250.6 167.95 li
250.83 163.92 li
cp
@
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQX+Tahoma gcheck setglobal} if
1 1850 38 <00010042ffe504ac05ec00330118b0852b58403908040711083018041a16
142a2b16242a3a16332a4611482f5a025a04570a5711106e137f13021313
1a340c02602d702d022d2d2634000a132eb8ffc0b3091e372eb8ffcc4012
0b0b063b2e2e350f35010f351f355f350320b8fffab70d0d063b20020c0c
b80140b456200c0b0bb80140400a562015770601060c0b0bb80140b45606
160d0db80140b45606140c0cb80140402c5606160c0c023b06200b0b023b
06160d0d023b060e1010063b060e0f0f063b06160c0c063b06160d0d063b
06b8ffe0b60b0b063b06663410f42b2b2b2b2b2b2b2b2b2b2b5ded2b2b2b
5d5d11332f2b2b3c003fed332f5d3fed332f5d31305d1b401013130c1a34
6c0c022d2d0026346c000a00183f2b332f3f2b332f303159052226272602
353412373636333216171616171523262627262623220607060615141617
1616333236373636373315060607060602dd92f55959625f5b59f4974b83
38306531101a523b3986585faa403f464a403ea85e5692393750170f3157
3e416f1b6261610122bcbb011667646916110f2d1bef1844211f284e4c4c
e69099dd4c4a4b2a201f4117ec172a141516>SFCUQX+Tahoma AddT42Char 
1 2288 48 <000100970000059305d1000c0187b0852b584017560a0138023805360a6f
026f05600a7f027f05700a0903b8fff2b40b0b063b04b8fff240370b0b06
3b5509560a5a0b03760901050a0203090204120429043504440454046b04
0704200d0d023b0404070b0903010708090a0b0305024110fffa000d000d
014000560002fff2000c000c014000560002fff4000b000b0140b3560214
00b8ffec40110c0c023b00060b0b023b00020d0d023b00b8ffe8b4101006
3b00b8ffeab40f0f063b00b8fffa400b0c0c063b000c0d0d063b00b8ffe6
40100b0b063b00650e0f0e500e0205060d0db80140b456050e0c0cb80140
b456050c0b0bb80140401056050a0c0c023b050a0c0c063b051307b8fff4
b41010063b07b8fffeb40d0d023b07b8fff840110f0f063b07050c0c063b
07030d0d063b07b8ffc8b60b0b063b07640d10f62b2b2b2b2b2bed2b2b2b
2b2b5d10f62b2b2b2b2b2b2b2bed2b2b2b111739003f3c3f3c12392f2b5d
1217393130015d72002b2b5d721b400e050a0203090404070b0903010708
00183fc43fc412392f121739303159212311012301112311210101210593
c6fe7c78fe7fb9010e0174016701130503fc970369fafd05d1fcc3033d00
>SFCUQX+Tahoma AddT42Char 
1 4558 76 <0002007f0000015505db0003000701e7b0852b58b306040c0cb80140b456
05040c0cb80140b456030c0c0cb80140b456000c0c0c410d014000560002
fffa000d000d014000560001fffa000d000d0140b45607060b0bb80140b4
5604060b0bb80140b45603060b0bb80140b45600060b0b411a0140005600
06fffa000b000b014000560005fffa000b000b014000560002fffa000b00
0b014000560001fffa000b000b01400056b1060243545840090544060302
05010804b8fffc40260b0b063b040005021010063b050a0f0f063b05040d
0d063b05060c0c063b05040b0b063b0500b8fff2b40f0f063b00b8fff8b5
0c0c063b0001b8fff440171010063b01080f0f063b01040d0d063b010c0c
0c063b01b8ffd2b70b0b063b010109081112392f2b2b2b2b2bcd2b2bc62b
2b2b2b2b10c62b003f3f3fed31301b4009054406030205010804b8fffab4
0f10023b04b8fffa40260c0c023b049f05020f10023b05040c0c023b0560
00080c0c023b001a4f01b001c001d0010401b8ffc0b3090f3701b8fffcb4
1010023b01b8fffe401e0f0f023b01020d0d023b01060c0c023b01040b0b
023b010109084f090109b8ffc0b20b0f372b5d1112392f2b2b2b2b2b2b5d
ed2bf42b2bed2b2b003f3f3fed313059012b2b2b2b2b2b2b2b2b2b2b2b2b
2b1b400a0605446c06030205010800183f3f3f2b30315921231133372335
330148bcbc0dd6d6045dbbc3>SFCUQX+Tahoma AddT42Char 
1 5080 79 <0001008c00000148061400030131b0852b58b3030c0c0cb80140b456000c
0c0cb80140b45603060b0bb80140b45600060b0b411a014000560002fffa
000b000b014000560001fffa000b000b014000560002fffa000d000d0140
00560001fffa000d000d01400056b10602435458b40201010800b8fff2b4
0f0f063b00b8fff8b50c0c063b0001b8fff440171010063b01080f0f063b
01040d0d063b010c0c0c063b01b8ffd2b70b0b063b010105041112392f2b
2b2b2b2bcd2b2b003f3f31301b40160201010800080c0c023b001a4f01b0
01c001d0010401b8ffc0b6090f374f050101b8fffcb41010023b01b8fffe
401b0f0f023b01020d0d023b01060c0c023b01040b0b023b0101050405b8
ffc0b20b0f372b1112392f2b2b2b2b2b5d2b5ded2b003f3f313059012b2b
2b2b2b2b2b2b1bb30201010800183f3f303159212311330148bcbc061400
>SFCUQX+Tahoma AddT42Char 
1 5410 80 <0001008800000638047c002e0293b0852b58b1060243545840181e210a24
16074227164221270421041c0600080f081b082eb8fffcb60c0c063b2e00
0eb8fffcb60c0c063b0e0f1ab8fffcb60c0c063b1a1b00b8ffe8400b1010
063b00080f0f063b00b8fffe400b0d0d063b002a0c0c063b00b8ffd2b70b
0b063b00002f0fb8fff440111010063b0f040d0d063b0f180c0c063b0fb8
ffd0b70b0b063b0f0f2f1bb8fffeb41010063b1bb8fff440110f0f063b1b
060d0d063b1b020c0c063b1bb8ffccb70b0b063b1b1b302f1112392f2b2b
2b2b2b11392f2b2b2b2b11392f2b2b2b2b2b10cd2b10cd2b10cd2b003f3f
3f3f3f3f10ed10ed113333123931301b402a30400c0c023b0523052a1523
152a2623262a391f070a2427191e0716422721041c05000f1b082d0c0b0c
b80140b4562d060d0db80140400a562d080c0c023b2d1a00410afff4000c
000c014000560000fff4000d000d0140b75600160f0f023b00b8fffc400b
0d0d023b000c0c0c023b00b8ffea400d0b0b023b00970a241a0e0c0b0cb8
0140b4560e060d0db80140400a560e080c0c023b0e1a0fb8fffa40171010
023b0f160f0f023b0f020d0d023b0f180c0c023b0fbbfff4000b000b0140
b6560f1e1a0c0b0cb80140b4561a060d0db80140400d561a080c0c023b1a
1a1b060b0bb80140b4561b0c0c0cb80140b4561b0c0d0dbb01400056001b
fff4b41010023b1bb8fffe402c0f0f023b1b060d0d023b1b080c0c023b1b
060b0b023b1b97000f100f200f900fb00f050f0f302f20307f30025d1112
392f5df42b2b2b2b2b2b2b2bfd2b2b2b32102b2b2b2b2bed2b2b2b113939
f42b2b2b2b2b2bed2b2b2b003f3c3c3f3f3cfd3c333311333331305d012b
591b40140a2427191e21072116426c2721041c05000f1b0800183fc4c43f
3fc42bc41133331133333031592111342627262623220607161615112311
342627262623220607112311331536363332161736363332161716161511
057c0c13144a3f3a85470103bc0c13144a3f3d863fbcbc4a915763992855
a25f48762c2d3102864d832528264743112f20fd2102864d832528264c3b
fcbe045d7c4a515a675f622d32339873fd21>SFCUQX+Tahoma AddT42Char 
1 6208 81 <00010088000003f6047c001601c0b0852b58b10602435458400d0b100842
13040e0601080d0800b8fff8b50c0c063b0001b8ffe0b41010063b01b8ff
fab40d0d063b01b8fff4b40c0c063b01b8ffe4400a0b0b063b0101181710
0cb8fff8b50c0c063b0c0db8fff4400b0f0f063b0d080d0d063b0db8ffca
b70b0b063b0d0d18171112392f2b2b2bdd2bc01112392f2b2b2b2bcd2b00
3f3f3f3fed393231301b401303151615761503100d084213040e05010d08
014113fff4000b000b014000560001fff4000c000c014000560001fffa00
0d000d014000560001fff8400d0c0c023b011a00161010023b00b8fffeb4
0f0f023b00b8ffea400b0d0d023b00060c0c023b00b8ffeab40b0b023b00
410afffa000d000d014000560000fffa000b000b0140400956006f18100b
0c0c0cb80140b4560b060d0db80140b4560b0c0b0bb80140400d560b080c
0c023b0b1a0d080d0db80140b4560d060c0cb80140b4560d060b0bbb0140
0056000dfff640191010023b0d020d0d023b0d060c0c023b0d020b0b023b
0d6e1710f62b2b2b2b2b2b2bfd2b2b2b2b3210f42b2b2b2b2b2b2bed2b2b
2b2b003f3c3f3fed123931305d591b400d100d1308426c13040e05010d08
00183fc43f3f2b1239303159212311342627262623220607112311331536
363332161503f6bc0f15175247469547bcbc54a45ba5ba027c4d85282a29
4b3cfcbe045d7c4b50d9ce00>SFCUQX+Tahoma AddT42Char 
1 6730 82 <00020039ffe1041f047c000b001701c6b0852b58b10602435458400d153f
03080f3f09040c00120600b8fff0b41010063b00b8ffecb40f0f063b00b8
fff0b40d0d063b00b8ffe8b40c0c063b00b8ffd240200b0b063b00001806
101010063b06140f0f063b06120d0d063b06180c0c063b06b8ffe0b70b0b
063b060619181112392f2b2b2b2b2b11392f2b2b2b2b2b10cd10cd003fed
3fed31301b402619400f0f023b19400b0b023b3b0e341034143b164b0e44
1044144b16080f3f0904153f030a0c4110fff4000b000b01400056000cff
fe000d000d01400056000cfffc000c000c01404010560c1b00081010023b
00220f0f023b00b8ffe0b40d0d023b00b8fffa400b0c0c023b00100b0b02
3b004110fff4000b000b014000560000fff4000c000c014000560000ffea
000d000d0140400b560071191f190112020d0db80140b45612040c0cb801
40b456120c0b0bb80140402556121b06161010023b06160f0f023b061a0d
0d023b061a0c0c023b06200b0b023b061c0c0cb80140b45606160d0db801
40b45606160b0bb80140b35606701810f62b2b2b2b2b2b2b2bed2b2b2b5d
10f62b2b2b2b2b2b2b2bed2b2b2b003fed3fed3130015d2b2b591b400c09
0f3f6c090403153f6c030a00183f2b3f2b30315901100023220011100033
3200033426232206151416333236041ffef0e2e9fef50113e1e20110c29e
92939f9f93919f022efee6fecd013d011001180136fecbfee7d9d3d3d9d2
d9d5>SFCUQX+Tahoma AddT42Char 
1 7612 86 <00010043ffe5036b04780036023cb0852b58b10602435458401c31111a28
041d002121253e1d0404040b3e000920110e0d0d063b1131b8ffeab41010
063b31b8ffe6400b0f0f063b310e0d0d063b31b8ffd640230b0b063b3131
383703281a041010063b1a0c0f0f063b1a160d0d063b1a0c0c0c063b1ab8
ffe0b70b0b063b1a1a38371112392f2b2b2b2b2bcdc41112392f2b2b2b2b
cd2bc4003fed332f3fed332f1112173931301b407838400c0c023b38400b
0b023b0a18062f1a18152f26072923360739234a02451f59025918541f50
2f6902651f652d632f7902761f841f84231619141917291429173b143b17
06141717b42b2e142b2b2e752b8b2b8b2e032b2e171404001d9021012121
253e1d0404040b3e000903202b2e17140320061a114110fff4000c000c01
4000560011fffe000d000d014000560011fff4000b000b0140b356111b31
b8ffc0b309163731410dfff4000b000b014000560031fff0000d000d0140
00560031ffe0b41010023b31b8fff4b40f0f023b31b8ffee40110d0d023b
310c0b0b023b31313828020d0db80140b456280c0c0cb80140b456280c0b
0bb80140b356281b1ab8ffc0b60e15371a0c0b0bb80140b4561a100d0db8
0140401a561a120f0f023b1a120d0d023b1a160c0c023b1a120b0b023b1a
2f2b2b2b2b2b2b2bed2b2b2b11332f2b2b2b2b2b2b2bed2b2b2b1217392f
2f003fed332f3fed332f5d111217395d870e2e2b0e7d10c4007131305d01
2b2b591b40172b2e171404001d21211d253e6c1d040404000b3e6c000900
183f2b332f3f2b332f111217393031590522262735331616171616333236
373636353426272626272626353436333216171523262623220615141617
161617161615140607060601b670c3400a18413630733e2d6619231f495d
2474318074e4bd5dbc400a48b15a5d804c542a67397c7d39373c971b3c22
d3132e191622151017343443441709180e259b6e97be2e23c939424e4f46
45160b150e1f907c48812e323400>SFCUQX+Tahoma AddT42Char 
1 8346 88 <00010080ffe103ee045d001901bbb0852b58b10602435458b90000fff4b4
0c0c063b19b8fff440120c0c063b18050c05010817021442050a1701b8ff
e6400b1010063b01020f0f063b01b8fffeb40d0d063b01b8fff4b40c0c06
3b01b8ffe0400a0b0b063b01011b1a0e0bb8fffa400b0f0f063b0b0c0d0d
063b0bb8ffcab70b0b063b0b0b1b1a1112392f2b2b2bcd1112392f2b2b2b
2b2bc0003fed33333f3f3f3130012b2b1bb9001bffc0401d1010023b0908
7d087909741604b80501180c05010817021442050a1701410dfff4000b00
0c014000560001fffa000d000d014000560001fff8b60c0c023b011a0041
0dfffa000b000b014000560000fff8000d000d014000560000ffdeb41010
023b00b8fffeb40f0f023b00b8ffeab40d0d023b00b8ffea400b0b0b023b
006f1b0e0c0b0bb80140b4560e060d0db80140b4560e0c0c0cb80140400d
560e080c0c023b0e1a0b060b0bb80140b4560b0c0d0dbb01400056000bff
f640191010023b0b060d0d023b0b040c0c023b0b060b0b023b0b6e1a10f6
2b2b2b2b2b2bed2b2b2b2b10f42b2b2b2b2b2bfd2b2b2b3c003fed33333f
3f3c5d31305d012b591b400d180c05010817020514426c050a00183f2b33
333f3fc43031592123350606232226272626351133111416171616333236
37113303eebc579c604981303035bc0d17174f4a459c41bc7c4c4f303434
9e7102d5fd8459752c2b284e39034200>SFCUQX+Tahoma AddT42Char 
1 8872 91 <0001000a000003ec045d000b015bb0852b58bc0008fffa000d000d0140b4
5602060d0db901400056b10602435458b6020c0b10063b08b8fff440260b
10063b02050b0804060409050605010804080a0902060702000102040308
02140e0f063b02b8fff4b60b0b063b020d0c10f42b2bc5ddcd10ddcd10dd
cd10ddcd003f3f3f3f1112173931302b2b1b405008080705040506040902
02010b0a0b000a030808090b000b0a0007020203050605040601090a0303
b404091404040901000707b406011406060102050b080400010304080a09
070605080b050204000ab8ffc0b30915370ab8fff040110b0b023b0a0a0d
2f0d5f0d6f0d03069604b8fff4b40b0b023b042f2be45d11332f2b2b3c17
39003f3c3c3c3f3c3c3c173987052e2b877dc4872e182b877dc48708103c
08c48708103c08c48708103c08c48708103c08c4313059042b2b1b401002
050b08040600010304080a0907060500183fc4c4c43fc4c4c41217393031
5921230101230101330101330103ece7fef1fee9d50184fe80e7010d0114
d6fe7e01a6fe5a022a0233fe5e01a2fdda00>SFCUQX+Tahoma AddT42Char 
SFCUQX+Tahoma /CharStrings get begin
/C 38 def
/M 48 def
/i 76 def
/l 79 def
/m 80 def
/n 81 def
/o 82 def
/s 86 def
/u 88 def
/x 91 def
end
SFCUQX+Tahoma /Encoding get
dup 67 /C put
dup 77 /M put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 115 /s put
dup 117 /u put
dup 120 /x put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQX+Tahoma*1 
[44{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two /three 15{/.notdef}rp 
/C 9{/.notdef}rp /M 19{/.notdef}rp /a /b 6{/.notdef}rp /i 
2{/.notdef}rp /l /m /n /o 3{/.notdef}rp /s /.notdef 
/u 2{/.notdef}rp /x 135{/.notdef}rp]
SFCUQX+Tahoma nf
SFCUQX+Tahoma*1 [16.525 0 0 -16.525 0 0 ]msf
275.08 124.07 mo
(MixColumns)
[12.4928 3.9826 7.99802 9.98105 8.97308 3.51987 9.48532 13.5009 9.48532 0 ]xsh
484.21 219.23 mo
477.87 227.36 li
481.94 227.43 li
456.54 261.195 426.5 284.675 353.01 298.479 cv
352.76 301.397 li
418.13 287.999 451.01 274.636 484.21 227.84 cv
488.07 228.05 li
484.21 219.23 li
cp
ef
.75 lw
484.21 219.23 mo
477.87 227.36 li
481.94 227.43 li
456.54 261.195 426.5 284.675 353.01 298.479 cv
352.76 301.397 li
418.13 287.999 451.01 274.636 484.21 227.84 cv
488.07 228.05 li
484.21 219.23 li
cp
@
101.89 227.59 mo
125.74 268.907 179.38 293.522 254.94 301.963 cv
255.19 304.88 li
188.81 295.036 129.95 280.447 99.615 228 cv
101.89 227.59 li
cp
ef
101.89 227.59 mo
125.74 268.907 179.38 293.522 254.94 301.963 cv
255.19 304.88 li
188.81 295.036 129.95 280.447 99.615 228 cv
101.89 227.59 li
cp
@
1.5 lw
0 lc
0 lj
291.31 309.379 mo
291.31 317.056 285.09 323.28 277.41 323.28 cv
269.73 323.28 263.51 317.056 263.51 309.379 cv
263.51 301.702 269.73 295.478 277.41 295.478 cv
285.09 295.478 291.31 301.702 291.31 309.379 cv
cp
@
1 lc
1 lj
267.26 319.088 mo
287.12 299.891 li
@
267.77 299.632 mo
286.97 319.491 li
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/SFCUQX+Tahoma*1 uf
/SFCUQX+Tahoma uf
/HAAAAA+Tahoma uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
