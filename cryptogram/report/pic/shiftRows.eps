%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: shiftRows.pdf
%%Creator: Adobe Acrobat 19.8.0
%%For: qfxuz
%%CreationDate: 2018/12/1, 22:06:30
%%BoundingBox: 0 0 672 268
%%HiResBoundingBox: 0 0 671.5000 267.5000
%%CropBox: 0 0 671.5000 267.5000
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 950 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 91.163280, 2018/06/22-11:31:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2018-12-01T22:05:09+08:00"
   xmp:CreatorTool="Microsoft® Visio® 2016"
   xmp:ModifyDate="2018-12-01T22:05:09+08:00"
   pdf:Keywords=""
   pdf:Producer="Microsoft® Visio® 2016">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>徐 泽来</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -267.5 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 267.5 li
671.5 267.5 li
671.5 0 li
cp
clp
gsave
0 267.5 mo
672 267.5 li
672 -.499974 li
0 -.499974 li
0 267.5 li
clp
333.85 56.31 mo
330.01 56.31 327.12 59.1 327.12 62.19 cv
327.17 87.39 li
327.17 90.49 330.06 93.27 333.9 93.27 cv
418.98 93.27 li
422.82 93.27 425.7 90.51 425.7 87.41 cv
425.66 62.17 li
425.66 59.07 422.77 56.31 418.93 56.31 cv
333.85 56.31 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.0194095 0 .331517 0 cmyk
ef
2.25 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
333.85 56.31 mo
330.01 56.31 327.12 59.1 327.12 62.19 cv
327.17 87.39 li
327.17 90.49 330.06 93.27 333.9 93.27 cv
418.98 93.27 li
422.82 93.27 425.7 90.51 425.7 87.41 cv
425.66 62.17 li
425.66 59.07 422.77 56.31 418.93 56.31 cv
333.85 56.31 li
cp
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
315.04 116.03 mo
413.44 116.03 li
413.44 105.46 li
437.44 117.46 li
413.65 130.06 li
413.65 119.69 li
314.83 119.69 li
315.04 116.03 li
cp
ef
.75 lw
1 lc
1 lj
315.04 116.03 mo
413.44 116.03 li
413.44 105.46 li
437.44 117.46 li
413.65 130.06 li
413.65 119.69 li
314.83 119.69 li
315.04 116.03 li
cp
@
450.45 68.35 mo
499.557 68.35 li
499.557 19.243 li
450.45 19.243 li
cp
.101015 0 .000732433 0 cmyk
ef
1.125 lw
0 lc
0 lj
2 ml
450.45 68.35 mo
499.557 68.35 li
499.557 19.243 li
450.45 19.243 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
450.45 117.44 mo
499.557 117.44 li
499.557 68.333 li
450.45 68.333 li
cp
.183078 0 .00482185 0 cmyk
ef
450.45 117.44 mo
499.557 117.44 li
499.557 68.333 li
450.45 68.333 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
450.43 166.57 mo
499.537 166.57 li
499.537 117.463 li
450.43 117.463 li
cp
.262913 0 .0055848 0 cmyk
ef
450.43 166.57 mo
499.537 166.57 li
499.537 117.463 li
450.43 117.463 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
450.43 215.657 mo
499.537 215.657 li
499.537 166.55 li
450.43 166.55 li
cp
.377935 0 .00015259 0 cmyk
ef
450.43 215.657 mo
499.537 215.657 li
499.537 166.55 li
450.43 166.55 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
499.53 68.29 mo
548.637 68.29 li
548.637 19.183 li
499.53 19.183 li
cp
.183078 0 .00482185 0 cmyk
ef
499.53 68.29 mo
548.637 68.29 li
548.637 19.183 li
499.53 19.183 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
499.53 117.38 mo
548.637 117.38 li
548.637 68.273 li
499.53 68.273 li
cp
.262913 0 .0055848 0 cmyk
ef
499.53 117.38 mo
548.637 117.38 li
548.637 68.273 li
499.53 68.273 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
499.5 166.51 mo
548.607 166.51 li
548.607 117.403 li
499.5 117.403 li
cp
.377935 0 .00015259 0 cmyk
ef
499.5 166.51 mo
548.607 166.51 li
548.607 117.403 li
499.5 117.403 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
499.5 215.596 mo
548.607 215.596 li
548.607 166.489 li
499.5 166.489 li
cp
.101015 0 .000732433 0 cmyk
ef
499.5 215.596 mo
548.607 215.596 li
548.607 166.489 li
499.5 166.489 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
548.63 68.29 mo
597.737 68.29 li
597.737 19.183 li
548.63 19.183 li
cp
.262913 0 .0055848 0 cmyk
ef
548.63 68.29 mo
597.737 68.29 li
597.737 19.183 li
548.63 19.183 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
548.63 117.38 mo
597.737 117.38 li
597.737 68.273 li
548.63 68.273 li
cp
.377935 0 .00015259 0 cmyk
ef
548.63 117.38 mo
597.737 117.38 li
597.737 68.273 li
548.63 68.273 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
548.6 166.51 mo
597.707 166.51 li
597.707 117.403 li
548.6 117.403 li
cp
.101015 0 .000732433 0 cmyk
ef
548.6 166.51 mo
597.707 166.51 li
597.707 117.403 li
548.6 117.403 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
548.6 215.598 mo
597.707 215.598 li
597.707 166.491 li
548.6 166.491 li
cp
.183078 0 .00482185 0 cmyk
ef
548.6 215.598 mo
597.707 215.598 li
597.707 166.491 li
548.6 166.491 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
597.7 68.23 mo
646.807 68.23 li
646.807 19.123 li
597.7 19.123 li
cp
.377935 0 .00015259 0 cmyk
ef
597.7 68.23 mo
646.807 68.23 li
646.807 19.123 li
597.7 19.123 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
597.7 117.32 mo
646.807 117.32 li
646.807 68.213 li
597.7 68.213 li
cp
.101015 0 .000732433 0 cmyk
ef
597.7 117.32 mo
646.807 117.32 li
646.807 68.213 li
597.7 68.213 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
597.67 166.45 mo
646.777 166.45 li
646.777 117.343 li
597.67 117.343 li
cp
.183078 0 .00482185 0 cmyk
ef
597.67 166.45 mo
646.777 166.45 li
646.777 117.343 li
597.67 117.343 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
597.67 215.538 mo
646.777 215.538 li
646.777 166.431 li
597.67 166.431 li
cp
.262913 0 .0055848 0 cmyk
ef
597.67 215.538 mo
646.777 215.538 li
646.777 166.431 li
597.67 166.431 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
106.17 68.39 mo
155.277 68.39 li
155.277 19.283 li
106.17 19.283 li
cp
.101015 0 .000732433 0 cmyk
ef
106.17 68.39 mo
155.277 68.39 li
155.277 19.283 li
106.17 19.283 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
106.17 117.48 mo
155.277 117.48 li
155.277 68.373 li
106.17 68.373 li
106.17 117.48 li
.101015 0 .000732433 0 cmyk
ef
106.17 117.48 mo
106.17 116.918 li
154.714 116.918 li
154.714 68.9355 li
106.733 68.9355 li
106.733 117.48 li
106.17 117.48 li
106.17 116.918 li
106.17 117.48 li
105.607 117.48 li
105.607 67.8106 li
155.84 67.8106 li
155.84 118.043 li
105.607 118.043 li
105.607 117.48 li
106.17 117.48 li
1 /0 /CSD get_res sepcs
1 sep
f
106.14 166.61 mo
155.247 166.61 li
155.247 117.503 li
106.14 117.503 li
106.14 166.61 li
.101015 0 .000732433 0 cmyk
ef
106.14 166.61 mo
106.14 166.047 li
154.684 166.047 li
154.684 118.066 li
106.702 118.066 li
106.702 166.61 li
106.14 166.61 li
106.14 166.047 li
106.14 166.61 li
105.577 166.61 li
105.577 116.94 li
155.809 116.94 li
155.809 167.173 li
105.577 167.173 li
105.577 166.61 li
106.14 166.61 li
1 /0 /CSD get_res sepcs
1 sep
f
106.14 215.696 mo
155.247 215.696 li
155.247 166.589 li
106.14 166.589 li
106.14 215.696 li
.101015 0 .000732433 0 cmyk
ef
106.14 215.696 mo
106.14 215.134 li
154.684 215.134 li
154.684 167.152 li
106.702 167.152 li
106.702 215.696 li
106.14 215.696 li
106.14 215.134 li
106.14 215.696 li
105.577 215.696 li
105.577 166.027 li
155.809 166.027 li
155.809 216.258 li
105.577 216.258 li
105.577 215.696 li
106.14 215.696 li
1 /0 /CSD get_res sepcs
1 sep
f
155.24 68.33 mo
204.347 68.33 li
204.347 19.223 li
155.24 19.223 li
cp
.183078 0 .00482185 0 cmyk
ef
155.24 68.33 mo
204.347 68.33 li
204.347 19.223 li
155.24 19.223 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
155.24 117.42 mo
204.347 117.42 li
204.347 68.3131 li
155.24 68.3131 li
155.24 117.42 li
.183078 0 .00482185 0 cmyk
ef
155.24 117.42 mo
155.24 116.858 li
203.785 116.858 li
203.785 68.8755 li
155.802 68.8755 li
155.802 117.42 li
155.24 117.42 li
155.24 116.858 li
155.24 117.42 li
154.678 117.42 li
154.678 67.7505 li
204.909 67.7505 li
204.909 117.982 li
154.678 117.982 li
154.678 117.42 li
155.24 117.42 li
1 /0 /CSD get_res sepcs
1 sep
f
155.22 166.55 mo
204.327 166.55 li
204.327 117.443 li
155.22 117.443 li
155.22 166.55 li
.183078 0 .00482185 0 cmyk
ef
155.22 166.55 mo
155.22 165.988 li
203.765 165.988 li
203.765 118.006 li
155.782 118.006 li
155.782 166.55 li
155.22 166.55 li
155.22 165.988 li
155.22 166.55 li
154.658 166.55 li
154.658 116.881 li
204.889 116.881 li
204.889 167.112 li
154.658 167.112 li
154.658 166.55 li
155.22 166.55 li
1 /0 /CSD get_res sepcs
1 sep
f
155.22 215.635 mo
204.327 215.635 li
204.327 166.528 li
155.22 166.528 li
155.22 215.635 li
.183078 0 .00482185 0 cmyk
ef
155.22 215.635 mo
155.22 215.072 li
203.765 215.072 li
203.765 167.09 li
155.782 167.09 li
155.782 215.635 li
155.22 215.635 li
155.22 215.072 li
155.22 215.635 li
154.658 215.635 li
154.658 165.965 li
204.889 165.965 li
204.889 216.197 li
154.658 216.197 li
154.658 215.635 li
155.22 215.635 li
1 /0 /CSD get_res sepcs
1 sep
f
204.34 68.33 mo
253.447 68.33 li
253.447 19.223 li
204.34 19.223 li
cp
.262913 0 .0055848 0 cmyk
ef
204.34 68.33 mo
253.447 68.33 li
253.447 19.223 li
204.34 19.223 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
204.34 117.42 mo
253.447 117.42 li
253.447 68.3131 li
204.34 68.3131 li
204.34 117.42 li
.262913 0 .0055848 0 cmyk
ef
204.34 117.42 mo
204.34 116.858 li
252.884 116.858 li
252.884 68.8755 li
204.902 68.8755 li
204.902 117.42 li
204.34 117.42 li
204.34 116.858 li
204.34 117.42 li
203.777 117.42 li
203.777 67.7505 li
254.009 67.7505 li
254.009 117.982 li
203.777 117.982 li
203.777 117.42 li
204.34 117.42 li
1 /0 /CSD get_res sepcs
1 sep
f
204.31 166.55 mo
253.417 166.55 li
253.417 117.443 li
204.31 117.443 li
204.31 166.55 li
.262913 0 .0055848 0 cmyk
ef
204.31 166.55 mo
204.31 165.988 li
252.855 165.988 li
252.855 118.006 li
204.872 118.006 li
204.872 166.55 li
204.31 166.55 li
204.31 165.988 li
204.31 166.55 li
203.748 166.55 li
203.748 116.881 li
253.979 116.881 li
253.979 167.112 li
203.748 167.112 li
203.748 166.55 li
204.31 166.55 li
1 /0 /CSD get_res sepcs
1 sep
f
204.31 215.637 mo
253.417 215.637 li
253.417 166.53 li
204.31 166.53 li
204.31 215.637 li
.262913 0 .0055848 0 cmyk
ef
204.31 215.637 mo
204.31 215.074 li
252.855 215.074 li
252.855 167.092 li
204.872 167.092 li
204.872 215.637 li
204.31 215.637 li
204.31 215.074 li
204.31 215.637 li
203.748 215.637 li
203.748 165.968 li
253.979 165.968 li
253.979 216.199 li
203.748 216.199 li
203.748 215.637 li
204.31 215.637 li
1 /0 /CSD get_res sepcs
1 sep
f
253.42 68.27 mo
302.527 68.27 li
302.527 19.163 li
253.42 19.163 li
cp
.377935 0 .00015259 0 cmyk
ef
253.42 68.27 mo
302.527 68.27 li
302.527 19.163 li
253.42 19.163 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
253.42 117.36 mo
302.527 117.36 li
302.527 68.253 li
253.42 68.253 li
253.42 117.36 li
.377935 0 .00015259 0 cmyk
ef
253.42 117.36 mo
253.42 116.797 li
301.965 116.797 li
301.965 68.8156 li
253.982 68.8156 li
253.982 117.36 li
253.42 117.36 li
253.42 116.797 li
253.42 117.36 li
252.858 117.36 li
252.858 67.6905 li
303.089 67.6905 li
303.089 117.923 li
252.858 117.923 li
252.858 117.36 li
253.42 117.36 li
1 /0 /CSD get_res sepcs
1 sep
f
253.39 166.49 mo
302.497 166.49 li
302.497 117.383 li
253.39 117.383 li
253.39 166.49 li
.377935 0 .00015259 0 cmyk
ef
253.39 166.49 mo
253.39 165.927 li
301.934 165.927 li
301.934 117.945 li
253.953 117.945 li
253.953 166.49 li
253.39 166.49 li
253.39 165.927 li
253.39 166.49 li
252.827 166.49 li
252.827 116.82 li
303.06 116.82 li
303.06 167.052 li
252.827 167.052 li
252.827 166.49 li
253.39 166.49 li
1 /0 /CSD get_res sepcs
1 sep
f
253.39 215.577 mo
302.497 215.577 li
302.497 166.47 li
253.39 166.47 li
253.39 215.577 li
.377935 0 .00015259 0 cmyk
ef
253.39 215.577 mo
253.39 215.014 li
301.934 215.014 li
301.934 167.033 li
253.953 167.033 li
253.953 215.577 li
253.39 215.577 li
253.39 215.014 li
253.39 215.577 li
252.827 215.577 li
252.827 165.907 li
303.06 165.907 li
303.06 216.14 li
252.827 216.14 li
252.827 215.577 li
253.39 215.577 li
1 /0 /CSD get_res sepcs
1 sep
f
%ADOBeginSubsetFont: HAAAAA+Tahoma Initial
ct_T42Dict begin
-0.598 -0.418 1.852 1.031
 256 array 0 1 255 {1 index exch /.notdef put} for  /HAAAAA+Tahoma
Type42DictBegin
[<00010000000c000c000c000c4f532f32da4255e2000000cc000000606376
742089dd96940000012c000003086670676dd76941d0000004340000101c
676c7966ce91b6d7000091fc0000336868656164ee826c49000014500000
003668686561120916d50000148800000024686d747894810c67000014ac
0000409a6c6f6361c294d03a00005548000022c86d61787015f510de0000
7810000000206e616d65c8198baf00007830000013d27072657069b9dc07
00008c04000005f7676469720000000000000000000000000003038e0190
00050008059a053300000125059a0533000003a0008202b10800020b0604
030504040204e1002effc000605b00000029000000004d53202000400020
fb06061efe59003b080101a7200101ff20280000045d05d1000000200018
061e061405f005d1047c045d03d200100000ffe7ffe1fe78fe64fe59039b
00270000009600aa00b900c600ce000000000000000000bc00c200000000
007600b200c000cb0000000000000000000000000081009400a600cc00da
00ef00000000000000000098009e00ab00b000000097009e007d0166017c
00900098009e00a400a900ae00b300ba00c3000000000000000000000000
000000000000000000000000000000000000000000d3011d000000000000
00c3021401c20000000000e9000c02d10173018e009700970042004200c6
000000000000000000000088008000390039000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000001ff0249033f025a02cc0289026f023700000000
0000027a009400c003d203a7004c004c00c000d600be0000000000000000
00000000000000000000008101f901f9007400e500b900ca019502c600ac
00a7008500880091009800a500ac006f0087008f009b00a0000000000000
00000000000000000000068a051104f200000000000000000000000000b8
00ad009a006c00db00cb00c400a0009a006c0000009700910000007d000a
001a001f056000000000000000aa00a20000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000045e02b50094009402cd034202bc02b0032f020403bc0191061405fa
0304006000600059007d004c008f0066004b008700a600a800bc007d0000
0000008c00b200b2008e00a40000000000710071009a00f8008302aa004c
00750075039c033100a400bc003d0062017b01080087003900b6019e00e2
005a005a007000af00e201c300b90071007104bc0068009000bc04da0718
07ec005f0051005f00aa01b704b605d5007e006d007e00c4006d40658574
737271706f6e6d6c6b6a6968676665625f5e5d5c5b5a5958555453525150
4f4e5857565554483c3b3a393837363534333231302f2e2d2c2b2a292827
262524232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09
0807060504030201002c01b0184358b119072b1b212121592d2c01b01843
58b11a072b1b212121592d2c01b0184358b0032510f221b000121b212121
592d2c01b0184358b11b072b1b212121592d2c01b0184358b11c072b1b21
2121592d2c01b0184358b11d072b1b212121592d2c01b0184358b11e072b
1b212121592d2c4eb00014b046234344b0032510b10046e6b00013b00114
b00010f221b001134db000122d2c01b018435845646a234569b019436460
60b0462344231020b046f02fb000121b21212121592d2c01b10b0a432343
650a2d2c00b10a0b4323430b2d2c00b0462370b101463e01b0462370b102
46453ab10200080d2d2cb0122bb0022545b00225456ab0408b60b0022523
442121212d2cb0132bb0022545b00225456ab8ffc08c60b0022523442121
212d2cb000b0122b2121212d2cb000b0132b2121212d2c01b00643b00743
650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c
58b00361592d2cb100032545685458b0032545b0032545606820b0042523
44b0042523441bb00325204568208a2344b00325456860b003252344592d
2cb00325204568208a2344b00325456860b0032523442d2cb01643588721
c01bb01243588745b0112bb0472344b0477ae41b038a45186920b0472344
8a8a8720b0a05158b0112bb0472344b0477ae41b21b0477ae4595959182d
2c208a4523456860442d2c456a422d2c01182f2d2c21212d2c01b0022545
b002254564606ab00325456a6120b00425456a208a8b65b0042523448cb0
0325234421212d2c01456823456961b00325456a6120b00425456a208a8b
65b0042523448cb00325234421212d2c018a8a45642345646164422d2c01
b0022543b04054b0022543b000545a58b003252045b040614459b0022543
b00054b0022543b040545a58b004252045b040604459212121212d2c014b
525843b00225452361441b2121592d2c014b525843b00225452360441b21
21592d2c4b525845441b2121592d2c0120b003252349b04060b0206320b0
00525823b002253823b002256538008a63381b212121212159012d2c4b50
5845441b2121592d2c01b005251023208af500b0016023edec2d2c01b005
251023208af500b0016123edec2d2c01b0062510f500edec2d2c46234660
8a8a462320468a608a61b8ff8062232010238ab14b4b8a70456020b00050
58b00161b8ffba8b1bb0468c59b0106068013a2d2c2045b003254652583f
1b2111592d2c2045b003254650583f1b2111592d2c00b00743b006430b2d
2c4b5258b00425b0042549b00425b00425496120b0005458212043b00055
58591bb04054582043b0005458591b2043b00054581bb00325b8ffc03859
595959212121212d2c4b52584365381b2121592d2c4b525843381b212159
2d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621b
b200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f
2b59b002602d2c0c6423648bb84000626023212d2cb4000100000015b008
26b00826b00826b008260f10161345683ab001162d2cb4000100000015b0
0826b00826b00826b008260f1016134568653ab001162d2cb0134358031b
02592d2cb0134358021b03592d2cb00a2b2310203cb0172b2d2cb0282b8a
102320d023b0102bb00558c01b3c59201011b00012012d2c4b53234b515a
5820458a60441b2121592d2c4b53234b515a58381b2121592d2c20b00325
4523452361688a204568208a234460442d2c20b003254523452361688a20
4568208a234460442d2c4b5358b00425b00425496423456469b0408b6120
b080626ab00225b00225618cb0462344218a10b046f6211b218a11231220
392f592d2cb0024354584b53234b515a58381b2121591b21212121592d2c
b0024350584b53234b515a58381b2121591b21212121592d2c4b53234b51
5a58381b2121592d2cb1020042b123018851b1400188535a58b910000020
885458b202010243604259b12401885158b920000040885458b202020243
6042b12401885458b2022002436042004b014b5258b2020802436042591b
b940000080885458b202040243604259b94000008063b80100885458b202
080243604259b94000010063b80200885458b202100243604259b1260188
5158b94000020063b80400885458b202400243604259b94000040063b808
00885458b202800243604259b12801885158b94000080063b81000885458
ba00020100000243604259595959595959b10002435458400a0540084009
400c020d021bb10102435458b2054008ba010000090100b30c010d011bb1
8002435258b2054008b80180b109401bb2054008ba01800009014059b940
0000808855b94000020063b8040088555a58b30c000d011bb30c000d0159
595942424242422d2cb0024354580c028a4b53b004264b515a580a381b0a
2121591b21212121592d2cb0572b580c028a4b53b004264b515a580a381b
0a2121591b21212121592d2c20b0024354b00123b05f237821b1000243b0
56237921b0024323b020205c58212121b100471c598a8a208a208a23b810
00635658b81000635658212121b1012c1c591b2159b08062205c58212121
b1001b1c5923b08062205c58212121b1000c1c598ab00161b8ffb31c2321
2d2c20b0024354b00123b07b237821b1000243b072237921b10002438ab0
20205c58212121b0631c598a8a208a208a23b81000635658b81000635658
b00426b0015bb00426b00426b004261b21212121b13600231c591b2159b0
042623b08062205c588a5c8a5a23212321b01d1c598ab08062205c582121
2321b00e1c59b00426b00161b8ff981c23212d2c2320b000508a8a64b100
03255458b0401bb10103255458b005438b59b04f2b5923b0622b23212358
65592d2cb108000c215460432d2c014623466023466123201020468a61b8
ff80628ab140408a704560683a2d2c208a2349648a2353583c1b21592d2c
4b52587d1b7a592d2cb012004b014b54422d2cb1020042b123018851b140
0188535a58b910000020885458b202010243604259b12401885158b92000
0040885458b2020202436042b12401885458b2022002436042004b014b52
58b2020802436042591bb940000080885458b202040243604259b9400000
8063b80100885458b202080243604259b94000010063b80200885458b202
100243604259b12601885158b94000020063b80400885458b20240024360
4259b94000040063b80800885458b202800243604259b12801885158b940
00080063b81000885458ba00020100000243604259595959595959b10002
435458400a0540084009400c020d021bb10102435458b2054008ba010000
090100b30c010d011bb18002435258b2054008b80180b109401bb9010000
02435258b2054008ba0180000901401bb901800002435258b2054008b802
00b109401bb2054008ba010000090100595959b9400000808855b9400002
0063b8040088555a58b30c000d011bb30c000d0159595942424242422d2c
451868234b51582320452064b04050587c59688a6059442d2cb00016b002
25b0022501b001233e00b002233eb10102060cb00a236542b00b234201b0
01233f00b002233fb10102060cb006236542b0072342b00116012d2c20b8
2000628a6023622d2cb0072558001b0159b0042510b00325b0022520b8ff
ff545821cd1bed5921b006255cb006255a58b0092b5920b005254ab00425
47b004254760b0062547b0806361b00225b0005558b00325b00725496359
b0082558001b0159b00425b0062549b009255cb009255a58b0092b59b007
2546b0806361b0032520b0005558631b2159612320b0005558b080631b21
b08059b0592bb006255c586959b00425202010b00048233ab0062658001b
0159b0052658b003252f598a12233221212d2cb00625b00a2587b00625b0
09254ab0005358b00625b00a251bb00925b0072559b00225b00225070cb0
05256323b00625636020b94000040063535821b00426b00426b00a1bb940
00040063655158b0042665b0042665b00a1bb00426b00426b000b00325b0
03250b0d0ab0092eb00725b007250b0d0ab00b2eb00525b0052507595920
b0005558b00525b0052587b00725b007250bb0092510b00b25b0092620b8
ffff545821cd1bed59b00525b0052507b00825b00b254923b00625b00625
87b00a2510b00b25c15920b00051b800522378b00161b00225b00725b007
2507b00a25b00d254961b08062b00525b005250bb00a252338b00625b006
2587b00825b008250bb00a2510b00b25c4b00625b0062507b00925b00c25
49b0032554b8ffa723792121212121212121212121212d2c23b0005458b9
400000001bb900004000598ab0005458b9400000001bb90000400059b05b
2b2d2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a080d
8ab0005458b9400000001bb90000400059b05b2b2d2cb00426b00426080d
b00426b00426080db05b2b2d2cb0022563b0206066b00225b82000626023
622d2c234ab1024e2b2d2c234ab1014e2b2d2c238a4a234564b0022564b0
02256164b00343525821206459b1024e2b23b000505865592d2c238a4a23
4564b0022564b002256164b00343525821206459b1014e2b23b000505865
592d2c20b003254ab1024e2b8a103b2d2c20b003254ab1014e2b8a103b2d
2cb00325b003258ab0672b8a103b2d2cb00325b003258ab0682b8a103b2d
2cb0032546b003254660b004252eb00425b00425b0042620b000505821b0
6a1bb06c592bb0032546b00325466061b08062208a2010233a232010233a
2d2cb0032547b003254760b0052547b0806361b00225b00625496323b005
254ab080632058621b2159b0042646608a468a4660b02063612d2cb00426
b00425b00425b00426b06e2b208a2010233a232010233a2d2c2320b00154
5821b00225b1024e2bb0805020605920606020b001515821211b20b00551
5821206661b0402361b100032550b00325b00325505a5820b00325618a53
5821b000591b21591bb00754582066616523211b2121b000595959b1024e
2b2d2cb00225b004254ab0005358b0001b8a8a238ab00159b00425462066
6120b00526b0062649b00526b00526b0702b236165b02060206661b02061
652d2cb0022546208a20b000505821b1024e2b1b452321596165b0022510
3b2d2cb0042620b802006220b80200638a236120b05d602bb00525118a12
8a20398a58ba005d10000004266356602b23212010204620b1024e2b2361
1b2321208a201049b1024e2b593b2d2cba005d10000009256356602bb005
25b00525b00526b06d2bb15d0725602bb00525b00525b00525b00525b06f
2bba005d10000008266356602b20b0005258b0502bb00525b00525b00725
b00725b00525b0712bb0021738b00052b00225b001525a58b00425b00625
49b00325b00525496020b0405258211bb000525820b0025458b00425b004
25b00725b0072549b00217381bb00425b00425b00425b0062549b0021738
595959595921212121212d2cb12501885058b94000020063b8040088545c
b0124b525b1bb001592d0001000000070000f988716f5f0f3cf5001b0800
00000000aec0ba1c00000000d6876843fb34fca60ed10846000000090002
000000000000000100000801fe5900000f17fb34fa7a0ed1000100000000
000000000000000000000eea0800010000000000028000000280000002a8
00e403360072000000000000000000000000000000000000000000000000
000000000000000000000000026c004a000000000000000000000000045e
0053045e00e2045e006d045e006100000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000062a00970557
009700000000000000000000000004f700970475004d0000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000433003a0000000003b1003b046c003b
0436003b028c001d046c003b0476008801d4007f00000000000000000000
0000000000000476008804580039000000000000000002e2008803920043
02ad0015000000000000000005f0001e0000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000444001d
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000001d4008c0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000004c1006600000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000019a000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000004e8001d0695001d0000
00000511001d062a00430000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000001f001f001f
001f006e00a100a100a100a100a100a100a100a100a100a100d400d400d4
00d401b0022702b8039d039d039d039d039d039d039d039d039d039d039d
039d039d039d039d039d039d039d039d039d039d039d039d039d039d039d
047e05560556055605560620075307530753075307530753075307530753
0753075307530753075308b208b2099f0ab20bf80cb00df70efc10011001
100110011001110612151215121512bf142e14d514d514d515e215e215e2
15e215e215e215e215e215e215e215e215e215e215e215e215e215e215e2
15e215e215e215e215e215e215e215e215e215e215e215e215e215e215e2
15e215e215e215e215e215e215e215e215e215e215e215e215e215e215e2
15e215e215e215e215e215e215e215e215e215e215e215e215e215e215e2
15e215e215e215e215e215e215e215e215e215e215e215e215e215e215e2
15e215e215e215e215e215e215e215e215e215e215e215e215e215e215e2
15e215e215e215e215e215e215e215e2167a167a167a167a167a167a167a
167a167a167a167a167a167a167a167a167a167a167a167a167a167a167a
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c416c416c4
16c416c416c416c416c416c416c416c416c416c416c416c416c417cf17cf
17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf
17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf
17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf
17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf
17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf
17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf
17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf
17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf
17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf
17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf
17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf
17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf
17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf
17cf17cf17cf17cf17cf17cf17cf17cf17cf17cf17d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d717d7
17d717d717d717d717d717d717d717d717d717d717d717d717d717d71829
1885188518e719b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b419b419b419b419b419b419b419b4
19b419b419b419b419b419b419b419b40001000011630080001000000000
0002001000400086000003eb101c0000000000>
<0000002501c20003000104030002000c0000000300010405000200100010
0003000104060002000c002000030001040700020010002c000300010408
00020010003c00030001040900000216004c0003000104090001000c0262
0003000104090002000e02f80003000104090003003002d6000300010409
0004000c02620003000104090005001803060003000104090006000c0262
0003000104090007007402620003000104090008002a005a000300010409
0009001c031e000300010409000b0046033a000300010409000d0e180380
00030001040a0002000c000000030001040b00020010119800030001040c
0002000c000000030001040e0002000c11a80003000104100002000e11b8
0003000104130002001211c60003000104140002000c0000000300010415
0002001000000003000104160002000c00000003000104190002000e11d8
00030001041b0002001011a800030001041d0002000c000000030001041f
0002000c00000003000104240002000e11e600030001042a0002000e11f4
00030001042d0002000e120200030001080a0002000c0000000300010816
0002000c0000000300010c0a0002000c0000000300010c0c0002000c0000
004e006f0072006d0061006c006e0079006f00620079010d0065006a006e
00e9006e006f0072006d0061006c005300740061006e0064006100720064
039a03b103bd03bf03bd03b903ba03ac00a9002000320030003100380020
004d006900630072006f0073006f0066007400200043006f00720070006f
0072006100740069006f006e002e00200041006c006c0020007200690067
006800740073002000720065007300650072007600650064002e000d000a
000d000a0048006500620072006500770020004f00700065006e00540079
007000650020004c00610079006f007500740020006c006f006700690063
00200063006f0070007900720069006700680074002000a9002000320030
003000330020002600200032003000300037002c002000520061006c0070
0068002000480061006e0063006f0063006b002000260020004a006f0068
006e00200048007500640073006f006e002e002000540068006900730020
006c00610079006f007500740020006c006f00670069006300200066006f
00720020004200690062006c006900630061006c00200048006500620072
006500770020006900730020006f00700065006e00200073006f00750072
0063006500200073006f00660074007700610072006500200075006e0064
0065007200200074006800650020004d004900540020004c006900630065
006e00730065003b002000730065006500200065006d0062006500640064
006500640020006c006900630065006e0073006500200064006500730063
00720069007000740069006f006e00200066006f00720020006400650074
00610069006c0073002e005400610068006f006d00610020006900730020
0061002000740072006100640065006d00610072006b0020006f00660020
0074006800650020004d006900630072006f0073006f0066007400200067
0072006f007500700020006f006600200063006f006d00700061006e0069
00650073002e004d006900630072006f0073006f00660074002000540061
0068006f006d006100200052006500670075006c00610072005600650072
00730069006f006e00200037002e00300030004d00610074007400680065
007700200043006100720074006500720068007400740070003a002f002f
007700770077002e006d006900630072006f0073006f00660074002e0063
006f006d002f007400790070006f006700720061007000680079004d0069
00630072006f0073006f0066007400200073007500700070006c00690065
006400200066006f006e0074002e00200059006f00750020006d00610079
00200075007300650020007400680069007300200066006f006e00740020
0074006f0020006300720065006100740065002c00200064006900730070
006c00610079002c00200061006e00640020007000720069006e00740020
0063006f006e00740065006e00740020006100730020007000650072006d
0069007400740065006400200062007900200074006800650020006c0069
00630065006e007300650020007400650072006d00730020006f00720020
007400650072006d00730020006f00660020007500730065002c0020006f
006600200074006800650020004d006900630072006f0073006f00660074
002000700072006f0064007500630074002c002000730065007200760069
00630065002c0020006f007200200063006f006e00740065006e00740020
0069006e0020007700680069006300680020007400680069007300200066
006f006e0074002000770061007300200069006e0063006c007500640065
0064002e00200059006f00750020006d006100790020006f006e006c0079
002000280069002900200065006d00620065006400200074006800690073
00200066006f006e007400200069006e00200063006f006e00740065006e
00740020006100730020007000650072006d006900740074006500640020
00620079002000740068006500200065006d00620065006400640069006e
00670020007200650073007400720069006300740069006f006e00730020
0069006e0063006c007500640065006400200069006e0020007400680069
007300200066006f006e0074003b00200061006e00640020002800690069
0029002000740065006d0070006f0072006100720069006c007900200064
006f0077006e006c006f006100640020007400680069007300200066006f
006e007400200074006f002000610020007000720069006e007400650072
0020006f00720020006f00740068006500720020006f0075007400700075
0074002000640065007600690063006500200074006f002000680065006c
00700020007000720069006e007400200063006f006e00740065006e0074
002e00200041006e00790020006f00740068006500720020007500730065
002000690073002000700072006f0068006900620069007400650064002e
000d000a000d000a00540068006500200066006f006c006c006f00770069
006e00670020006c006900630065006e00730065002c0020006200610073
006500640020006f006e00200074006800650020004d004900540020006c
006900630065006e00730065002000280068007400740070003a002f002f
0065006e002e00770069006b006900700065006400690061002e006f0072
0067002f00770069006b0069002f004d00490054005f004c006900630065
006e007300650029002c0020006100700070006c00690065007300200074
006f00200074006800650020004f00700065006e00540079007000650020
004c00610079006f007500740020006c006f00670069006300200066006f
00720020004200690062006c006900630061006c00200048006500620072
006500770020201c004c00610079006f007500740020004c006f00670069
0063201d0020006100730020006a006f0069006e0074006c007900200064
006500760065006c006f007000650064002000620079002000520061006c
00700068002000480061006e0063006f0063006b00200061006e00640020
004a006f0068006e00200048007500640073006f006e002e0020000d000a
000d000a005000650072006d0069007300730069006f006e002000690073
00200068006500720065006200790020006700720061006e007400650064
002c002000660072006500650020006f0066002000630068006100720067
0065002c00200074006f00200061006e007900200070006500720073006f
006e0020006f0062007400610069006e0069006e00670020006100200063
006f007000790020006f006600200074006800650020004f00700065006e
00540079007000650020004c00610079006f007500740020006c006f0067
0069006300200066006f00720020004200690062006c006900630061006c
002000480065006200720065007700200061006e00640020006100730073
006f00630069006100740065006400200064006f00630075006d0065006e
0074006100740069006f006e002000660069006c00650073002000280074
006800650020201c004c00610079006f007500740020004c006f00670069
006300200053006f006600740077006100720065201d0029002c00200074
006f0020006400650061006c00200069006e00200074006800650020004c
00610079006f007500740020004c006f00670069006300200053006f0066
0074007700610072006500200077006900740068006f0075007400200072
00650073007400720069006300740069006f006e002c00200069006e0063
006c007500640069006e006700200077006900740068006f007500740020
006c0069006d00690074006100740069006f006e00200074006800650020
00720069006700680074007300200074006f0020007500730065002c0020
0063006f00700079002c0020006d006f0064006900660079002c0020006d
0065007200670065002c0020007000750062006c006900730068002c0020
0064006900730074007200690062007500740065002c0020007300750062
006c006900630065006e00730065002c00200061006e0064002f006f0072
002000730065006c006c00200063006f00700069006500730020006f0066
00200074006800650020004c00610079006f007500740020004c006f0067
0069006300200053006f006600740077006100720065002c00200061006e
006400200074006f0020007000650072006d006900740020007000650072
0073006f006e007300200074006f002000770068006f006d002000740068
00650020004c00610079006f007500740020004c006f0067006900630020
0053006f0066007400770061007200650020006900730020006600750072
006e0069007300680065006400200074006f00200064006f00200073006f
002c0020007300750062006a00650063007400200074006f002000740068
006500200066006f006c006c006f00770069006e006700200063006f006e
0064006900740069006f006e0073003a000d000a000d000a005400680065
002000610062006f0076006500200063006f007000790072006900670068
00740020006e006f007400690063006500200061006e0064002000740068
006900730020007000650072006d0069007300730069006f006e0020006e
006f00740069006300650020007300680061006c006c0020006200650020
0069006e0063006c007500640065006400200069006e00200061006c006c
00200063006f00700069006500730020006f007200200073007500620073
00740061006e007400690061006c00200070006f007200740069006f006e
00730020006f006600200074006800650020004c00610079006f00750074
0020004c006f00670069006300200053006f006600740077006100720065
002e000d000a000d000a00540048004500200053004f0046005400570041
00520045002000490053002000500052004f005600490044004500440020
0027004100530020004900530027002c00200057004900540048004f0055
0054002000570041005200520041004e005400590020004f004600200041
004e00590020004b0049004e0044002c0020004500580050005200450053
00530020004f005200200049004d0050004c004900450044002c00200049
004e0043004c005500440049004e004700200042005500540020004e004f
00540020004c0049004d004900540045004400200054004f002000540048
0045002000570041005200520041004e00540049004500530020004f0046
0020004d00450052004300480041004e0054004100420049004c00490054
0059002c0020004600490054004e00450053005300200046004f00520020
004100200050004100520054004900430055004c00410052002000500055
00520050004f0053004500200041004e00440020004e004f004e0049004e
004600520049004e00470045004d0045004e0054002e00200049004e0020
004e004f0020004500560045004e00540020005300480041004c004c0020
00540048004500200041005500540048004f005200530020004f00520020
0043004f005000590052004900470048005400200048004f004c00440045
005200530020004200450020004c004900410042004c004500200046004f
005200200041004e005900200043004c00410049004d002c002000440041
004d00410047004500530020004f00520020004f00540048004500520020
004c0049004100420049004c004900540059002c00200057004800450054
00480045005200200049004e00200041004e00200041004300540049004f
004e0020004f004600200043004f004e00540052004100430054002c0020
0054004f005200540020004f00520020004f005400480045005200570049
00530045002c002000410052004900530049004e0047002000460052004f
004d002c0020004f005500540020004f00460020004f005200200049004e
00200043004f004e004e0045004300540049004f004e0020005700490054
0048002000540048004500200053004f0046005400570041005200450020
004f0052002000540048004500200055005300450020004f00520020004f
00540048004500520020004400450041004c0049004e0047005300200049
004e002000540048004500200053004f004600540057004100520045002e
000d000a004e006f0072006d00610061006c0069004e006f0072006d00e1
006c006e0065004e006f0072006d0061006c0065005300740061006e0064
0061006100720064041e0431044b0447043d044b0439004e006100760061
0064006e006f0074006801b001a10300006e00670041007200720075006e
007400610000b154004112017d00010010017d0040017d0090017d000300
3f0175005f0175005f017600030040016fb3282d3640b8016fb2171b36b8
0171b3033a2190411a01710001003001710050017100700171009f017100
bf017100df01710006000f0171003f0171005f0171007f01710004ffc001
53b21c1d36b9ffc00163b2121336b9ffc0014eb2333436b9ffc0014eb224
2636b8014eb33c161f0fbd015b00ef015b00020040015ab3191a3640b801
5ab315153640b8015ab2101036b9ffc00159b3090a3640b80170b3282d36
40b80170b2171b36b9ffc0015db2151b36b9ffc00162b2141536b9ffc001
62b21c1d36b9ffc00152b21c1d36b9ffc00167b22f3636b9ffc00167b20e
2636b9ffc00166b2090d36b9ffc00161b2090d36b9ffc00165b2333636b9
ffc00165b2282a36b9ffc00165b21d2036b80165b21a191fb9ffc00161b2
4f5136b9ffc00161b23e3f36b9ffc00161b2191d36b9ffc00161b3131536
40b80161b30b0d3640b8015fb2283236b9ffc0014fb2565a36b9ffc0014f
b3393b36304116014f0040014f0050014f00030070014f0080014f000200
00016400100164000200d0016400e0016400020164b270641fb9ffc00146
b2131436b9ffc00146b2161636b9ffc00146b2090a36b9ffc00142b21113
36b9ffc40142b20a0e36b9ffc0013eb2171836b9ffc0013db20b1836b901
30012f400b321fe7e8641fe8d2301f20bc01390030013900020139b20318
1f410a013b01320010001f01370132000d001f01350132b2141f2f410c01
32000101360133000e001f013401330014001f01310133b2101f40ba0138
00900138404e020fe32fe302b0d901a0d90190d901d0d901c0d901b0d901
b0d301a0d30190d301d0d301c0d301b0d301d1d73f1fd6d71a1f80d501d5
d71a1f1fd70170d701cac92a1fcac93938ca010bc844c802b8ffc0b6dc09
11364fd201b8ffc0401fb229323610b220b240b250b270b280b2a0b2b0b2
d0b2e0b20ac0b2f0b20285b8ffeeb3b4254836b8ffe0b3b4102336b8ffee
400eb4090f36b41a481fd06e01e07101b8ffc0400998090a364071091136
b8ffc1400970121536406f131536b8ffc0401a6e0912367099014067090f
3670668066a066b06604af65bf6502b8ffc0402a640911366f937f93026f
9001708e017f8c9f8c0280a00100625062c062034061706102105b205b90
5b03b8017440b914321f6814481fb314481f2d14111f2c14251f2b14391f
2a14131fdf28ef2802cf28df28ef28032814101f9e20431f1f141e1f2120
431f20143c1f9f1a521f1a1b471f1b1a3c1f1a14321f1514391f1314411f
12141a1f11141a1f70140140144143360006010f01010f012f013f016f01
7f01af01bf01cf01ef01ff010a0f00010f002f003f006f007f00af00bf00
cf00ef00ff000a0a09371f0f020f0302cf02cf03ff02ff03040c0d390504
390302390100390350500501b801ff01b0124b004b5442b013014b004b53
42b116322b4bb0645242858d8d1d42b0964b5258b20380801d4259b80800
4b5458b001b0018e59b0084b5358b001b0018e59002b2b2b2b73742b7374
7374b00345b006456861b006234473b00345b00e456861b00e2344b00e45
b00f456861b00f234401b0144568b01423442b732b2b2b2b2b2b2b2b2b2b
2b2b2b73742b2b2b2b2b2b2b73737373737373732b73732b732b2b2b2b2b
73742b2b2b2b002b58b8ffc04044b51718361f44010f561f56024f555f55
0238bf2a1f6fbf019fbfafbf0237b9151f2fbb01bcbe171fbdbe161fbebd
151fbab9521fb6b9291fb7b9321fb8b9321fb935391fb80173403a3f321f
3c3f321f3d3f3d1f3e3f211f433f1d1f423f521f413f521f403f521f3f35
321f3233641f3335341f3534541f34351e1fd034e034f03403752b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b742b73742b7373742b1b400c02
033b1f04053b1f0a083b1f2b2b2b5973742b01742b0073732b2b73742b73
2b2b73737374747473737374747473732b2b2b732b2b2b2b732b2b2b2b2b
2b2b2b2b2b2b737474752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b73002b2b2b2b2bb801714568b8017123447374752b2b2b73
73742b0000>
[13161 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 2732 53 <000200970000051805d10010001f012ab0852b584045450f451d020a0119
012c013a003d014c014a145a015914591d6b016a14790177107b140f010c
0d0d063b0201b300100010071a3402400f0f063b02020518340603000508
11bbfff4000b000b0140400d5611150f0d010d0c0b0b023b0db8fff4401b
0c0c023b0d100d0d023b0d0c0c0c063b0d0c0d0d063b0d0d100500b8ffc0
b309113700b8ffc8400c0b0b063b0000211903020c0db80140b456030c0b
0bb80140b356031405b8fffeb40d0d023b05b8fff4400b1010063b05040d
0d063b05b8ffc4b60b0b063b05642010f42b2b2b2bfd2b2b3211332f2b2b
1239392f2b2b2b2b2b5ded2b003f3c3fed12392f2bed123931300187107a
fd18c0012b5d005d1b40121007021a346c0202050618346c060300050800
183fc43f2b12392f2b123930315921210123112311213216171616151406
071334262726262323113332363736360518fefffe28e2c6018080ad4e4e
5ba68f662e302a7053c4ae5588302b290250fdb005d11c33329e75a4dc35
01a64165201c17fdce1e2f2a7400>HAAAAA+Tahoma AddT42Char 
2 3136 54 <0001004dffe5044205ec003301ccb0852b5840462f0d29142b2b3902390d
361c35274a02450a4a0c451c492444275a02560a590f5a18551c5e246506
6a136c156618651c6628602c6830761c1c7a0e742802282b110e04001a1e
b8ffc040150b0b013c1f1e2f1e7f1e031e1e22341a0271050105b8ffc0b3
090b3705b8ffc0401a0f0f013c05400b0b013c05050834000a282b110e04
2e171e1e0b410afffe000c000c01400056000bfff2000b000b0140400a56
0b0c0d0d063b0b152ebeffea000b000b01400056002effc0400a0914372e
0c0b0b023b2eb8ffd4b40d0d023b2eb8ffe8b40f0f063b2eb8ffeeb40c0c
063b2eb8ffe6b40d0d063b2eb8ffd040120b0b063b2e2e350f354f350204
0425020c0cb80140b456250c0b0bbb014000560025fff440300d0d063b25
15a017b0170217100b0b023b170c0c0c023b170c0d0d023b170e0f0f063b
170c0c0c063b170c0d0d063b17b8ffdcb40b0b063b17b8ffc0b60c113717
120b0bb80140b156172f2b2b2b2b2b2b2b2b2b5ded2b2b2b332f5d11332f
2b2b2b2b2b2b2b2bed2b2b2b332f11121739003fed332f2b2b2b5d3fed33
2f5d2b111217395d31305d1b4017282b110e04001a1e1e1a22346c1a0205
050008346c000a00183f2b332f3f2b332f11121739303159052226273533
161633323635342627262627262627262635342433321617152326262322
061514161716161716161514060706060236a2e3640e62f873a4a8586045
72564d7a2f2e33011adb7ddf5f0f47de7a8aaa645f3fb63c9a8e474048b5
1b4331f85c65897059701b141a16143e32318557b5f5322eed416181695f
701a112b122fbe8b57aa3b414600>HAAAAA+Tahoma AddT42Char 
2 6128 73 <0001001d000002d4061e00180123b0852b58b10602435458402118150000
043f15000b0e3e11080511050d080909000e08960b000f000f110b1a0eb8
fff640111010063b0e240f0f063b0e0c0c0c063b0eb8fff4b40b0b063b0e
2f2b2b2b2bedc033332f2f10e51112392f003f3f3f10fdc03fed322f1139
31301b402a08143914020000043f15000b0e3e0811050d080909000e0896
0b000f0f1f0f2f0f030f000f110b0c0b0cb80140b4560b060d0db8014040
17560b080c0c023b0b1a000e100e200e030e161010023b0eb8fffab40f0f
023b0eb8fffab40d0d023b0eb8fffeb40c0c023b0e2f2b2b2b2b5ded2b2b
2b3c33332f5d2f10e41112392f003f3f3cfd3c3ffd322f3130015d313059
1b4012000015043f6c15000b110e3e6c0811050d0800183f3fc42bc43f2b
322f30315901232626232206151521152111231123353335343633321617
02d40a195e2577650137fecfbc7f7fc2b5346429056009116b8c269cfc3f
03c19c25cad20b07>HAAAAA+Tahoma AddT42Char 
2 7150 75 <00010088000003f60614001601c0b0852b58b10602435458400d0b100842
13040e0101080d0800b8fff8b50c0c063b0001b8ffe0b41010063b01b8ff
f8b40d0d063b01b8fff4b40c0c063b01b8ffe4400a0b0b063b0101181710
0cb8fff8b50c0c063b0c0db8fff4400b0f0f063b0d060d0d063b0db8ffca
b70b0b063b0d0d18171112392f2b2b2bdd2bc01112392f2b2b2b2bcd2b00
3f3f3f3fed393231301b401303151615761503100d084213040e01010d08
024113fff4000b000b014000560002fff4000c000c014000560002fffa00
0d000d014000560002fff8400d0c0c023b021a00161010023b00b8fffeb4
0f0f023b00b8ffea400b0d0d023b00060c0c023b00b8ffeab40b0b023b00
410afffa000d000d014000560000fffa000b000b0140400956006f18100b
0c0c0cb80140b4560b060d0db80140b4560b0c0b0bb80140400a560b080c
0c023b0b1a0db8fff6401a1010023b0d020d0d023b0d060c0c023b0d020b
0b023b0d060b0bb80140b4560d060c0cb80140b4560d080d0db80140b356
0d6e1710f62b2b2b2b2b2b2bfd2b2b2b2b3c10f42b2b2b2b2b2b2bed2b2b
2b2b003f3c3f3fed123931305d591b400d100d1308426c13040e01010d08
00183fc43f3f2b1239303159212311342627262623220607112311331136
363332161503f6bc0f15175247469547bcbc54a45ba5ba027c4d85282a29
4b3cfcbe0614fdcd4b50d9ce>HAAAAA+Tahoma AddT42Char 
2 7672 76 <0002007f0000015505db0003000701e7b0852b58b306040c0cb80140b456
05040c0cb80140b456030c0c0cb80140b456000c0c0c410d014000560002
fffa000d000d014000560001fffa000d000d0140b45607060b0bb80140b4
5604060b0bb80140b45603060b0bb80140b45600060b0b411a0140005600
06fffa000b000b014000560005fffa000b000b014000560002fffa000b00
0b014000560001fffa000b000b01400056b1060243545840090544060302
05010804b8fffc40260b0b063b040005021010063b050a0f0f063b05040d
0d063b05060c0c063b05040b0b063b0500b8fff2b40f0f063b00b8fff8b5
0c0c063b0001b8fff440171010063b01080f0f063b01040d0d063b010c0c
0c063b01b8ffd2b70b0b063b010109081112392f2b2b2b2b2bcd2b2bc62b
2b2b2b2b10c62b003f3f3fed31301b4009054406030205010804b8fffab4
0f10023b04b8fffa40260c0c023b049f05020f10023b05040c0c023b0560
00080c0c023b001a4f01b001c001d0010401b8ffc0b3090f3701b8fffcb4
1010023b01b8fffe401e0f0f023b01020d0d023b01060c0c023b01040b0b
023b010109084f090109b8ffc0b20b0f372b5d1112392f2b2b2b2b2b2b5d
ed2bf42b2bed2b2b003f3f3fed313059012b2b2b2b2b2b2b2b2b2b2b2b2b
2b1b400a0605446c06030205010800183f3f3f2b30315921231133372335
330148bcbc0dd6d6045dbbc3>HAAAAA+Tahoma AddT42Char 
2 8716 82 <00020039ffe1041f047c000b001701c6b0852b58b10602435458400d153f
03080f3f09040c00120600b8fff0b41010063b00b8ffecb40f0f063b00b8
fff0b40d0d063b00b8ffe8b40c0c063b00b8ffd240200b0b063b00001806
101010063b06140f0f063b06120d0d063b06180c0c063b06b8ffe0b70b0b
063b060619181112392f2b2b2b2b2b11392f2b2b2b2b2b10cd10cd003fed
3fed31301b402619400f0f023b19400b0b023b3b0e341034143b164b0e44
1044144b16080f3f0904153f030a0c4110fff4000b000b01400056000cff
fe000d000d01400056000cfffc000c000c01404010560c1b00081010023b
00220f0f023b00b8ffe0b40d0d023b00b8fffa400b0c0c023b00100b0b02
3b004110fff4000b000b014000560000fff4000c000c014000560000ffea
000d000d0140400b560071191f190112020d0db80140b45612040c0cb801
40b456120c0b0bb80140402556121b06161010023b06160f0f023b061a0d
0d023b061a0c0c023b06200b0b023b061c0c0cb80140b45606160d0db801
40b45606160b0bb80140b35606701810f62b2b2b2b2b2b2b2bed2b2b2b5d
10f62b2b2b2b2b2b2b2bed2b2b2b003fed3fed3130015d2b2b591b400c09
0f3f6c090403153f6c030a00183f2b3f2b30315901100023220011100033
3200033426232206151416333236041ffef0e2e9fef50113e1e20110c29e
92939f9f93919f022efee6fecd013d011001180136fecbfee7d9d3d3d9d2
d9d5>HAAAAA+Tahoma AddT42Char 
2 9598 86 <00010043ffe5036b04780036023cb0852b58b10602435458401c31111a28
041d002121253e1d0404040b3e000920110e0d0d063b1131b8ffeab41010
063b31b8ffe6400b0f0f063b310e0d0d063b31b8ffd640230b0b063b3131
383703281a041010063b1a0c0f0f063b1a160d0d063b1a0c0c0c063b1ab8
ffe0b70b0b063b1a1a38371112392f2b2b2b2b2bcdc41112392f2b2b2b2b
cd2bc4003fed332f3fed332f1112173931301b407838400c0c023b38400b
0b023b0a18062f1a18152f26072923360739234a02451f59025918541f50
2f6902651f652d632f7902761f841f84231619141917291429173b143b17
06141717b42b2e142b2b2e752b8b2b8b2e032b2e171404001d9021012121
253e1d0404040b3e000903202b2e17140320061a114110fff4000c000c01
4000560011fffe000d000d014000560011fff4000b000b0140b356111b31
b8ffc0b309163731410dfff4000b000b014000560031fff0000d000d0140
00560031ffe0b41010023b31b8fff4b40f0f023b31b8ffee40110d0d023b
310c0b0b023b31313828020d0db80140b456280c0c0cb80140b456280c0b
0bb80140b356281b1ab8ffc0b60e15371a0c0b0bb80140b4561a100d0db8
0140401a561a120f0f023b1a120d0d023b1a160c0c023b1a120b0b023b1a
2f2b2b2b2b2b2b2bed2b2b2b11332f2b2b2b2b2b2b2bed2b2b2b1217392f
2f003fed332f3fed332f5d111217395d870e2e2b0e7d10c4007131305d01
2b2b591b40172b2e171404001d21211d253e6c1d040404000b3e6c000900
183f2b332f3f2b332f111217393031590522262735331616171616333236
373636353426272626272626353436333216171523262623220615141617
161617161615140607060601b670c3400a18413630733e2d6619231f495d
2474318074e4bd5dbc400a48b15a5d804c542a67397c7d39373c971b3c22
d3132e191622151017343443441709180e259b6e97be2e23c939424e4f46
45160b150e1f907c48812e323400>HAAAAA+Tahoma AddT42Char 
2 10332 87 <00010015ffea02aa059e001b00f7b0852b5840251d401010023b0120090b
3708080d043e0a07051818143f00093f1d0118000b100b200b030bb8fff4
b40c0c063b0bb8ffe0400a0b0b063b0b0b1d0a0d06b8ffe840090c0c063b
060d0c0b0cb80140b4560d060d0db801404019560d080c0c023b0d1a070f
061f062003030603261010023b03b8fffeb40f0f023b03b8fffeb40d0d02
3b03b8fff2400b0f0f063b030c0d0d063b03b8fffeb60b0b063b03981c10
f42b2b2b2b2b2b325d3ced2b2b2b2f2b103c11332f2b2b5d3c5d003ffd32
2f3f3cfd3c332f3130002b012b1b40130808070d07043e6c0a0705181800
143f6c000900183f2b322f3fc42bc411332f303159052226351123353311
3311211521111416171616333236373315060601da9aac7f7fbc015afea6
0614114c412e56130b356d16afbd026b9c0141febf9cfded555c2823231b
09a90f11>HAAAAA+Tahoma AddT42Char 
2 10666 90 <0001001e000005d2045d000c01d8b0852b584111000cfff6000c000c0140
0056000cfffc000d000d014000560007ffff000d000d0140b456070a0c0c
be01400056000cfff4000b000b0140b456070c0b0bb901400056b1060243
5458b603180a11063b0bb8ffe8b40a11063b08b8ffe840210a11063b080b
030306050c050905060502080508000c0b06070e0b0b063b070803b8ffdc
b70b0b063b03030d0bb8ffe0b70b0b063b0b0b0d04b8ffffb40d0d063b0a
b8ffff400b0d0d063b090c0d0d063b08b8fff2b40d0d063b08b8ffd2b70b
0b063b08080e0d1112392f2b2b2b2b2b11392f2b11392f2b10dd2bcd10dd
b00b4b5458b9000cfff43859cd003f3f3f3f3f1112173931302b2b2b1bb9
000afff8b40b0b023b01b8fff440760b0b023b0b01050605070609090b1b
01150615071709190b2c012a022504260524082b0b34013b0544014b0557
015905570b690066016a026404680564086a09640a6b0b7c027304780576
087a09740a790b27000310032703030c1a000100071a06050608090b0002
03060506050508090a03030600b8ffc0401009153700000e0f0e1f0e3f0e
600e04062f5d11332f2b121739003f3f1117393130018710fd8710fd005d
015d2b2b592b2b2b2b2b2b1b400c08090b00020306050605050800183f3f
1217393031590101230101230133130133011305d2fee5aefeeffef1adfe
e2c4c501099b0110ba045dfba3035dfca3045dfc9f0361fc9f036100>HAAAAA+Tahoma AddT42Char 
2 0 0 <00020100000007000600000300070014b706020400060204002fcdddcd00
2fcdddcd3130211121112521112101000600fa800500fb000600fa008005
0000>HAAAAA+Tahoma AddT42Char 
HAAAAA+Tahoma /CharStrings get begin
/R 53 def
/S 54 def
/f 73 def
/h 75 def
/i 76 def
/o 82 def
/s 86 def
/t 87 def
/w 90 def
end
HAAAAA+Tahoma /Encoding get
dup 82 /R put
dup 83 /S put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 111 /o put
dup 115 /s put
dup 116 /t put
dup 119 /w put
pop
end
%ADOEndSubsetFont
/SFCUQT+Tahoma /HAAAAA+Tahoma findfont ct_VMDictPut
/SFCUQT+Tahoma*1 
[82{/.notdef}rp /R /S 18{/.notdef}rp /f /.notdef /h /i 
5{/.notdef}rp /o 3{/.notdef}rp /s /t 2{/.notdef}rp /w 136{/.notdef}rp]
SFCUQT+Tahoma nf
SFCUQT+Tahoma*1 [19.05 0 0 -19.05 0 0 ]msf
332.73 81.25 mo
(ShiftRows)
[11.4873 10.9728 5.48648 6.47687 7.48663 12.4778 10.9728 14.9734 0 ]xsh
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQT+Tahoma gcheck setglobal} if
2 3750 68 <0002003affe103b30478000c00360217b0852b58b10602435458b9000cff
eab40d0d063b00b8ffea400c0d0d063b00010d0a131f3d01b8ffc0401d0c
0c063b100101000101010113263f2e040a41133608130a35361f0036b8ff
f4400b0c0c063b360c0f0f063b36b8ffe040220b0b063b3636383707190c
1010063b190c0f0f063b190c0c0c063b19160d0d063b19b8ffdcb70b0b06
3b191938371112392f2b2b2b2b2bcd1112392f2b2b2bd0c010cd003f3f10
ed3fed12392f5d5d2bed11123911393130002b2b1bb638400c0c023b0cb8
ffeab40d0d023b0db8ffeab40d0d023b00b8ffeab40d0d023b2cb8fff0b3
1619372eb8fff0b3090a372bb8ffc0b50e1137013d1fb8ffc0401c0c0d37
1f1f132e4f2a012a2a263f2e04000e1336080a41130a1f0036b8fff8b40c
0c023b36410afff4000b000b014000560036fffa000d000d0140402d5636
1a351a0f0f023b351a0c0c023b35060d0d023b356f3819100e1037191009
0b372b40090b372b2b070c0b0bb80140b45607020d0db80140401f56071b
19160f0f023b19200b0b023b191a0c0c023b19120d0d023b19160c0cb801
40b45619160d0db80140b45619160b0bb80140b35619703710f42b2b2b2b
2b2b2bed2b2b332f2b2b2b10f62b2b2bfd2b2b2b3c3c003fed3f1133333f
ed332f5d1112392f2bed2b2b31302b2b2b2b012b591b401b1f013d6c1f1f
132e2a2a2e263f6c2e04000e133608130a416c130a00183f2b3f1133333f
2b332f1112392f2b30315901110606070606151416333236170606070606
232226272626353436373624373534262726262322060723353636333216
17161615112302f843cd3f4b626c6859903f174d24325d54457c2f2d3662
6a5e010094282424683741b0580b34c25f739e3f3d3cbb01130136061513
175f5560624d64113d121a1c342f2e874b74a3302b210824425116170f27
25bf0f24242f2e9269fd0400>SFCUQT+Tahoma AddT42Char 
SFCUQT+Tahoma /CharStrings get begin
/a 68 def
end
SFCUQT+Tahoma /Encoding get
dup 97 /a put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQT+Tahoma*1 
[82{/.notdef}rp /R /S 13{/.notdef}rp /a 4{/.notdef}rp /f /.notdef 
/h /i 5{/.notdef}rp /o 3{/.notdef}rp /s /t 2{/.notdef}rp 
/w 136{/.notdef}rp]
SFCUQT+Tahoma nf
SFCUQT+Tahoma*1 [24.025 0 0 -24.025 0 0 ]msf
460.93 47.6 mo
(a)sh
SFCUQT+Tahoma*1 [24.025 0 0 -24.025 0 0 ]msf
510.43 47.6 mo
(a)sh
SFCUQT+Tahoma*1 [24.025 0 0 -24.025 0 0 ]msf
559.65 47.6 mo
(a)sh
SFCUQT+Tahoma*1 [24.025 0 0 -24.025 0 0 ]msf
609.2 47.6 mo
(a)sh
SFCUQT+Tahoma*1 [24.05 0 0 -24.05 0 0 ]msf
609.2 96.87 mo
(a)sh
SFCUQT+Tahoma*1 [24.05 0 0 -24.05 0 0 ]msf
559.65 96.87 mo
(a)sh
SFCUQT+Tahoma*1 [24.05 0 0 -24.05 0 0 ]msf
509.97 96.87 mo
(a)sh
SFCUQT+Tahoma*1 [24.05 0 0 -24.05 0 0 ]msf
461.02 96.87 mo
(a)sh
SFCUQT+Tahoma*1 [24.05 0 0 -24.05 0 0 ]msf
461.02 146.13 mo
(a)sh
SFCUQT+Tahoma*1 [24.025 0 0 -24.025 0 0 ]msf
510.28 146.05 mo
(a)sh
SFCUQT+Tahoma*1 [24.025 0 0 -24.025 0 0 ]msf
559.65 146.05 mo
(a)sh
SFCUQT+Tahoma*1 [24.025 0 0 -24.025 0 0 ]msf
608.9 146.05 mo
(a)sh
SFCUQT+Tahoma*1 [24.05 0 0 -24.05 0 0 ]msf
608.9 195.575 mo
(a)sh
SFCUQT+Tahoma*1 [24.05 0 0 -24.05 0 0 ]msf
559.53 195.625 mo
(a)sh
SFCUQT+Tahoma*1 [24.05 0 0 -24.05 0 0 ]msf
510.28 195.625 mo
(a)sh
SFCUQT+Tahoma*1 [24.05 0 0 -24.05 0 0 ]msf
461.17 195.625 mo
(a)sh
SFCUQT+Tahoma*1 [24.025 0 0 -24.025 0 0 ]msf
115.87 47.6 mo
(a)sh
SFCUQT+Tahoma*1 [24.025 0 0 -24.025 0 0 ]msf
165.35 47.6 mo
(a)sh
SFCUQT+Tahoma*1 [24.025 0 0 -24.025 0 0 ]msf
214.6 47.6 mo
(a)sh
SFCUQT+Tahoma*1 [24.025 0 0 -24.025 0 0 ]msf
264.13 47.6 mo
(a)sh
SFCUQT+Tahoma*1 [24.05 0 0 -24.05 0 0 ]msf
264.13 96.87 mo
(a)sh
SFCUQT+Tahoma*1 [24.05 0 0 -24.05 0 0 ]msf
214.6 96.87 mo
(a)sh
SFCUQT+Tahoma*1 [24.05 0 0 -24.05 0 0 ]msf
164.93 96.87 mo
(a)sh
SFCUQT+Tahoma*1 [24.05 0 0 -24.05 0 0 ]msf
115.97 96.87 mo
(a)sh
SFCUQT+Tahoma*1 [24.05 0 0 -24.05 0 0 ]msf
115.97 146.13 mo
(a)sh
SFCUQT+Tahoma*1 [24.025 0 0 -24.025 0 0 ]msf
165.23 146.05 mo
(a)sh
SFCUQT+Tahoma*1 [24.025 0 0 -24.025 0 0 ]msf
214.6 146.05 mo
(a)sh
SFCUQT+Tahoma*1 [24.025 0 0 -24.025 0 0 ]msf
263.83 146.05 mo
(a)sh
SFCUQT+Tahoma*1 [24.05 0 0 -24.05 0 0 ]msf
263.83 195.575 mo
(a)sh
SFCUQT+Tahoma*1 [24.05 0 0 -24.05 0 0 ]msf
214.45 195.625 mo
(a)sh
SFCUQT+Tahoma*1 [24.05 0 0 -24.05 0 0 ]msf
165.23 195.625 mo
(a)sh
SFCUQT+Tahoma*1 [24.05 0 0 -24.05 0 0 ]msf
116.12 195.625 mo
(a)sh
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQT+Tahoma gcheck setglobal} if
2 2300 49 <00010097000004c005d100090182b0852b58404e0b400b0b023b7607010c
071b07240734074507500769026107790271070a0f0100061f0111062601
3406440653066b0160067c0170060c0c010406025a0155060201060d1106
3b010c0b0c063b06b8fff440110b11063b02070108060301040806010207
b8fffcb40c0c023b07b8fff4b40c0c063b07410afff2000c000c01400056
0007fff4000b000b0140400a56071300200f0f063b00b8fff0b41010063b
00b8fff640110c0c023b000e0b0b023b00160d0d023b00b8fffeb40c0c06
3b00b8fffeb40d0d063b00b8ffe6401c0b0b063b00650b0f0b400b020204
0c0c023b02040c0c063b020e0c0cb80140b456020c0b0bb80140b3560213
04b8fff0b41010063b04b8fffeb40d0d023b04b8fff840110f0f063b0402
0c0c063b040c0d0d063b04b8ffc6b60b0b063b04640a10f62b2b2b2b2b2b
ed2b2b2b2b5d10f62b2b2b2b2b2b2b2bfd2b2b2b2b113939003f3c3f3c12
39393130012b2b2b72715d005d5d012b1b40090207010806030104080018
3fc43fc41239393031592123011123112101113304c0defd6eb901190257
b90504fafc05d1fb65049b00>SFCUQT+Tahoma AddT42Char 
SFCUQT+Tahoma /CharStrings get begin
/N 49 def
end
SFCUQT+Tahoma /Encoding get
dup 78 /N put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQT+Tahoma*1 
[78{/.notdef}rp /N 3{/.notdef}rp /R /S 13{/.notdef}rp /a 4{/.notdef}rp 
/f /.notdef /h /i 5{/.notdef}rp /o 3{/.notdef}rp /s 
/t 2{/.notdef}rp /w 136{/.notdef}rp]
SFCUQT+Tahoma nf
SFCUQT+Tahoma*1 [16.05 0 0 -16.05 0 0 ]msf
64.675 38.5 mo
(No)
[11.0005 0 ]xsh
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQT+Tahoma gcheck setglobal} if
2 4452 70 <0001003bffe7038e047700270161b0852b58b1060243545840362f103f10
02100f173f0c04221d2021302102211d3f00090f222229281a0612101006
3b06160f0f063b061c0c0c063b06160d0d063b06b8ffe0b70b0b063b0606
29281112392f2b2b2b2b2bcd1112392fb00b4b5458b90022ffea3859c000
3fedcd5d12393fed39cd5d31301b40143b19311b4d19401b5902550a0622
400e10003b21b8ffc040090b0d3710400b0d370fb8ffc040140e11003b10
100f173f0c042121221d3f00090f22b8ffc0400d091d372222295f29011a
0c0b0bb80140b4561a020d0db80140b4561a040c0cb80140b6561a1b061c
0c0cb80140b45606160d0db80140b45606160b0bb80140401c5606160f0f
023b061a0b0b023b061a0c0c023b061a0d0d023b06702810f42b2b2b2b2b
2b2bed2b2b2b5d11332f2b3c003fed33332f3fed33332f2b2b2b2b31305d
591b401210100f0c173f6c0c04212122001d3f6c000900183f2b33332f3f
2b33332f3031590522262726263534363736363332161715232626272626
2322061514163332363733150606070606024473c045454c4f4242c5715c
ab430b143f2d276a3192b1ab985ca6400b1c5422304c19474848db9493d6
49494f3422d3112c17141eddcac6dd4c3cd30d25090e0f00>SFCUQT+Tahoma AddT42Char 
2 5476 72 <0002003bffe60400047c001e002b01fdb0852b58b1060243545840152b3c
0e0e00253d06042018011818113f0009191f0db8fff4b41010063b0db8ff
eab40f0f063b0db8ffeab40d0d063b0db8ffe0b40c0c063b0db8ffd6400a
0b0b063b0d0d2d2c2b0eb8fff8401e0f0f063b0e03101010063b03160f0f
063b03120d0d063b031e0c0c063b03b8ffdcb70b0b063b03032d2c111239
2f2b2b2b2b2bdd2bc01112392f2b2b2b2b2bcdc6003fed332f5d3fed1239
2fed31301b40212d400c0c023b250f2d1a340f450f59229904aa04072518
0c0d3719300c0f003b06b8fff8b60f10003b2b3c0eb8ffc0b61213370e0e
0025bbffea000c000d0140401256253d0604181819113f0009670c011919
1f410afffa000d000d01400056001ffff4000b000c0140b3561f1a0cbeff
ea000d000d01400056000cffe4b41010023b0cb8ffe6400f0d0d023b0c71
2d3f2d012b0e0c0b0bb80140b4560e020d0db80140b4560e0c0c0cb80140
400d560e100c0c023b0e1a031c0c0cb80140b45603160d0db80140b45603
160b0bb8014040225603161010023b03160f0f023b031a0d0d023b031a0c
0c023b03200b0b023b03702c10f62b2b2b2b2b2b2b2bfd2b2b2b2b3c5d10
f62b2b2bed2b2b332f5d003fed33332f3fed2b12392f2bed2b2b2b31305d
012b59001b40160e2b3c6c0e0e0006253d6c060418181900113f6c000900
183f2b33332f3f2b12392f2b303159052000111000333216171616151521
141633323637363637331506060706061326262726262322060706060702
6dfef5fed9011ee768a03c3c40fcfac4ad3e77303346170b216227375998
02201e21674c4b692b2a2c061a012d0115011101433c4040b98666c3ce1c
16172b13cd0d270b0f1002c54c6e262a2c2d2b2c6b47>SFCUQT+Tahoma AddT42Char 
2 6496 74 <0002003bfe5903e4047c000c003301eeb0852b58b1060243545840232a05
012904402604001a0a411d07333313402f0d29001a101010063b1a020f0f
063b1ab8ffe840230b0b063b1a1a3534320720101010063b20140f0f063b
20100d0d063b20140c0c063b20b8ffdab70b0b063b202035341112392f2b
2b2b2b2bcdc41112392f2b2b2bd0c0003fed332f3fed33333fed33333f31
301b403235400b0b023b3e0634083c0c3c1b4c064508490c7d017d310940
33012f180e0f37491d012a05012904402604001a0a120d0db80140b3560a
411dbbffee000d000d0140400f561d07333313402f0d0f320129001a410d
fff4000b000c01400056001afffa000d000d01400056001afff8b60c0c02
3b1a1a2cbbfffa000d000d0140b7562c1a1010023b2cb8ffee40190d0d02
3b2c060c0c023b2c200b0b023b2c6f35323207020d0db80140b45607040c
0cb80140b456070c0b0bb80140b656071b201c0c0cb80140b45620160d0d
b80140b45620160b0bb8014040225620161010023b20160f0f023b201a0d
0d023b201a0c0c023b20200b0b023b20703410f42b2b2b2b2b2b2b2bed2b
2b2b332f10f42b2b2b2b2bfd2b2b2b3c3c5d003fed332f3f2bed2b33333f
ed33333f5d2b5d31305d012b591b401a2a0501292604406c2604001a1d0a
416c1d0733332f13406c2f0d00183f2b332f3f2b33333f2b33333f303159
011126262322061514163332360116161716163332363736363535060623
22021134363736363332161737331110022322262735032846773b8fa47d
8c499bfdc6134a2f345834577922201a4c926ebfe24e423fac5c577f400b
b1f8ff52ab4a012f0265221dd2c4bac23afe52081b0c0d102e29296c4562
423f011c010a8bd74b484e292630fc22fee4fef61a16c400>SFCUQT+Tahoma AddT42Char 
2 8194 81 <00010088000003f6047c001601c0b0852b58b10602435458400d0b100842
13040e0601080d0800b8fff8b50c0c063b0001b8ffe0b41010063b01b8ff
fab40d0d063b01b8fff4b40c0c063b01b8ffe4400a0b0b063b0101181710
0cb8fff8b50c0c063b0c0db8fff4400b0f0f063b0d080d0d063b0db8ffca
b70b0b063b0d0d18171112392f2b2b2bdd2bc01112392f2b2b2b2bcd2b00
3f3f3f3fed393231301b401303151615761503100d084213040e05010d08
014113fff4000b000b014000560001fff4000c000c014000560001fffa00
0d000d014000560001fff8400d0c0c023b011a00161010023b00b8fffeb4
0f0f023b00b8ffea400b0d0d023b00060c0c023b00b8ffeab40b0b023b00
410afffa000d000d014000560000fffa000b000b0140400956006f18100b
0c0c0cb80140b4560b060d0db80140b4560b0c0b0bb80140400d560b080c
0c023b0b1a0d080d0db80140b4560d060c0cb80140b4560d060b0bbb0140
0056000dfff640191010023b0d020d0d023b0d060c0c023b0d020b0b023b
0d6e1710f62b2b2b2b2b2b2bfd2b2b2b2b3210f42b2b2b2b2b2b2bed2b2b
2b2b003f3c3f3fed123931305d591b400d100d1308426c13040e05010d08
00183fc43f3f2b1239303159212311342627262623220607112311331536
363332161503f6bc0f15175247469547bcbc54a45ba5ba027c4d85282a29
4b3cfcbe045d7c4b50d9ce00>SFCUQT+Tahoma AddT42Char 
SFCUQT+Tahoma /CharStrings get begin
/c 70 def
/e 72 def
/g 74 def
/n 81 def
end
SFCUQT+Tahoma /Encoding get
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 110 /n put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQT+Tahoma*1 
[78{/.notdef}rp /N 3{/.notdef}rp /R /S 13{/.notdef}rp /a /.notdef 
/c /.notdef /e /f /g /h /i 4{/.notdef}rp 
/n /o 3{/.notdef}rp /s /t 2{/.notdef}rp /w 136{/.notdef}rp]
SFCUQT+Tahoma nf
SFCUQT+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
49.1 58.15 mo
(change)
[7.48365 8.99001 8.47713 8.99001 8.98993 0 ]xsh
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQT+Tahoma gcheck setglobal} if

2 0 3 <> SFCUQT+Tahoma AddT42Char 
SFCUQT+Tahoma /CharStrings get begin
/space 3 def
end
SFCUQT+Tahoma /Encoding get
dup 32 /space put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQT+Tahoma*1 
[32{/.notdef}rp /space 45{/.notdef}rp /N 3{/.notdef}rp /R /S 13{/.notdef}rp 
/a /.notdef /c /.notdef /e /f /g /h 
/i 4{/.notdef}rp /n /o 3{/.notdef}rp /s /t 2{/.notdef}rp 
/w 136{/.notdef}rp]
SFCUQT+Tahoma nf
SFCUQT+Tahoma*1 [16.05 0 0 -16.05 0 0 ]msf
52.25 100.05 mo
(Shift )
[9.00416 9.00403 3.49896 5.48899 5.00759 0 ]xsh
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQT+Tahoma gcheck setglobal} if
2 864 20 <000100e2000003b805d6000c00bcb0852b58401a05b6060609030b03b801
082f0001af000100050100090b020d0db80140b4560b0c0c0cb80140b456
0b0c0b0bb801404010560b080c0c023b0b2001200380030203b8ffeeb40d
0d023b03b8fffe400b0c0c023b030c0b0b023b03b8fff4b40c0c063b03b8
fff4400e0d0d063b030c0b0b063b03030e0d1112392f2b2b2b2b2b2b5d33
ed2b2b2b2b39322f332f5d71003ffd3c3f332fed31301b400f0605b66c06
0609030b0103b86c010800183f2bc43f332f2b3031592121352111213532
363733112103b8fd2a010efef29991099b01089803e6885779fac200>SFCUQT+Tahoma AddT42Char 
SFCUQT+Tahoma /CharStrings get begin
/one 20 def
end
SFCUQT+Tahoma /Encoding get
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQT+Tahoma*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one 28{/.notdef}rp /N 3{/.notdef}rp /R 
/S 13{/.notdef}rp /a /.notdef /c /.notdef /e /f 
/g /h /i 4{/.notdef}rp /n /o 3{/.notdef}rp /s 
/t 2{/.notdef}rp /w 136{/.notdef}rp]
SFCUQT+Tahoma nf
SFCUQT+Tahoma*1 [16.05 0 0 -16.05 0 0 ]msf
89.55 100.05 mo
(1)sh
SFCUQT+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
52.45 149.13 mo
(Shift )
[8.99014 8.99 3.49352 5.48044 4.99979 0 ]xsh
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQT+Tahoma gcheck setglobal} if
2 1102 21 <0001006d0000040405f0002600a9b0852b5840331a2225172b1f2b213c05
361739234c054617492354175a215b226517601b7417771b7b207f221314
140eba19020225ba010825b8ffc0b50b1037262608bbfff4000b000b0140
401b5608213f1c4f1c021c1a0c0c023b1c1625161c032f0201c0020102b8
ffc0b30a0d37022f2b5d7117332f2f2b5ded2b332f2b003ffd323fed332f
31305d1b400f1414190eba6c1902020125ba6c010800183f2b323f2b332f
303159212135363637363635342627262623220607060607233536363332
1615140607060607060607210404fc6963b054aa7c2722235c37356d322a
4e180b3edd63d0ec292425683a5ee74502dcd15eac5dbbe1783e5e1f1e1e
1b14113011d41f3bddbd57943f41803e66dc4000>SFCUQT+Tahoma AddT42Char 
SFCUQT+Tahoma /CharStrings get begin
/two 21 def
end
SFCUQT+Tahoma /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQT+Tahoma*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 27{/.notdef}rp /N 3{/.notdef}rp 
/R /S 13{/.notdef}rp /a /.notdef /c /.notdef /e 
/f /g /h /i 4{/.notdef}rp /n /o 3{/.notdef}rp 
/s /t 2{/.notdef}rp /w 136{/.notdef}rp]
SFCUQT+Tahoma nf
SFCUQT+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
89.75 149.13 mo
(2)sh
SFCUQT+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
52.25 198.875 mo
(Shift )
[9.00616 9.00603 3.49351 5.48045 4.99979 0 ]xsh
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQT+Tahoma gcheck setglobal} if
2 1392 22 <00010061ffe103ea05f00040010fb0852b58405b160e2609291529233609
32123a23342d353a450944124a23442d443a55095a165a23552c5c31533a
6309600e630f641969237509700e710f79231d15143635b9603801383821
0b070700ba0b02252529ba210a363b080d0d063b3bbbfff4000b000b0140
400a563b211136141103242fbbfff4000b000b0140400f562f213f1b801b
021b160c0c023b1bb8fff4b40b0b023b1bb8fff8400c0d0d063b1b081b08
60240124b8ffc0b30b0d37242f2b5d33332f2f2b2b2b5ded2b1217392fed
2b2b2f003fed332f3fed332f1112392f5ded12393931305d1b401b151436
3835b96c3838210b07070b00ba6c0b0225252129ba6c210a00183f2b332f
3f2b332f1112392f2b123939303159012206070606072335363633321617
161615140607151616171616151406070606232226273533161633323637
363635342627262623233533323635342627262601ff366c3430471c0c41
df6565973d4243a2712f6b2e2e3a453f41b87570dc4b0e3fd46a3d7b2928
2a2f2a2a7343554287a92c22265c05431a15142c13d32339292b30885b7b
ba190e092c2b2b876165a94144463626d32e54272c2c6a5151681e1e17a6
807a3851181a1400>SFCUQT+Tahoma AddT42Char 
SFCUQT+Tahoma /CharStrings get begin
/three 22 def
end
SFCUQT+Tahoma /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQT+Tahoma*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two /three 26{/.notdef}rp /N 
3{/.notdef}rp /R /S 13{/.notdef}rp /a /.notdef /c /.notdef 
/e /f /g /h /i 4{/.notdef}rp /n /o 
3{/.notdef}rp /s /t 2{/.notdef}rp /w 136{/.notdef}rp]
SFCUQT+Tahoma nf
SFCUQT+Tahoma*1 [16.025 0 0 -16.025 0 0 ]msf
89.55 198.875 mo
(3)sh
86.868 203.068 mo
86.868 204.579 li
71.761 204.579 li
71.761 208.687 li
62.57 204.075 li
71.737 199.291 li
71.71 203.127 li
86.868 203.068 li
cp
ef
.75 lw
1 lc
1 lj
86.868 203.068 mo
86.868 204.579 li
71.761 204.579 li
71.761 208.687 li
62.57 204.075 li
71.737 199.291 li
71.71 203.127 li
86.868 203.068 li
cp
@
86.916 153.97 mo
86.916 155.48 li
71.808 155.48 li
71.808 159.59 li
62.618 154.98 li
71.785 150.2 li
71.757 154.03 li
86.916 153.97 li
cp
ef
86.916 153.97 mo
86.916 155.48 li
71.808 155.48 li
71.808 159.59 li
62.618 154.98 li
71.785 150.2 li
71.757 154.03 li
86.916 153.97 li
cp
@
86.861 104.59 mo
86.861 106.1 li
71.753 106.1 li
71.753 110.21 li
62.563 105.6 li
71.73 100.82 li
71.702 104.65 li
86.861 104.59 li
cp
ef
86.861 104.59 mo
86.861 106.1 li
71.753 106.1 li
71.753 110.21 li
62.563 105.6 li
71.73 100.82 li
71.702 104.65 li
86.861 104.59 li
cp
@
243.492 116.858 mo
235.854 116.858 li
235.383 112.139 li
243.824 116.606 li
243.492 116.858 li
.687922 .43946 .408392 .0994583 cmyk
f
243.461 116.881 mo
235.856 116.881 li
235.854 116.858 li
243.492 116.858 li
243.461 116.881 li
.75021 .679683 .670222 .90164 cmyk
f
248.503 123.845 mo
248.5 123.845 248.496 123.845 248.493 123.845 cv
245.552 123.841 242.751 122.597 240.055 119.705 cv
239.981 119.626 239.881 119.585 239.78 119.585 cv
239.707 119.585 239.634 119.606 239.57 119.649 cv
236.351 121.827 li
235.969 118.006 li
241.974 118.006 li
241.094 118.671 li
241.014 118.731 240.961 118.822 240.948 118.922 cv
240.935 119.021 240.963 119.122 241.025 119.201 cv
243.027 121.773 245.45 122.884 248.008 122.884 cv
248.015 122.884 248.023 122.884 248.03 122.884 cv
249.598 122.88 251.208 122.482 252.827 121.793 cv
252.827 123.007 li
251.348 123.555 249.905 123.845 248.503 123.845 cv
.687922 .43946 .408392 .0994583 cmyk
f
241.974 118.006 mo
235.969 118.006 li
235.856 116.881 li
243.461 116.881 li
241.974 118.006 li
.75021 .679683 .670222 .90164 cmyk
f
262.153 116.797 mo
260.399 116.797 li
260.466 116.74 260.532 116.683 260.599 116.625 cv
264.575 113.168 268.259 108.885 271.013 105.393 cv
271.94 106.055 li
268.614 110.209 265.339 113.884 262.153 116.797 cv
.758633 .455085 .394537 .108949 cmyk
f
262.128 116.82 mo
260.372 116.82 li
260.381 116.813 260.39 116.805 260.399 116.797 cv
262.153 116.797 li
262.145 116.805 262.137 116.813 262.128 116.82 cv
.75021 .679683 .670222 .90164 cmyk
f
253.953 122.544 mo
253.953 121.269 li
255.649 120.413 257.348 119.266 259.011 117.945 cv
260.856 117.945 li
260.515 118.237 260.175 118.519 259.836 118.791 cv
257.827 120.409 255.862 121.68 253.953 122.544 cv
.758633 .455085 .394537 .108949 cmyk
f
252.827 123.007 mo
252.827 121.793 li
253.202 121.633 253.577 121.458 253.953 121.269 cv
253.953 122.544 li
253.575 122.714 253.2 122.869 252.827 123.007 cv
260.856 117.945 mo
259.011 117.945 li
259.468 117.583 259.922 117.207 260.372 116.82 cv
262.128 116.82 li
261.703 117.209 261.278 117.585 260.856 117.945 cv
.75021 .679683 .670222 .90164 cmyk
f
244.735 116.858 mo
244.113 116.858 li
244.52 116.55 li
234.94 111.48 li
235.477 116.858 li
235.1 116.858 li
234.567 111.517 li
234.553 111.379 234.616 111.246 234.731 111.169 cv
234.794 111.126 234.867 111.105 234.94 111.105 cv
235 111.105 235.06 111.119 235.115 111.149 cv
235.115 111.149 li
244.695 116.219 li
244.808 116.278 244.884 116.393 244.894 116.52 cv
244.904 116.647 244.848 116.772 244.746 116.849 cv
244.735 116.858 li
.687922 .43946 .408392 .0994583 cmyk
f
244.705 116.881 mo
244.083 116.881 li
244.113 116.858 li
244.735 116.858 li
244.705 116.881 li
235.48 116.881 mo
235.103 116.881 li
235.1 116.858 li
235.477 116.858 li
235.48 116.881 li
.75021 .679683 .670222 .90164 cmyk
f
248.481 124.595 mo
245.404 124.595 242.453 123.29 239.726 120.449 cv
236.25 122.801 li
236.187 122.843 236.114 122.865 236.04 122.865 cv
235.986 122.865 235.931 122.853 235.881 122.83 cv
235.762 122.774 235.68 122.658 235.667 122.527 cv
235.215 118.006 li
235.592 118.006 li
236.04 122.49 li
239.78 119.96 li
242.524 122.909 245.44 124.22 248.493 124.22 cv
249.909 124.22 251.356 123.937 252.827 123.407 cv
252.827 123.805 li
251.365 124.319 249.92 124.593 248.493 124.595 cv
248.489 124.595 248.485 124.595 248.481 124.595 cv
248.03 122.509 mo
245.571 122.509 243.278 121.474 241.32 118.97 cv
242.595 118.006 li
243.217 118.006 li
241.855 119.035 li
243.702 121.245 245.778 122.128 248.03 122.134 cv
248.037 122.134 248.045 122.134 248.052 122.134 cv
249.573 122.134 251.183 121.71 252.827 120.973 cv
252.827 121.383 li
251.192 122.098 249.578 122.509 248.03 122.509 cv
.687922 .43946 .408392 .0994583 cmyk
f
243.217 118.006 mo
242.595 118.006 li
244.083 116.881 li
244.705 116.881 li
243.217 118.006 li
235.592 118.006 mo
235.215 118.006 li
235.103 116.881 li
235.48 116.881 li
235.592 118.006 li
.75021 .679683 .670222 .90164 cmyk
f
263.256 116.797 mo
262.707 116.797 li
265.898 113.837 269.165 110.139 272.48 105.98 cv
270.94 104.88 li
268.051 108.563 264.077 113.203 259.822 116.797 cv
259.239 116.797 li
259.529 116.556 259.819 116.31 260.107 116.059 cv
264.132 112.56 267.885 108.168 270.645 104.649 cv
270.719 104.555 270.829 104.505 270.94 104.505 cv
271.016 104.505 271.092 104.528 271.158 104.575 cv
272.698 105.675 li
272.782 105.735 272.837 105.826 272.851 105.928 cv
272.866 106.03 272.837 106.133 272.773 106.214 cv
269.552 110.254 266.373 113.866 263.256 116.797 cv
.758633 .455085 .394537 .108949 cmyk
f
263.231 116.82 mo
262.682 116.82 li
262.69 116.813 262.699 116.805 262.707 116.797 cv
263.256 116.797 li
263.248 116.805 263.24 116.813 263.231 116.82 cv
259.794 116.82 mo
259.211 116.82 li
259.22 116.813 259.229 116.805 259.239 116.797 cv
259.822 116.797 li
259.812 116.805 259.803 116.813 259.794 116.82 cv
.75021 .679683 .670222 .90164 cmyk
f
253.953 123.364 mo
253.953 122.955 li
256.383 121.882 258.881 120.164 261.43 117.945 cv
261.999 117.945 li
261.432 118.447 260.868 118.924 260.306 119.376 cv
258.158 121.103 256.038 122.465 253.953 123.364 cv
253.953 120.847 mo
253.953 120.423 li
255.227 119.751 256.514 118.908 257.79 117.945 cv
258.405 117.945 li
256.933 119.087 255.438 120.081 253.953 120.847 cv
.758633 .455085 .394537 .108949 cmyk
f
252.827 123.805 mo
252.827 123.407 li
253.201 123.272 253.575 123.121 253.953 122.955 cv
253.953 123.364 li
253.576 123.526 253.201 123.673 252.827 123.805 cv
252.827 121.383 mo
252.827 120.973 li
253.201 120.805 253.576 120.621 253.953 120.423 cv
253.953 120.847 li
253.577 121.041 253.201 121.22 252.827 121.383 cv
261.999 117.945 mo
261.43 117.945 li
261.846 117.583 262.263 117.209 262.682 116.82 cv
263.231 116.82 li
262.819 117.208 262.409 117.583 261.999 117.945 cv
258.405 117.945 mo
257.79 117.945 li
258.266 117.586 258.74 117.21 259.211 116.82 cv
259.794 116.82 li
259.334 117.209 258.871 117.584 258.405 117.945 cv
.75021 .679683 .670222 .90164 cmyk
f
244.113 116.858 mo
243.492 116.858 li
243.824 116.606 li
235.383 112.139 li
235.854 116.858 li
235.477 116.858 li
234.94 111.48 li
244.52 116.55 li
244.113 116.858 li
.784482 .619745 .569421 .492988 cmyk
f
244.083 116.881 mo
243.461 116.881 li
243.492 116.858 li
244.113 116.858 li
244.083 116.881 li
235.856 116.881 mo
235.48 116.881 li
235.477 116.858 li
235.854 116.858 li
235.856 116.881 li
.75021 .679683 .670222 .90164 cmyk
f
248.493 124.22 mo
245.44 124.22 242.524 122.909 239.78 119.96 cv
236.04 122.49 li
235.592 118.006 li
235.969 118.006 li
236.351 121.827 li
239.57 119.649 li
239.634 119.606 239.707 119.585 239.78 119.585 cv
239.881 119.585 239.981 119.626 240.055 119.705 cv
242.751 122.597 245.552 123.841 248.493 123.845 cv
248.496 123.845 248.5 123.845 248.503 123.845 cv
249.905 123.845 251.348 123.555 252.827 123.007 cv
252.827 123.407 li
251.356 123.937 249.909 124.22 248.493 124.22 cv
248.008 122.884 mo
245.45 122.884 243.027 121.773 241.025 119.201 cv
240.963 119.122 240.935 119.021 240.948 118.922 cv
240.961 118.822 241.014 118.731 241.094 118.671 cv
241.974 118.006 li
242.595 118.006 li
241.32 118.97 li
243.278 121.474 245.571 122.509 248.03 122.509 cv
249.578 122.509 251.192 122.098 252.827 121.383 cv
252.827 121.793 li
251.208 122.482 249.598 122.88 248.03 122.884 cv
248.023 122.884 248.015 122.884 248.008 122.884 cv
.784482 .619745 .569421 .492988 cmyk
f
242.595 118.006 mo
241.974 118.006 li
243.461 116.881 li
244.083 116.881 li
242.595 118.006 li
235.969 118.006 mo
235.592 118.006 li
235.48 116.881 li
235.856 116.881 li
235.969 118.006 li
.75021 .679683 .670222 .90164 cmyk
f
262.707 116.797 mo
262.153 116.797 li
265.339 113.884 268.614 110.209 271.94 106.055 cv
271.013 105.393 li
268.259 108.885 264.575 113.168 260.599 116.625 cv
260.532 116.683 260.466 116.74 260.399 116.797 cv
259.822 116.797 li
264.077 113.203 268.051 108.563 270.94 104.88 cv
272.48 105.98 li
269.165 110.139 265.898 113.837 262.707 116.797 cv
.833036 .627436 .562097 .49897 cmyk
f
262.682 116.82 mo
262.128 116.82 li
262.137 116.813 262.145 116.805 262.153 116.797 cv
262.707 116.797 li
262.699 116.805 262.69 116.813 262.682 116.82 cv
260.372 116.82 mo
259.794 116.82 li
259.803 116.813 259.812 116.805 259.822 116.797 cv
260.399 116.797 li
260.39 116.805 260.381 116.813 260.372 116.82 cv
.75021 .679683 .670222 .90164 cmyk
f
253.953 122.955 mo
253.953 122.544 li
255.862 121.68 257.827 120.409 259.836 118.791 cv
260.175 118.519 260.515 118.237 260.856 117.945 cv
261.43 117.945 li
258.881 120.164 256.383 121.882 253.953 122.955 cv
253.953 121.269 mo
253.953 120.847 li
255.438 120.081 256.933 119.087 258.405 117.945 cv
259.011 117.945 li
257.348 119.266 255.649 120.413 253.953 121.269 cv
.833036 .627436 .562097 .49897 cmyk
f
252.827 123.407 mo
252.827 123.007 li
253.2 122.869 253.575 122.714 253.953 122.544 cv
253.953 122.955 li
253.575 123.121 253.201 123.272 252.827 123.407 cv
252.827 121.793 mo
252.827 121.383 li
253.201 121.22 253.577 121.041 253.953 120.847 cv
253.953 121.269 li
253.577 121.458 253.202 121.633 252.827 121.793 cv
261.43 117.945 mo
260.856 117.945 li
261.278 117.585 261.703 117.209 262.128 116.82 cv
262.682 116.82 li
262.263 117.209 261.846 117.583 261.43 117.945 cv
259.011 117.945 mo
258.405 117.945 li
258.871 117.584 259.334 117.209 259.794 116.82 cv
260.372 116.82 li
259.922 117.207 259.468 117.583 259.011 117.945 cv
.75021 .679683 .670222 .90164 cmyk
f
194.214 116.858 mo
186.584 116.858 li
186.113 112.139 li
194.545 116.606 li
194.214 116.858 li
.636744 .434638 .415442 .0924086 cmyk
f
194.184 116.881 mo
186.586 116.881 li
186.584 116.858 li
194.214 116.858 li
194.184 116.881 li
.75021 .679683 .670222 .90164 cmyk
f
199.233 123.845 mo
199.23 123.845 199.226 123.845 199.223 123.845 cv
196.282 123.841 193.481 122.597 190.785 119.705 cv
190.711 119.626 190.611 119.585 190.51 119.585 cv
190.437 119.585 190.364 119.606 190.3 119.649 cv
187.081 121.827 li
186.699 118.006 li
192.701 118.006 li
191.823 118.671 li
191.744 118.732 191.691 118.822 191.678 118.922 cv
191.665 119.021 191.693 119.122 191.755 119.201 cv
193.757 121.773 196.18 122.884 198.738 122.884 cv
198.745 122.884 198.753 122.884 198.76 122.884 cv
200.389 122.88 202.064 122.45 203.748 121.71 cv
203.748 122.935 li
202.202 123.53 200.695 123.845 199.233 123.845 cv
.636744 .434638 .415442 .0924086 cmyk
f
192.701 118.006 mo
186.699 118.006 li
186.586 116.881 li
194.184 116.881 li
192.701 118.006 li
.75021 .679683 .670222 .90164 cmyk
f
212.818 116.858 mo
211.059 116.858 li
211.149 116.78 211.239 116.703 211.329 116.625 cv
215.305 113.168 218.989 108.885 221.743 105.393 cv
222.67 106.055 li
219.321 110.237 216.024 113.935 212.818 116.858 cv
.687922 .43946 .408392 .0994583 cmyk
f
212.792 116.881 mo
211.032 116.881 li
211.041 116.873 211.05 116.865 211.059 116.858 cv
212.818 116.858 li
212.809 116.865 212.801 116.873 212.792 116.881 cv
.75021 .679683 .670222 .90164 cmyk
f
204.872 122.457 mo
204.872 121.172 li
206.48 120.341 208.089 119.252 209.665 118.006 cv
211.516 118.006 li
211.198 118.276 210.882 118.538 210.566 118.791 cv
208.624 120.355 206.722 121.596 204.872 122.457 cv
.687922 .43946 .408392 .0994583 cmyk
f
203.748 122.935 mo
203.748 121.71 li
204.122 121.546 204.497 121.366 204.872 121.172 cv
204.872 122.457 li
204.495 122.632 204.12 122.792 203.748 122.935 cv
211.516 118.006 mo
209.665 118.006 li
210.124 117.643 210.58 117.267 211.032 116.881 cv
212.792 116.881 li
212.365 117.269 211.939 117.645 211.516 118.006 cv
.75021 .679683 .670222 .90164 cmyk
f
195.455 116.858 mo
194.835 116.858 li
195.24 116.55 li
185.67 111.48 li
186.207 116.858 li
185.83 116.858 li
185.297 111.517 li
185.283 111.379 185.346 111.246 185.461 111.169 cv
185.524 111.126 185.597 111.105 185.67 111.105 cv
185.73 111.105 185.79 111.119 185.846 111.149 cv
185.846 111.149 li
195.416 116.219 li
195.529 116.278 195.603 116.392 195.614 116.52 cv
195.624 116.647 195.568 116.772 195.467 116.849 cv
195.455 116.858 li
.636744 .434638 .415442 .0924086 cmyk
f
195.425 116.881 mo
194.804 116.881 li
194.835 116.858 li
195.455 116.858 li
195.425 116.881 li
186.21 116.881 mo
185.833 116.881 li
185.83 116.858 li
186.207 116.858 li
186.21 116.881 li
.75021 .679683 .670222 .90164 cmyk
f
199.211 124.595 mo
196.134 124.595 193.183 123.29 190.456 120.449 cv
186.98 122.801 li
186.917 122.843 186.844 122.865 186.77 122.865 cv
186.716 122.865 186.661 122.853 186.611 122.83 cv
186.492 122.774 186.41 122.658 186.397 122.527 cv
185.945 118.006 li
186.322 118.006 li
186.77 122.49 li
190.51 119.96 li
193.254 122.909 196.17 124.22 199.223 124.22 cv
200.7 124.22 202.21 123.913 203.748 123.337 cv
203.748 123.737 li
202.22 124.294 200.712 124.593 199.223 124.595 cv
199.219 124.595 199.215 124.595 199.211 124.595 cv
198.76 122.509 mo
196.301 122.509 194.008 121.474 192.05 118.97 cv
193.321 118.006 li
193.942 118.006 li
192.585 119.035 li
194.432 121.245 196.508 122.128 198.76 122.134 cv
198.767 122.134 198.775 122.134 198.782 122.134 cv
200.362 122.134 202.037 121.677 203.748 120.886 cv
203.748 121.299 li
202.048 122.065 200.368 122.509 198.76 122.509 cv
.636744 .434638 .415442 .0924086 cmyk
f
193.942 118.006 mo
193.321 118.006 li
194.804 116.881 li
195.425 116.881 li
193.942 118.006 li
186.322 118.006 mo
185.945 118.006 li
185.833 116.881 li
186.21 116.881 li
186.322 118.006 li
.75021 .679683 .670222 .90164 cmyk
f
213.922 116.858 mo
213.372 116.858 li
216.583 113.887 219.873 110.167 223.21 105.98 cv
221.67 104.88 li
218.765 108.584 214.763 113.255 210.48 116.858 cv
209.896 116.858 li
210.211 116.598 210.525 116.331 210.837 116.059 cv
214.862 112.56 218.615 108.168 221.375 104.649 cv
221.449 104.555 221.559 104.505 221.67 104.505 cv
221.746 104.505 221.822 104.528 221.888 104.575 cv
223.428 105.675 li
223.512 105.735 223.567 105.826 223.581 105.928 cv
223.596 106.03 223.567 106.133 223.503 106.214 cv
220.26 110.282 217.06 113.915 213.922 116.858 cv
.687922 .43946 .408392 .0994583 cmyk
f
213.897 116.881 mo
213.347 116.881 li
213.356 116.873 213.364 116.865 213.372 116.858 cv
213.922 116.858 li
213.914 116.865 213.906 116.873 213.897 116.881 cv
210.453 116.881 mo
209.868 116.881 li
209.878 116.873 209.887 116.865 209.896 116.858 cv
210.48 116.858 li
210.471 116.865 210.462 116.873 210.453 116.881 cv
.75021 .679683 .670222 .90164 cmyk
f
204.872 123.281 mo
204.872 122.87 li
207.221 121.802 209.632 120.138 212.091 118.006 cv
212.661 118.006 li
212.117 118.485 211.576 118.942 211.037 119.376 cv
208.953 121.051 206.897 122.382 204.872 123.281 cv
204.872 120.748 mo
204.872 120.322 li
206.058 119.681 207.254 118.896 208.44 118.006 cv
209.057 118.006 li
207.673 119.073 206.269 120.01 204.872 120.748 cv
.687922 .43946 .408392 .0994583 cmyk
f
203.748 123.737 mo
203.748 123.337 li
204.121 123.197 204.495 123.041 204.872 122.87 cv
204.872 123.281 li
204.496 123.448 204.122 123.6 203.748 123.737 cv
203.748 121.299 mo
203.748 120.886 li
204.121 120.713 204.496 120.525 204.872 120.322 cv
204.872 120.748 li
204.496 120.946 204.122 121.13 203.748 121.299 cv
212.661 118.006 mo
212.091 118.006 li
212.509 117.644 212.927 117.269 213.347 116.881 cv
213.897 116.881 li
213.484 117.268 213.072 117.643 212.661 118.006 cv
209.057 118.006 mo
208.44 118.006 li
208.918 117.647 209.395 117.271 209.868 116.881 cv
210.453 116.881 li
209.991 117.269 209.525 117.645 209.057 118.006 cv
.75021 .679683 .670222 .90164 cmyk
f
194.835 116.858 mo
194.214 116.858 li
194.545 116.606 li
186.113 112.139 li
186.584 116.858 li
186.207 116.858 li
185.67 111.48 li
195.24 116.55 li
194.835 116.858 li
.750088 .610224 .581018 .486519 cmyk
f
194.804 116.881 mo
194.184 116.881 li
194.214 116.858 li
194.835 116.858 li
194.804 116.881 li
186.586 116.881 mo
186.21 116.881 li
186.207 116.858 li
186.584 116.858 li
186.586 116.881 li
.75021 .679683 .670222 .90164 cmyk
f
199.223 124.22 mo
196.17 124.22 193.254 122.909 190.51 119.96 cv
186.77 122.49 li
186.322 118.006 li
186.699 118.006 li
187.081 121.827 li
190.3 119.649 li
190.364 119.606 190.437 119.585 190.51 119.585 cv
190.611 119.585 190.711 119.626 190.785 119.705 cv
193.481 122.597 196.282 123.841 199.223 123.845 cv
199.226 123.845 199.23 123.845 199.233 123.845 cv
200.695 123.845 202.202 123.53 203.748 122.935 cv
203.748 123.337 li
202.21 123.913 200.7 124.22 199.223 124.22 cv
198.738 122.884 mo
196.18 122.884 193.757 121.773 191.755 119.201 cv
191.693 119.122 191.665 119.021 191.678 118.922 cv
191.691 118.822 191.744 118.732 191.823 118.671 cv
192.701 118.006 li
193.321 118.006 li
192.05 118.97 li
194.008 121.474 196.301 122.509 198.76 122.509 cv
200.368 122.509 202.048 122.065 203.748 121.299 cv
203.748 121.71 li
202.064 122.45 200.389 122.88 198.76 122.884 cv
198.753 122.884 198.745 122.884 198.738 122.884 cv
.750088 .610224 .581018 .486519 cmyk
f
193.321 118.006 mo
192.701 118.006 li
194.184 116.881 li
194.804 116.881 li
193.321 118.006 li
186.699 118.006 mo
186.322 118.006 li
186.21 116.881 li
186.586 116.881 li
186.699 118.006 li
.75021 .679683 .670222 .90164 cmyk
f
213.372 116.858 mo
212.818 116.858 li
216.024 113.935 219.321 110.237 222.67 106.055 cv
221.743 105.393 li
218.989 108.885 215.305 113.168 211.329 116.625 cv
211.239 116.703 211.149 116.78 211.059 116.858 cv
210.48 116.858 li
214.763 113.255 218.765 108.584 221.67 104.88 cv
223.21 105.98 li
219.873 110.167 216.583 113.887 213.372 116.858 cv
.784482 .619745 .569421 .492988 cmyk
f
213.347 116.881 mo
212.792 116.881 li
212.801 116.873 212.809 116.865 212.818 116.858 cv
213.372 116.858 li
213.364 116.865 213.356 116.873 213.347 116.881 cv
211.032 116.881 mo
210.453 116.881 li
210.462 116.873 210.471 116.865 210.48 116.858 cv
211.059 116.858 li
211.05 116.865 211.041 116.873 211.032 116.881 cv
.75021 .679683 .670222 .90164 cmyk
f
204.872 122.87 mo
204.872 122.457 li
206.722 121.596 208.624 120.355 210.566 118.791 cv
210.882 118.538 211.198 118.276 211.516 118.006 cv
212.091 118.006 li
209.632 120.138 207.221 121.802 204.872 122.87 cv
204.872 121.172 mo
204.872 120.748 li
206.269 120.01 207.673 119.073 209.057 118.006 cv
209.665 118.006 li
208.089 119.252 206.48 120.341 204.872 121.172 cv
.784482 .619745 .569421 .492988 cmyk
f
203.748 123.337 mo
203.748 122.935 li
204.12 122.792 204.495 122.632 204.872 122.457 cv
204.872 122.87 li
204.495 123.041 204.121 123.197 203.748 123.337 cv
203.748 121.71 mo
203.748 121.299 li
204.122 121.13 204.496 120.946 204.872 120.748 cv
204.872 121.172 li
204.497 121.366 204.122 121.546 203.748 121.71 cv
212.091 118.006 mo
211.516 118.006 li
211.939 117.645 212.365 117.269 212.792 116.881 cv
213.347 116.881 li
212.927 117.269 212.509 117.644 212.091 118.006 cv
209.665 118.006 mo
209.057 118.006 li
209.525 117.645 209.991 117.269 210.453 116.881 cv
211.032 116.881 li
210.58 117.267 210.124 117.643 209.665 118.006 cv
.75021 .679683 .670222 .90164 cmyk
f
145.222 116.918 mo
137.67 116.918 li
137.193 112.139 li
145.634 116.606 li
145.222 116.918 li
.58941 .431373 .422095 .0862745 cmyk
f
145.192 116.94 mo
137.672 116.94 li
137.67 116.918 li
145.222 116.918 li
145.192 116.94 li
.75021 .679683 .670222 .90164 cmyk
f
150.313 123.845 mo
150.31 123.845 150.306 123.845 150.303 123.845 cv
147.361 123.841 144.561 122.597 141.864 119.705 cv
141.791 119.626 141.691 119.585 141.59 119.585 cv
141.517 119.585 141.444 119.606 141.38 119.649 cv
138.161 121.827 li
137.785 118.066 li
143.704 118.066 li
142.904 118.671 li
142.824 118.731 142.771 118.822 142.758 118.922 cv
142.745 119.021 142.773 119.122 142.835 119.201 cv
144.837 121.773 147.26 122.884 149.818 122.884 cv
149.825 122.884 149.832 122.884 149.84 122.884 cv
151.414 122.88 153.031 122.478 154.658 121.784 cv
154.658 123 li
153.171 123.553 151.721 123.845 150.313 123.845 cv
.58941 .431373 .422095 .0862745 cmyk
f
143.704 118.066 mo
137.785 118.066 li
137.672 116.94 li
145.192 116.94 li
143.704 118.066 li
.75021 .679683 .670222 .90164 cmyk
f
163.898 116.858 mo
162.139 116.858 li
162.229 116.78 162.319 116.703 162.409 116.625 cv
166.385 113.168 170.069 108.885 172.823 105.393 cv
173.75 106.055 li
170.401 110.237 167.103 113.935 163.898 116.858 cv
.636744 .434638 .415442 .0924086 cmyk
f
163.872 116.881 mo
162.112 116.881 li
162.121 116.873 162.13 116.865 162.139 116.858 cv
163.898 116.858 li
163.889 116.865 163.881 116.873 163.872 116.881 cv
.75021 .679683 .670222 .90164 cmyk
f
155.782 122.535 mo
155.782 121.259 li
157.447 120.417 159.113 119.295 160.745 118.006 cv
162.596 118.006 li
162.278 118.276 161.962 118.538 161.646 118.791 cv
159.644 120.403 157.686 121.672 155.782 122.535 cv
.636744 .434638 .415442 .0924086 cmyk
f
154.658 123 mo
154.658 121.784 li
155.032 121.624 155.407 121.449 155.782 121.259 cv
155.782 122.535 li
155.405 122.706 155.03 122.861 154.658 123 cv
162.596 118.006 mo
160.745 118.006 li
161.204 117.643 161.66 117.267 162.112 116.881 cv
163.872 116.881 li
163.445 117.269 163.019 117.645 162.596 118.006 cv
.75021 .679683 .670222 .90164 cmyk
f
146.466 116.918 mo
145.844 116.918 li
146.33 116.55 li
136.75 111.48 li
137.293 116.918 li
136.916 116.918 li
136.377 111.517 li
136.363 111.379 136.426 111.246 136.541 111.169 cv
136.604 111.126 136.677 111.105 136.75 111.105 cv
136.81 111.105 136.87 111.119 136.925 111.149 cv
136.925 111.149 li
146.505 116.219 li
146.618 116.278 146.693 116.393 146.704 116.52 cv
146.714 116.647 146.658 116.772 146.556 116.849 cv
146.466 116.918 li
.58941 .431373 .422095 .0862745 cmyk
f
146.435 116.94 mo
145.814 116.94 li
145.844 116.918 li
146.466 116.918 li
146.435 116.94 li
137.296 116.94 mo
136.919 116.94 li
136.916 116.918 li
137.293 116.918 li
137.296 116.94 li
.75021 .679683 .670222 .90164 cmyk
f
150.291 124.595 mo
147.214 124.595 144.263 123.29 141.536 120.449 cv
138.06 122.801 li
137.997 122.843 137.924 122.865 137.85 122.865 cv
137.796 122.865 137.741 122.853 137.691 122.83 cv
137.572 122.774 137.49 122.658 137.477 122.527 cv
137.031 118.066 li
137.408 118.066 li
137.85 122.49 li
141.59 119.96 li
144.334 122.909 147.25 124.22 150.303 124.22 cv
151.726 124.22 153.179 123.935 154.658 123.399 cv
154.658 123.798 li
153.188 124.316 151.737 124.593 150.303 124.595 cv
150.299 124.595 150.295 124.595 150.291 124.595 cv
149.84 122.509 mo
147.381 122.509 145.088 121.474 143.13 118.97 cv
144.326 118.066 li
144.948 118.066 li
143.665 119.035 li
145.512 121.245 147.588 122.128 149.84 122.134 cv
149.847 122.134 149.855 122.134 149.862 122.134 cv
151.389 122.134 153.006 121.707 154.658 120.964 cv
154.658 121.375 li
153.016 122.094 151.395 122.509 149.84 122.509 cv
.58941 .431373 .422095 .0862745 cmyk
f
144.948 118.066 mo
144.326 118.066 li
145.814 116.94 li
146.435 116.94 li
144.948 118.066 li
137.408 118.066 mo
137.031 118.066 li
136.919 116.94 li
137.296 116.94 li
137.408 118.066 li
.75021 .679683 .670222 .90164 cmyk
f
165.002 116.858 mo
164.452 116.858 li
167.663 113.887 170.953 110.167 174.29 105.98 cv
172.75 104.88 li
169.845 108.584 165.843 113.255 161.56 116.858 cv
160.976 116.858 li
161.291 116.598 161.605 116.331 161.917 116.059 cv
165.942 112.56 169.695 108.168 172.455 104.649 cv
172.529 104.555 172.639 104.505 172.75 104.505 cv
172.826 104.505 172.902 104.528 172.968 104.575 cv
174.508 105.675 li
174.592 105.735 174.647 105.826 174.661 105.928 cv
174.676 106.03 174.647 106.133 174.583 106.214 cv
171.34 110.282 168.14 113.915 165.002 116.858 cv
.636744 .434638 .415442 .0924086 cmyk
f
164.977 116.881 mo
164.427 116.881 li
164.436 116.873 164.444 116.865 164.452 116.858 cv
165.002 116.858 li
164.994 116.865 164.986 116.873 164.977 116.881 cv
161.533 116.881 mo
160.948 116.881 li
160.958 116.873 160.967 116.865 160.976 116.858 cv
161.56 116.858 li
161.551 116.865 161.542 116.873 161.533 116.881 cv
.75021 .679683 .670222 .90164 cmyk
f
155.782 123.356 mo
155.782 122.946 li
158.184 121.882 160.652 120.189 163.171 118.006 cv
163.741 118.006 li
163.197 118.485 162.656 118.942 162.117 119.376 cv
159.974 121.098 157.862 122.457 155.782 123.356 cv
155.782 120.837 mo
155.782 120.412 li
157.024 119.756 158.277 118.938 159.52 118.006 cv
160.137 118.006 li
158.697 119.117 157.235 120.085 155.782 120.837 cv
.636744 .434638 .415442 .0924086 cmyk
f
154.658 123.798 mo
154.658 123.399 li
155.031 123.264 155.405 123.113 155.782 122.946 cv
155.782 123.356 li
155.406 123.518 155.031 123.666 154.658 123.798 cv
154.658 121.375 mo
154.658 120.964 li
155.031 120.796 155.406 120.611 155.782 120.412 cv
155.782 120.837 li
155.407 121.031 155.032 121.211 154.658 121.375 cv
163.741 118.006 mo
163.171 118.006 li
163.589 117.644 164.007 117.269 164.427 116.881 cv
164.977 116.881 li
164.564 117.268 164.152 117.643 163.741 118.006 cv
160.137 118.006 mo
159.52 118.006 li
159.998 117.647 160.475 117.271 160.948 116.881 cv
161.533 116.881 li
161.071 117.269 160.605 117.645 160.137 118.006 cv
.75021 .679683 .670222 .90164 cmyk
f
145.844 116.918 mo
145.222 116.918 li
145.634 116.606 li
137.193 112.139 li
137.67 116.918 li
137.293 116.918 li
136.75 111.48 li
146.33 116.55 li
145.844 116.918 li
.721767 .609735 .586694 .480629 cmyk
f
145.814 116.94 mo
145.192 116.94 li
145.222 116.918 li
145.844 116.918 li
145.814 116.94 li
137.672 116.94 mo
137.296 116.94 li
137.293 116.918 li
137.67 116.918 li
137.672 116.94 li
.75021 .679683 .670222 .90164 cmyk
f
150.303 124.22 mo
147.25 124.22 144.334 122.909 141.59 119.96 cv
137.85 122.49 li
137.408 118.066 li
137.785 118.066 li
138.161 121.827 li
141.38 119.649 li
141.444 119.606 141.517 119.585 141.59 119.585 cv
141.691 119.585 141.791 119.626 141.864 119.705 cv
144.561 122.597 147.361 123.841 150.303 123.845 cv
150.306 123.845 150.31 123.845 150.313 123.845 cv
151.721 123.845 153.171 123.553 154.658 123 cv
154.658 123.399 li
153.179 123.935 151.726 124.22 150.303 124.22 cv
149.818 122.884 mo
147.26 122.884 144.837 121.773 142.835 119.201 cv
142.773 119.122 142.745 119.021 142.758 118.922 cv
142.771 118.822 142.824 118.731 142.904 118.671 cv
143.704 118.066 li
144.326 118.066 li
143.13 118.97 li
145.088 121.474 147.381 122.509 149.84 122.509 cv
151.395 122.509 153.016 122.094 154.658 121.375 cv
154.658 121.784 li
153.031 122.478 151.414 122.88 149.84 122.884 cv
149.832 122.884 149.825 122.884 149.818 122.884 cv
.721767 .609735 .586694 .480629 cmyk
f
144.326 118.066 mo
143.704 118.066 li
145.192 116.94 li
145.814 116.94 li
144.326 118.066 li
137.785 118.066 mo
137.408 118.066 li
137.296 116.94 li
137.672 116.94 li
137.785 118.066 li
.75021 .679683 .670222 .90164 cmyk
f
164.452 116.858 mo
163.898 116.858 li
167.103 113.935 170.401 110.237 173.75 106.055 cv
172.823 105.393 li
170.069 108.885 166.385 113.168 162.409 116.625 cv
162.319 116.703 162.229 116.78 162.139 116.858 cv
161.56 116.858 li
165.843 113.255 169.845 108.584 172.75 104.88 cv
174.29 105.98 li
170.953 110.167 167.663 113.887 164.452 116.858 cv
.750088 .610224 .581018 .486519 cmyk
f
164.427 116.881 mo
163.872 116.881 li
163.881 116.873 163.889 116.865 163.898 116.858 cv
164.452 116.858 li
164.444 116.865 164.436 116.873 164.427 116.881 cv
162.112 116.881 mo
161.533 116.881 li
161.542 116.873 161.551 116.865 161.56 116.858 cv
162.139 116.858 li
162.13 116.865 162.121 116.873 162.112 116.881 cv
.75021 .679683 .670222 .90164 cmyk
f
155.782 122.946 mo
155.782 122.535 li
157.686 121.672 159.644 120.403 161.646 118.791 cv
161.962 118.538 162.278 118.276 162.596 118.006 cv
163.171 118.006 li
160.652 120.189 158.184 121.882 155.782 122.946 cv
155.782 121.259 mo
155.782 120.837 li
157.235 120.085 158.697 119.117 160.137 118.006 cv
160.745 118.006 li
159.113 119.295 157.447 120.417 155.782 121.259 cv
.750088 .610224 .581018 .486519 cmyk
f
154.658 123.399 mo
154.658 123 li
155.03 122.861 155.405 122.706 155.782 122.535 cv
155.782 122.946 li
155.405 123.113 155.031 123.264 154.658 123.399 cv
154.658 121.784 mo
154.658 121.375 li
155.032 121.211 155.407 121.031 155.782 120.837 cv
155.782 121.259 li
155.407 121.449 155.032 121.624 154.658 121.784 cv
163.171 118.006 mo
162.596 118.006 li
163.019 117.645 163.445 117.269 163.872 116.881 cv
164.427 116.881 li
164.007 117.269 163.589 117.644 163.171 118.006 cv
160.745 118.006 mo
160.137 118.006 li
160.605 117.645 161.071 117.269 161.533 116.881 cv
162.112 116.881 li
161.66 117.267 161.204 117.643 160.745 118.006 cv
.75021 .679683 .670222 .90164 cmyk
f
144.747 166.027 mo
136.805 166.027 li
136.363 161.598 li
144.747 166.027 li
.58941 .431373 .422095 .0862745 cmyk
f
154.658 176.076 mo
149.035 174.578 144.277 172.266 141.03 169.144 cv
140.958 169.075 140.864 169.04 140.77 169.04 cv
140.697 169.04 140.624 169.061 140.56 169.104 cv
137.331 171.285 li
136.918 167.152 li
143.365 167.152 li
142.083 168.125 li
141.991 168.195 141.936 168.304 141.935 168.419 cv
141.934 168.535 141.986 168.645 142.076 168.717 cv
145.662 171.581 149.953 173.646 154.658 175.026 cv
154.658 176.076 li
f
143.365 167.152 mo
136.918 167.152 li
136.805 166.027 li
144.747 166.027 li
144.805 166.057 li
143.365 167.152 li
.75021 .679683 .670222 .90164 cmyk
f
171.819 178.14 mo
166.142 178.14 160.664 177.546 155.782 176.362 cv
155.782 175.34 li
160.681 176.647 165.991 177.239 171.399 177.24 cv
179.572 177.239 187.973 175.886 195.53 173.573 cv
196.023 173.831 196.53 174.079 197.049 174.318 cv
189.082 176.854 180.26 178.14 171.865 178.14 cv
171.864 178.14 171.861 178.14 171.86 178.14 cv
171.845 178.14 171.833 178.14 171.819 178.14 cv
.636744 .434638 .415442 .0924086 cmyk
f
155.782 176.362 mo
155.404 176.271 155.028 176.175 154.658 176.076 cv
154.658 175.026 li
155.03 175.135 155.405 175.24 155.782 175.34 cv
155.782 176.362 li
.75021 .679683 .670222 .90164 cmyk
f
200.693 173.046 mo
200.159 172.835 199.632 172.614 199.112 172.383 cv
200.711 171.807 202.259 171.189 203.748 170.531 cv
203.748 171.791 li
203.344 171.97 202.937 172.144 202.526 172.316 cv
201.922 172.567 201.311 172.811 200.693 173.046 cv
.636744 .434638 .415442 .0924086 cmyk
f
213.728 165.968 mo
212.116 165.968 li
216.94 162.702 220.372 158.918 221.616 154.845 cv
222.472 155.456 li
220.623 159.479 217.587 162.989 213.728 165.968 cv
.687922 .43946 .408392 .0994583 cmyk
f
204.872 171.279 mo
204.872 170.02 li
206.826 169.109 208.667 168.131 210.366 167.092 cv
212.195 167.092 li
209.967 168.649 207.506 170.046 204.872 171.279 cv
f
203.748 171.791 mo
203.748 170.531 li
203.773 170.52 203.798 170.509 203.823 170.498 cv
204.176 170.341 204.526 170.181 204.872 170.02 cv
204.872 171.279 li
204.501 171.453 204.126 171.623 203.748 171.791 cv
212.195 167.092 mo
210.366 167.092 li
210.967 166.725 211.551 166.35 212.116 165.968 cv
213.728 165.968 li
213.23 166.351 212.719 166.726 212.195 167.092 cv
.75021 .679683 .670222 .90164 cmyk
f
145.874 166.027 mo
145.465 166.027 li
145.5 166 li
135.92 160.94 li
136.428 166.027 li
136.051 166.027 li
135.547 160.977 li
135.533 160.84 135.596 160.706 135.711 160.629 cv
135.773 160.587 135.847 160.565 135.92 160.565 cv
135.98 160.565 136.04 160.58 136.095 160.608 cv
136.095 160.608 li
145.675 165.668 li
145.788 165.728 145.863 165.842 145.874 165.969 cv
145.875 165.989 145.875 166.008 145.874 166.027 cv
.58941 .431373 .422095 .0862745 cmyk
f
154.658 176.854 mo
148.989 175.369 144.143 173.06 140.731 169.894 cv
137.23 172.258 li
137.167 172.3 137.093 172.322 137.02 172.322 cv
136.965 172.322 136.911 172.31 136.861 172.286 cv
136.742 172.231 136.66 172.115 136.647 171.984 cv
136.164 167.152 li
136.541 167.152 li
137.02 171.947 li
140.77 169.415 li
144.104 172.612 148.95 174.957 154.658 176.465 cv
154.658 176.854 li
154.658 174.634 mo
150.031 173.266 145.823 171.231 142.31 168.424 cv
143.985 167.152 li
144.604 167.152 li
142.923 168.429 li
146.284 171.026 150.278 172.936 154.658 174.243 cv
154.658 174.634 li
f
144.604 167.152 mo
143.985 167.152 li
145.465 166.027 li
145.874 166.027 li
145.866 166.133 145.813 166.233 145.727 166.299 cv
144.604 167.152 li
136.541 167.152 mo
136.164 167.152 li
136.051 166.027 li
136.428 166.027 li
136.541 167.152 li
.75021 .679683 .670222 .90164 cmyk
f
171.86 178.89 mo
166.186 178.887 160.701 178.309 155.782 177.136 cv
155.782 176.749 li
160.688 177.929 166.178 178.515 171.859 178.515 cv
180.433 178.515 189.446 177.182 197.56 174.547 cv
197.732 174.623 197.905 174.698 198.08 174.771 cv
189.819 177.508 180.615 178.889 171.86 178.89 cv
171.399 176.865 mo
165.982 176.865 160.67 176.266 155.782 174.952 cv
155.782 174.563 li
160.654 175.885 165.965 176.49 171.388 176.49 cv
171.392 176.49 171.395 176.49 171.399 176.49 cv
171.401 176.49 171.404 176.49 171.406 176.49 cv
179.24 176.49 187.304 175.229 194.604 173.069 cv
194.755 173.155 194.907 173.24 195.062 173.324 cv
187.633 175.559 179.402 176.865 171.399 176.865 cv
.636744 .434638 .415442 .0924086 cmyk
f
155.782 177.136 mo
155.405 177.045 155.029 176.951 154.658 176.854 cv
154.658 176.465 li
155.029 176.563 155.404 176.658 155.782 176.749 cv
155.782 177.136 li
155.782 174.952 mo
155.406 174.851 155.029 174.744 154.658 174.634 cv
154.658 174.243 li
155.03 174.354 155.405 174.461 155.782 174.563 cv
155.782 174.952 li
.75021 .679683 .670222 .90164 cmyk
f
201.742 173.443 mo
201.565 173.379 201.39 173.314 201.214 173.248 cv
202.072 172.915 202.918 172.565 203.748 172.201 cv
203.748 172.61 li
203.439 172.745 203.127 172.877 202.814 173.008 cv
202.459 173.156 202.102 173.301 201.742 173.443 cv
198.622 172.16 mo
198.46 172.085 198.3 172.009 198.139 171.932 cv
200.004 171.282 201.803 170.573 203.519 169.812 cv
203.595 169.778 203.672 169.744 203.748 169.71 cv
203.748 170.121 li
202.11 170.85 200.394 171.532 198.622 172.16 cv
.636744 .434638 .415442 .0924086 cmyk
f
214.937 165.968 mo
214.337 165.968 li
218.143 162.954 221.132 159.405 222.94 155.33 cv
221.4 154.23 li
220.313 158.493 216.671 162.523 211.44 165.968 cv
210.752 165.968 li
216.196 162.482 219.965 158.387 221.037 154.137 cv
221.067 154.017 221.155 153.92 221.271 153.878 cv
221.313 153.862 221.357 153.855 221.4 153.855 cv
221.477 153.855 221.553 153.879 221.618 153.925 cv
223.158 155.025 li
223.303 155.128 223.355 155.32 223.283 155.482 cv
221.501 159.493 218.607 162.987 214.937 165.968 cv
.687922 .43946 .408392 .0994583 cmyk
f
204.872 172.105 mo
204.872 171.693 li
207.754 170.354 210.439 168.819 212.845 167.092 cv
213.482 167.092 li
210.904 168.993 208.002 170.663 204.872 172.105 cv
204.872 169.607 mo
204.872 169.194 li
206.284 168.528 207.629 167.826 208.901 167.092 cv
209.641 167.092 li
208.152 167.977 206.554 168.818 204.872 169.607 cv
f
203.748 172.61 mo
203.748 172.201 li
204.126 172.034 204.5 171.865 204.872 171.693 cv
204.872 172.105 li
204.5 172.277 204.126 172.445 203.748 172.61 cv
203.748 170.121 mo
203.748 169.71 li
204.127 169.541 204.502 169.368 204.872 169.194 cv
204.872 169.607 li
204.501 169.781 204.127 169.952 203.748 170.121 cv
213.482 167.092 mo
212.845 167.092 li
213.356 166.726 213.852 166.352 214.337 165.968 cv
214.937 165.968 li
214.465 166.351 213.979 166.726 213.482 167.092 cv
209.641 167.092 mo
208.901 167.092 li
209.537 166.725 210.155 166.35 210.752 165.968 cv
211.44 165.968 li
210.859 166.35 210.26 166.725 209.641 167.092 cv
.75021 .679683 .670222 .90164 cmyk
f
145.465 166.027 mo
144.747 166.027 li
136.363 161.598 li
136.805 166.027 li
136.428 166.027 li
135.92 160.94 li
145.5 166 li
145.465 166.027 li
.721767 .609735 .586694 .480629 cmyk
f
154.658 176.465 mo
148.95 174.957 144.104 172.612 140.77 169.415 cv
137.02 171.947 li
136.541 167.152 li
136.918 167.152 li
137.331 171.285 li
140.56 169.104 li
140.624 169.061 140.697 169.04 140.77 169.04 cv
140.864 169.04 140.958 169.075 141.03 169.144 cv
144.277 172.266 149.035 174.578 154.658 176.076 cv
154.658 176.465 li
154.658 175.026 mo
149.953 173.646 145.662 171.581 142.076 168.717 cv
141.986 168.645 141.934 168.535 141.935 168.419 cv
141.936 168.304 141.991 168.195 142.083 168.125 cv
143.365 167.152 li
143.985 167.152 li
142.31 168.424 li
145.823 171.231 150.031 173.266 154.658 174.634 cv
154.658 175.026 li
f
143.985 167.152 mo
143.365 167.152 li
144.805 166.057 li
144.747 166.027 li
145.465 166.027 li
143.985 167.152 li
136.918 167.152 mo
136.541 167.152 li
136.428 166.027 li
136.805 166.027 li
136.918 167.152 li
.75021 .679683 .670222 .90164 cmyk
f
171.859 178.515 mo
166.178 178.515 160.688 177.929 155.782 176.749 cv
155.782 176.362 li
160.664 177.546 166.142 178.14 171.819 178.14 cv
171.833 178.14 171.845 178.14 171.86 178.14 cv
171.861 178.14 171.864 178.14 171.865 178.14 cv
180.26 178.14 189.082 176.854 197.049 174.318 cv
197.218 174.395 197.388 174.472 197.56 174.547 cv
189.446 177.182 180.433 178.515 171.859 178.515 cv
171.399 177.24 mo
165.991 177.239 160.681 176.647 155.782 175.34 cv
155.782 174.952 li
160.67 176.266 165.982 176.865 171.399 176.865 cv
179.402 176.865 187.633 175.559 195.062 173.324 cv
195.216 173.408 195.372 173.491 195.53 173.573 cv
187.973 175.886 179.572 177.239 171.399 177.24 cv
.750088 .610224 .581018 .486519 cmyk
f
155.782 176.749 mo
155.404 176.658 155.029 176.563 154.658 176.465 cv
154.658 176.076 li
155.028 176.175 155.404 176.271 155.782 176.362 cv
155.782 176.749 li
155.782 175.34 mo
155.405 175.24 155.03 175.135 154.658 175.026 cv
154.658 174.634 li
155.029 174.744 155.406 174.851 155.782 174.952 cv
155.782 175.34 li
.75021 .679683 .670222 .90164 cmyk
f
201.214 173.248 mo
201.04 173.182 200.866 173.114 200.693 173.046 cv
201.311 172.811 201.922 172.567 202.526 172.316 cv
202.937 172.144 203.344 171.97 203.748 171.791 cv
203.748 172.201 li
202.918 172.565 202.072 172.915 201.214 173.248 cv
199.112 172.383 mo
198.948 172.309 198.785 172.235 198.622 172.16 cv
200.394 171.532 202.11 170.85 203.748 170.121 cv
203.748 170.531 li
202.259 171.189 200.711 171.807 199.112 172.383 cv
.750088 .610224 .581018 .486519 cmyk
f
214.337 165.968 mo
213.728 165.968 li
217.587 162.989 220.623 159.479 222.472 155.456 cv
221.616 154.845 li
220.372 158.918 216.94 162.702 212.116 165.968 cv
211.44 165.968 li
216.671 162.523 220.313 158.493 221.4 154.23 cv
222.94 155.33 li
221.132 159.405 218.143 162.954 214.337 165.968 cv
.784482 .619745 .569421 .492988 cmyk
f
204.872 171.693 mo
204.872 171.279 li
207.506 170.046 209.967 168.649 212.195 167.092 cv
212.845 167.092 li
210.439 168.819 207.754 170.354 204.872 171.693 cv
204.872 170.02 mo
204.872 169.607 li
206.554 168.818 208.152 167.977 209.641 167.092 cv
210.366 167.092 li
208.667 168.131 206.826 169.109 204.872 170.02 cv
f
203.748 172.201 mo
203.748 171.791 li
204.126 171.623 204.501 171.453 204.872 171.279 cv
204.872 171.693 li
204.5 171.865 204.126 172.034 203.748 172.201 cv
203.748 170.531 mo
203.748 170.121 li
204.127 169.952 204.501 169.781 204.872 169.607 cv
204.872 170.02 li
204.526 170.181 204.176 170.341 203.823 170.498 cv
203.798 170.509 203.773 170.52 203.748 170.531 cv
212.845 167.092 mo
212.195 167.092 li
212.719 166.726 213.23 166.351 213.728 165.968 cv
214.337 165.968 li
213.852 166.352 213.356 166.726 212.845 167.092 cv
210.366 167.092 mo
209.641 167.092 li
210.26 166.725 210.859 166.35 211.44 165.968 cv
212.116 165.968 li
211.551 166.35 210.967 166.725 210.366 167.092 cv
.75021 .679683 .670222 .90164 cmyk
f
203.748 175.913 mo
202.143 175.476 200.61 174.973 199.164 174.402 cv
199.676 174.224 200.185 174.039 200.688 173.85 cv
201.686 174.235 202.707 174.586 203.748 174.902 cv
203.748 175.913 li
.636744 .434638 .415442 .0924086 cmyk
f
221.165 178.044 mo
215.389 178.044 209.819 177.43 204.872 176.205 cv
204.872 175.229 li
209.871 176.613 215.299 177.241 220.824 177.242 cv
231.976 177.241 243.534 174.68 252.813 170.539 cv
252.818 170.536 252.822 170.534 252.827 170.532 cv
252.827 171.813 li
252.512 171.95 252.194 172.086 251.875 172.219 cv
242.616 176.08 231.587 178.044 221.211 178.044 cv
221.209 178.044 221.207 178.044 221.205 178.044 cv
221.191 178.044 221.179 178.044 221.165 178.044 cv
.687922 .43946 .408392 .0994583 cmyk
f
204.872 176.205 mo
204.494 176.111 204.119 176.014 203.748 175.913 cv
203.748 174.902 li
204.12 175.015 204.495 175.124 204.872 175.229 cv
204.872 176.205 li
.75021 .679683 .670222 .90164 cmyk
f
263.028 165.907 mo
261.225 165.907 li
266.015 162.639 269.5 158.841 270.946 154.731 cv
271.822 155.356 li
269.965 159.397 266.911 162.921 263.028 165.907 cv
.758633 .455085 .394537 .108949 cmyk
f
253.953 171.307 mo
253.953 170.016 li
255.919 169.09 257.774 168.093 259.491 167.033 cv
261.491 167.033 li
259.201 168.627 256.667 170.054 253.953 171.307 cv
f
252.827 171.813 mo
252.827 170.532 li
253.206 170.363 253.582 170.19 253.953 170.016 cv
253.953 171.307 li
253.58 171.479 253.206 171.647 252.827 171.813 cv
261.491 167.033 mo
259.491 167.033 li
260.086 166.665 260.664 166.29 261.225 165.907 cv
263.028 165.907 li
262.529 166.291 262.017 166.666 261.491 167.033 cv
.75021 .679683 .670222 .90164 cmyk
f
194.153 165.965 mo
186.159 165.965 li
185.713 161.499 li
194.153 165.965 li
.636744 .434638 .415442 .0924086 cmyk
f
195.604 172.766 mo
193.594 171.691 191.829 170.452 190.37 169.049 cv
190.298 168.98 190.204 168.945 190.11 168.945 cv
190.037 168.945 189.964 168.966 189.9 169.009 cv
186.681 171.189 li
186.271 167.09 li
192.667 167.09 li
191.424 168.03 li
191.332 168.099 191.277 168.209 191.275 168.324 cv
191.273 168.439 191.326 168.55 191.416 168.622 cv
193.171 170.023 195.09 171.236 197.137 172.273 cv
196.631 172.442 196.119 172.606 195.604 172.766 cv
f
192.667 167.09 mo
186.271 167.09 li
186.159 165.965 li
194.153 165.965 li
194.154 165.966 li
192.667 167.09 li
.75021 .679683 .670222 .90164 cmyk
f
198.114 173.97 mo
197.58 173.74 197.06 173.501 196.554 173.253 cv
197.072 173.086 197.585 172.916 198.094 172.741 cv
198.607 172.982 199.125 173.212 199.653 173.433 cv
199.144 173.617 198.631 173.796 198.114 173.97 cv
.750088 .610224 .581018 .486519 cmyk
f
199.164 174.402 mo
198.986 174.332 198.81 174.261 198.635 174.189 cv
199.149 174.013 199.661 173.831 200.167 173.644 cv
200.34 173.714 200.514 173.782 200.688 173.85 cv
200.185 174.039 199.676 174.224 199.164 174.402 cv
196.074 173.012 mo
195.916 172.931 195.76 172.849 195.604 172.766 cv
196.119 172.606 196.631 172.442 197.137 172.273 cv
197.294 172.353 197.452 172.432 197.612 172.509 cv
197.103 172.681 196.591 172.848 196.074 173.012 cv
f
198.635 174.189 mo
198.46 174.117 198.286 174.044 198.114 173.97 cv
198.631 173.796 199.144 173.617 199.653 173.433 cv
199.823 173.504 199.995 173.575 200.167 173.644 cv
199.661 173.831 199.149 174.013 198.635 174.189 cv
196.554 173.253 mo
196.393 173.173 196.232 173.093 196.074 173.012 cv
196.591 172.848 197.103 172.681 197.612 172.509 cv
197.772 172.587 197.933 172.665 198.094 172.741 cv
197.585 172.916 197.072 173.086 196.554 173.253 cv
.75903 .656764 .641657 .745235 cmyk
f
203.748 176.692 mo
201.745 176.156 199.846 175.516 198.08 174.771 cv
198.261 174.711 198.442 174.651 198.622 174.589 cv
200.228 175.245 201.945 175.816 203.748 176.302 cv
203.748 176.692 li
203.748 174.51 mo
202.89 174.247 202.043 173.96 201.215 173.649 cv
201.391 173.581 201.567 173.513 201.742 173.443 cv
202.4 173.683 203.07 173.907 203.748 174.117 cv
203.748 174.51 li
.636744 .434638 .415442 .0924086 cmyk
f
221.205 178.794 mo
215.434 178.791 209.857 178.194 204.872 176.979 cv
204.872 176.592 li
209.844 177.814 215.425 178.419 221.205 178.419 cv
231.932 178.419 243.348 176.332 252.827 172.222 cv
252.827 172.63 li
252.607 172.725 252.386 172.819 252.163 172.911 cv
242.791 176.818 231.677 178.794 221.205 178.794 cv
220.824 176.867 mo
215.288 176.867 209.861 176.232 204.872 174.84 cv
204.872 174.449 li
209.845 175.85 215.273 176.492 220.814 176.492 cv
220.817 176.492 220.82 176.492 220.824 176.492 cv
220.825 176.492 220.828 176.492 220.829 176.492 cv
231.865 176.492 243.336 173.949 252.507 169.854 cv
252.614 169.806 252.721 169.758 252.827 169.71 cv
252.827 170.12 li
243.575 174.283 231.985 176.867 220.824 176.867 cv
.687922 .43946 .408392 .0994583 cmyk
f
204.872 176.979 mo
204.494 176.887 204.119 176.791 203.748 176.692 cv
203.748 176.302 li
204.119 176.402 204.494 176.499 204.872 176.592 cv
204.872 176.979 li
204.872 174.84 mo
204.494 174.734 204.121 174.625 203.748 174.51 cv
203.748 174.117 li
204.12 174.232 204.495 174.343 204.872 174.449 cv
204.872 174.84 li
.75021 .679683 .670222 .90164 cmyk
f
264.24 165.907 mo
263.639 165.907 li
267.467 162.885 270.475 159.322 272.29 155.23 cv
270.75 154.13 li
269.423 158.436 265.728 162.469 260.552 165.907 cv
259.869 165.907 li
265.251 162.429 269.073 158.33 270.392 154.02 cv
270.427 153.905 270.516 153.813 270.63 153.775 cv
270.669 153.761 270.709 153.755 270.75 153.755 cv
270.827 153.755 270.904 153.779 270.968 153.825 cv
272.508 154.925 li
272.653 155.028 272.705 155.22 272.633 155.382 cv
270.844 159.41 267.932 162.919 264.24 165.907 cv
.758633 .455085 .394537 .108949 cmyk
f
253.953 172.132 mo
253.953 171.72 li
256.917 170.362 259.674 168.798 262.142 167.033 cv
262.781 167.033 li
260.142 168.971 257.163 170.671 253.953 172.132 cv
253.953 169.601 mo
253.953 169.187 li
255.381 168.506 256.747 167.786 258.037 167.033 cv
258.77 167.033 li
257.263 167.938 255.65 168.797 253.953 169.601 cv
f
252.827 172.63 mo
252.827 172.222 li
253.206 172.058 253.581 171.89 253.953 171.72 cv
253.953 172.132 li
253.581 172.301 253.205 172.467 252.827 172.63 cv
252.827 170.12 mo
252.827 169.71 li
253.207 169.538 253.582 169.364 253.953 169.187 cv
253.953 169.601 li
253.582 169.776 253.206 169.95 252.827 170.12 cv
262.781 167.033 mo
262.142 167.033 li
262.655 166.665 263.152 166.292 263.639 165.907 cv
264.24 165.907 li
263.766 166.291 263.28 166.666 262.781 167.033 cv
258.77 167.033 mo
258.037 167.033 li
258.666 166.665 259.277 166.29 259.869 165.907 cv
260.552 165.907 li
259.976 166.29 259.382 166.665 258.77 167.033 cv
.75021 .679683 .670222 .90164 cmyk
f
195.221 165.965 mo
194.777 165.965 li
194.85 165.91 li
185.27 160.84 li
185.782 165.965 li
185.405 165.965 li
184.897 160.877 li
184.883 160.739 184.946 160.606 185.061 160.529 cv
185.124 160.486 185.197 160.465 185.27 160.465 cv
185.33 160.465 185.39 160.479 185.445 160.509 cv
185.445 160.509 li
195.025 165.579 li
195.138 165.638 195.213 165.753 195.224 165.88 cv
195.226 165.909 195.225 165.937 195.221 165.965 cv
.636744 .434638 .415442 .0924086 cmyk
f
194.604 173.069 mo
192.905 172.104 191.382 171.015 190.072 169.799 cv
186.58 172.163 li
186.517 172.205 186.444 172.227 186.37 172.227 cv
186.316 172.227 186.261 172.215 186.211 172.192 cv
186.092 172.136 186.01 172.02 185.997 171.889 cv
185.517 167.09 li
185.894 167.09 li
186.37 171.852 li
190.11 169.32 li
191.521 170.672 193.201 171.871 195.103 172.919 cv
194.937 172.97 194.771 173.02 194.604 173.069 cv
197.638 172.105 mo
195.486 171.042 193.477 169.788 191.65 168.329 cv
193.288 167.09 li
193.91 167.09 li
192.264 168.335 li
194.061 169.723 196.031 170.918 198.139 171.932 cv
197.973 171.99 197.805 172.047 197.638 172.105 cv
f
193.91 167.09 mo
193.288 167.09 li
194.777 165.965 li
195.221 165.965 li
195.206 166.061 195.155 166.149 195.076 166.209 cv
193.91 167.09 li
185.894 167.09 mo
185.517 167.09 li
185.405 165.965 li
185.782 165.965 li
185.894 167.09 li
.75021 .679683 .670222 .90164 cmyk
f
197.049 174.318 mo
196.53 174.079 196.023 173.831 195.53 173.573 cv
195.7 173.521 195.871 173.468 196.041 173.415 cv
196.541 173.669 197.054 173.912 197.581 174.146 cv
197.404 174.204 197.226 174.261 197.049 174.318 cv
200.173 173.242 mo
199.643 173.027 199.118 172.8 198.603 172.564 cv
198.773 172.504 198.943 172.444 199.112 172.383 cv
199.632 172.614 200.159 172.835 200.693 173.046 cv
200.52 173.112 200.347 173.177 200.173 173.242 cv
.750088 .610224 .581018 .486519 cmyk
f
198.08 174.771 mo
197.905 174.698 197.732 174.623 197.56 174.547 cv
197.739 174.489 197.919 174.43 198.097 174.371 cv
198.27 174.445 198.445 174.518 198.622 174.589 cv
198.442 174.651 198.261 174.711 198.08 174.771 cv
201.215 173.649 mo
201.039 173.583 200.865 173.516 200.691 173.448 cv
200.866 173.382 201.04 173.315 201.214 173.248 cv
201.39 173.314 201.565 173.379 201.742 173.443 cv
201.567 173.513 201.391 173.581 201.215 173.649 cv
195.062 173.324 mo
194.907 173.24 194.755 173.155 194.604 173.069 cv
194.771 173.02 194.937 172.97 195.103 172.919 cv
195.255 173.004 195.411 173.088 195.567 173.17 cv
195.4 173.221 195.229 173.273 195.062 173.324 cv
198.116 172.337 mo
197.956 172.261 197.796 172.183 197.638 172.105 cv
197.805 172.047 197.973 171.99 198.139 171.932 cv
198.3 172.009 198.46 172.085 198.622 172.16 cv
198.454 172.219 198.285 172.278 198.116 172.337 cv
f
197.56 174.547 mo
197.388 174.472 197.218 174.395 197.049 174.318 cv
197.226 174.261 197.404 174.204 197.581 174.146 cv
197.752 174.222 197.923 174.297 198.097 174.371 cv
197.919 174.43 197.739 174.489 197.56 174.547 cv
195.53 173.573 mo
195.372 173.491 195.216 173.408 195.062 173.324 cv
195.229 173.273 195.4 173.221 195.567 173.17 cv
195.723 173.253 195.881 173.334 196.041 173.415 cv
195.871 173.468 195.7 173.521 195.53 173.573 cv
200.691 173.448 mo
200.516 173.38 200.346 173.312 200.173 173.242 cv
200.347 173.177 200.52 173.112 200.693 173.046 cv
200.866 173.114 201.04 173.182 201.214 173.248 cv
201.04 173.315 200.866 173.382 200.691 173.448 cv
198.603 172.564 mo
198.438 172.488 198.279 172.414 198.116 172.337 cv
198.285 172.278 198.454 172.219 198.622 172.16 cv
198.785 172.235 198.948 172.309 199.112 172.383 cv
198.943 172.444 198.773 172.504 198.603 172.564 cv
.75903 .656764 .641657 .745235 cmyk
f
203.748 176.302 mo
201.945 175.816 200.228 175.245 198.622 174.589 cv
198.803 174.528 198.984 174.465 199.164 174.402 cv
200.61 174.973 202.143 175.476 203.748 175.913 cv
203.748 176.302 li
203.748 174.902 mo
202.707 174.586 201.686 174.235 200.688 173.85 cv
200.865 173.784 201.04 173.717 201.215 173.649 cv
202.043 173.96 202.89 174.247 203.748 174.51 cv
203.748 174.902 li
.750088 .610224 .581018 .486519 cmyk
f
221.205 178.419 mo
215.425 178.419 209.844 177.814 204.872 176.592 cv
204.872 176.205 li
209.819 177.43 215.389 178.044 221.165 178.044 cv
221.179 178.044 221.191 178.044 221.205 178.044 cv
221.207 178.044 221.209 178.044 221.211 178.044 cv
231.587 178.044 242.616 176.08 251.875 172.219 cv
252.194 172.086 252.512 171.95 252.827 171.813 cv
252.827 172.222 li
243.348 176.332 231.932 178.419 221.205 178.419 cv
220.824 177.242 mo
215.299 177.241 209.871 176.613 204.872 175.229 cv
204.872 174.84 li
209.861 176.232 215.288 176.867 220.824 176.867 cv
231.985 176.867 243.575 174.283 252.827 170.12 cv
252.827 170.532 li
252.822 170.534 252.818 170.536 252.813 170.539 cv
243.534 174.68 231.976 177.241 220.824 177.242 cv
.784482 .619745 .569421 .492988 cmyk
f
204.872 176.592 mo
204.494 176.499 204.119 176.402 203.748 176.302 cv
203.748 175.913 li
204.119 176.014 204.494 176.111 204.872 176.205 cv
204.872 176.592 li
204.872 175.229 mo
204.495 175.124 204.12 175.015 203.748 174.902 cv
203.748 174.51 li
204.121 174.625 204.494 174.734 204.872 174.84 cv
204.872 175.229 li
.75021 .679683 .670222 .90164 cmyk
f
263.639 165.907 mo
263.028 165.907 li
266.911 162.921 269.965 159.397 271.822 155.356 cv
270.946 154.731 li
269.5 158.841 266.015 162.639 261.225 165.907 cv
260.552 165.907 li
265.728 162.469 269.423 158.436 270.75 154.13 cv
272.29 155.23 li
270.475 159.322 267.467 162.885 263.639 165.907 cv
.833036 .627436 .562097 .49897 cmyk
f
253.953 171.72 mo
253.953 171.307 li
256.667 170.054 259.201 168.627 261.491 167.033 cv
262.142 167.033 li
259.674 168.798 256.917 170.362 253.953 171.72 cv
253.953 170.016 mo
253.953 169.601 li
255.65 168.797 257.263 167.938 258.77 167.033 cv
259.491 167.033 li
257.774 168.093 255.919 169.09 253.953 170.016 cv
f
252.827 172.222 mo
252.827 171.813 li
253.206 171.647 253.58 171.479 253.953 171.307 cv
253.953 171.72 li
253.581 171.89 253.206 172.058 252.827 172.222 cv
252.827 170.532 mo
252.827 170.12 li
253.206 169.95 253.582 169.776 253.953 169.601 cv
253.953 170.016 li
253.582 170.19 253.206 170.363 252.827 170.532 cv
262.142 167.033 mo
261.491 167.033 li
262.017 166.666 262.529 166.291 263.028 165.907 cv
263.639 165.907 li
263.152 166.292 262.655 166.665 262.142 167.033 cv
259.491 167.033 mo
258.77 167.033 li
259.382 166.665 259.976 166.29 260.552 165.907 cv
261.225 165.907 li
260.664 166.29 260.086 166.665 259.491 167.033 cv
.75021 .679683 .670222 .90164 cmyk
f
194.777 165.965 mo
194.153 165.965 li
185.713 161.499 li
186.159 165.965 li
185.782 165.965 li
185.27 160.84 li
194.85 165.91 li
194.777 165.965 li
.750088 .610224 .581018 .486519 cmyk
f
195.103 172.919 mo
193.201 171.871 191.521 170.672 190.11 169.32 cv
186.37 171.852 li
185.894 167.09 li
186.271 167.09 li
186.681 171.189 li
189.9 169.009 li
189.964 168.966 190.037 168.945 190.11 168.945 cv
190.204 168.945 190.298 168.98 190.37 169.049 cv
191.829 170.452 193.594 171.691 195.604 172.766 cv
195.438 172.817 195.27 172.869 195.103 172.919 cv
197.137 172.273 mo
195.09 171.236 193.171 170.023 191.416 168.622 cv
191.326 168.55 191.273 168.439 191.275 168.324 cv
191.277 168.209 191.332 168.099 191.424 168.03 cv
192.667 167.09 li
193.288 167.09 li
191.65 168.329 li
193.477 169.788 195.486 171.042 197.638 172.105 cv
197.471 172.161 197.305 172.217 197.137 172.273 cv
f
193.288 167.09 mo
192.667 167.09 li
194.154 165.966 li
194.153 165.965 li
194.777 165.965 li
193.288 167.09 li
186.271 167.09 mo
185.894 167.09 li
185.782 165.965 li
186.159 165.965 li
186.271 167.09 li
.75021 .679683 .670222 .90164 cmyk
f
197.581 174.146 mo
197.054 173.912 196.541 173.669 196.041 173.415 cv
196.212 173.361 196.383 173.307 196.554 173.253 cv
197.06 173.501 197.58 173.74 198.114 173.97 cv
197.936 174.029 197.759 174.088 197.581 174.146 cv
199.653 173.433 mo
199.125 173.212 198.607 172.982 198.094 172.741 cv
198.265 172.682 198.434 172.623 198.603 172.564 cv
199.118 172.8 199.643 173.027 200.173 173.242 cv
200 173.306 199.827 173.37 199.653 173.433 cv
.75903 .656764 .641657 .745235 cmyk
f
198.622 174.589 mo
198.445 174.518 198.27 174.445 198.097 174.371 cv
198.277 174.311 198.455 174.25 198.635 174.189 cv
198.81 174.261 198.986 174.332 199.164 174.402 cv
198.984 174.465 198.803 174.528 198.622 174.589 cv
200.688 173.85 mo
200.514 173.782 200.34 173.714 200.167 173.644 cv
200.343 173.579 200.515 173.515 200.691 173.448 cv
200.865 173.516 201.039 173.583 201.215 173.649 cv
201.04 173.717 200.865 173.784 200.688 173.85 cv
195.567 173.17 mo
195.411 173.088 195.255 173.004 195.103 172.919 cv
195.27 172.869 195.438 172.817 195.604 172.766 cv
195.76 172.849 195.916 172.931 196.074 173.012 cv
195.904 173.065 195.737 173.117 195.567 173.17 cv
197.612 172.509 mo
197.452 172.432 197.294 172.353 197.137 172.273 cv
197.305 172.217 197.471 172.161 197.638 172.105 cv
197.796 172.183 197.956 172.261 198.116 172.337 cv
197.949 172.394 197.78 172.452 197.612 172.509 cv
f
198.097 174.371 mo
197.923 174.297 197.752 174.222 197.581 174.146 cv
197.759 174.088 197.936 174.029 198.114 173.97 cv
198.286 174.044 198.46 174.117 198.635 174.189 cv
198.455 174.25 198.277 174.311 198.097 174.371 cv
200.167 173.644 mo
199.995 173.575 199.823 173.504 199.653 173.433 cv
199.827 173.37 200 173.306 200.173 173.242 cv
200.346 173.312 200.516 173.38 200.691 173.448 cv
200.515 173.515 200.343 173.579 200.167 173.644 cv
196.041 173.415 mo
195.881 173.334 195.723 173.253 195.567 173.17 cv
195.737 173.117 195.904 173.065 196.074 173.012 cv
196.232 173.093 196.393 173.173 196.554 173.253 cv
196.383 173.307 196.212 173.361 196.041 173.415 cv
198.094 172.741 mo
197.933 172.665 197.772 172.587 197.612 172.509 cv
197.78 172.452 197.949 172.394 198.116 172.337 cv
198.279 172.414 198.438 172.488 198.603 172.564 cv
198.434 172.623 198.265 172.682 198.094 172.741 cv
.749203 .668116 .659388 .830289 cmyk
f
193.988 236.043 mo
193.986 236.043 193.983 236.043 193.981 236.043 cv
182.52 236.043 171.489 234.699 162.252 231.837 cv
153.012 228.976 145.58 224.596 141.275 218.571 cv
141.202 218.469 141.087 218.414 140.97 218.414 cv
140.897 218.414 140.824 218.435 140.76 218.478 cv
137.541 220.658 li
137.101 216.258 li
143.927 216.258 li
142.293 217.499 li
142.135 217.619 142.098 217.842 142.208 218.007 cv
146.137 223.864 153.22 228.034 162.088 230.754 cv
170.959 233.473 181.631 234.742 192.788 234.742 cv
218.336 234.734 246.41 228.105 261.145 216.791 cv
261.425 216.575 261.701 216.358 261.971 216.14 cv
264.365 216.14 li
263.914 216.54 263.446 216.936 262.962 217.326 cv
258.134 221.227 251.763 224.613 244.446 227.388 cv
229.813 232.938 211.404 236.043 193.988 236.043 cv
.516472 .431495 .431495 .0754711 cmyk
f
144.451 215.134 mo
136.989 215.134 li
136.573 210.969 li
144.451 215.134 li
.58941 .431373 .422095 .0862745 cmyk
f
143.927 216.258 mo
137.101 216.258 li
136.989 215.134 li
144.451 215.134 li
145.015 215.432 li
143.927 216.258 li
.75021 .679683 .670222 .90164 cmyk
f
265.578 215.014 mo
263.3 215.014 li
266.956 211.775 269.549 208.176 270.723 204.251 cv
272.16 204.572 li
271.15 208.319 268.87 211.815 265.578 215.014 cv
.758633 .455085 .394537 .108949 cmyk
f
264.365 216.14 mo
261.971 216.14 li
262.428 215.769 262.872 215.395 263.3 215.014 cv
265.578 215.014 li
265.188 215.394 264.784 215.769 264.365 216.14 cv
.75021 .679683 .670222 .90164 cmyk
f
193.981 236.793 mo
182.461 236.793 171.364 235.445 162.03 232.553 cv
152.846 229.707 145.357 225.367 140.88 219.303 cv
137.44 221.632 li
137.377 221.674 137.304 221.696 137.23 221.696 cv
137.176 221.696 137.121 221.684 137.071 221.661 cv
136.952 221.605 136.87 221.489 136.857 221.358 cv
136.347 216.258 li
136.724 216.258 li
137.23 221.321 li
140.97 218.789 li
149.724 231.033 171.001 236.418 193.981 236.418 cv
221.251 236.418 250.921 228.838 264.927 216.14 cv
265.482 216.14 li
264.833 216.741 264.15 217.331 263.434 217.909 cv
248.692 229.804 220.243 236.785 193.981 236.793 cv
192.788 234.367 mo
170.531 234.367 150.226 229.3 142.52 217.798 cv
144.547 216.258 li
145.167 216.258 li
143.031 217.881 li
146.849 223.375 153.684 227.395 162.308 230.037 cv
171.08 232.727 181.689 233.992 192.788 233.992 cv
192.79 233.992 192.793 233.992 192.795 233.992 cv
209.737 233.992 227.824 231.044 242.294 225.767 cv
249.53 223.129 255.861 219.908 260.688 216.196 cv
260.713 216.177 260.737 216.158 260.762 216.14 cv
261.37 216.14 li
246.893 227.585 218.536 234.367 192.788 234.367 cv
.516472 .431495 .431495 .0754711 cmyk
f
145.997 215.134 mo
145.253 215.134 li
136.13 210.311 li
136.612 215.134 li
136.235 215.134 li
135.757 210.348 li
135.743 210.211 135.807 210.077 135.921 210 cv
135.984 209.958 136.057 209.936 136.13 209.936 cv
136.19 209.936 136.25 209.951 136.305 209.98 cv
136.305 209.98 li
145.885 215.043 li
145.929 215.066 145.966 215.097 145.997 215.134 cv
.58941 .431373 .422095 .0862745 cmyk
f
145.167 216.258 mo
144.547 216.258 li
145.71 215.375 li
145.253 215.134 li
145.997 215.134 li
146.046 215.192 146.077 215.266 146.084 215.344 cv
146.094 215.472 146.039 215.596 145.937 215.674 cv
145.167 216.258 li
136.724 216.258 mo
136.347 216.258 li
136.235 215.134 li
136.612 215.134 li
136.724 216.258 li
.75021 .679683 .670222 .90164 cmyk
f
266.642 215.014 mo
266.114 215.014 li
269.403 211.746 271.667 208.158 272.62 204.29 cv
270.46 203.808 li
269.333 207.89 266.628 211.641 262.731 215.014 cv
262.155 215.014 li
266.19 211.601 268.967 207.809 270.099 203.708 cv
270.144 203.542 270.294 203.433 270.459 203.433 cv
270.486 203.433 270.514 203.436 270.542 203.442 cv
272.702 203.924 li
272.799 203.946 272.886 204.007 272.939 204.092 cv
272.991 204.178 273.008 204.282 272.984 204.38 cv
272.036 208.226 269.826 211.78 266.642 215.014 cv
.758633 .455085 .394537 .108949 cmyk
f
265.482 216.14 mo
264.927 216.14 li
265.336 215.769 265.732 215.393 266.114 215.014 cv
266.642 215.014 li
266.269 215.394 265.882 215.769 265.482 216.14 cv
261.37 216.14 mo
260.762 216.14 li
261.241 215.769 261.706 215.394 262.155 215.014 cv
262.731 215.014 li
262.294 215.393 261.837 215.77 261.37 216.14 cv
.75021 .679683 .670222 .90164 cmyk
f
193.981 236.418 mo
171.001 236.418 149.724 231.033 140.97 218.789 cv
137.23 221.321 li
136.724 216.258 li
137.101 216.258 li
137.541 220.658 li
140.76 218.478 li
140.824 218.435 140.897 218.414 140.97 218.414 cv
141.087 218.414 141.202 218.469 141.275 218.571 cv
145.58 224.596 153.012 228.976 162.252 231.837 cv
171.489 234.699 182.52 236.043 193.981 236.043 cv
193.983 236.043 193.986 236.043 193.988 236.043 cv
211.404 236.043 229.813 232.938 244.446 227.388 cv
251.763 224.613 258.134 221.227 262.962 217.326 cv
263.446 216.936 263.914 216.54 264.365 216.14 cv
264.927 216.14 li
250.921 228.838 221.251 236.418 193.981 236.418 cv
192.788 234.742 mo
181.631 234.742 170.959 233.473 162.088 230.754 cv
153.22 228.034 146.137 223.864 142.208 218.007 cv
142.098 217.842 142.135 217.619 142.293 217.499 cv
143.927 216.258 li
144.547 216.258 li
142.52 217.798 li
150.226 229.3 170.531 234.367 192.788 234.367 cv
218.536 234.367 246.893 227.585 261.37 216.14 cv
261.971 216.14 li
261.701 216.358 261.425 216.575 261.145 216.791 cv
246.41 228.105 218.336 234.734 192.788 234.742 cv
.675593 .606348 .595972 .467292 cmyk
f
145.253 215.134 mo
144.451 215.134 li
136.573 210.969 li
136.989 215.134 li
136.612 215.134 li
136.13 210.311 li
145.253 215.134 li
.721767 .609735 .586694 .480629 cmyk
f
144.547 216.258 mo
143.927 216.258 li
145.015 215.432 li
144.451 215.134 li
145.253 215.134 li
145.71 215.375 li
144.547 216.258 li
137.101 216.258 mo
136.724 216.258 li
136.612 215.134 li
136.989 215.134 li
137.101 216.258 li
.75021 .679683 .670222 .90164 cmyk
f
266.114 215.014 mo
265.578 215.014 li
268.87 211.815 271.15 208.319 272.16 204.572 cv
270.723 204.251 li
269.549 208.176 266.956 211.775 263.3 215.014 cv
262.731 215.014 li
266.628 211.641 269.333 207.89 270.46 203.808 cv
272.62 204.29 li
271.667 208.158 269.403 211.746 266.114 215.014 cv
.833036 .627436 .562097 .49897 cmyk
f
264.927 216.14 mo
264.365 216.14 li
264.784 215.769 265.188 215.394 265.578 215.014 cv
266.114 215.014 li
265.732 215.393 265.336 215.769 264.927 216.14 cv
261.971 216.14 mo
261.37 216.14 li
261.837 215.77 262.294 215.393 262.731 215.014 cv
263.3 215.014 li
262.872 215.395 262.428 215.769 261.971 216.14 cv
.75021 .679683 .670222 .90164 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQT+Tahoma gcheck setglobal} if
2 424 19 <00020053ffe1040b05ef000b0023013fb0852b58401534013b0b45014a0b
7a11053a1535214a1545210409b8fff040130e0f003b03100e0f003b15b9
090221b9030a0fbbfff4000b000b01404009560f2110007f000200b8ffd4
b40d0d023b00b8fff0b40c0c023b00b8ffd6b40b0b023b00b8ffe0b40c0c
063b00b8ffe0b40d0d063b00b8fffcb40b0b063b004110ffe8000d000d01
4000560000ffee000c000c014000560000ffe8000b000b0140b65600001b
0c0b0bb80140400c561b21a006c00602060c0d0db80140b456060c0c0cb8
0140b456060c0b0bb8014040205606100d0d023b06100c0c023b06160b0b
023b060c0d0d063b060c0c0c063b06b8ffe2b40b0b063b06b8ffc0b30d11
37062f2b2b2b2b2b2b2b2b2b2b5ded2b332f2b2b2b2b2b2b2b2b2b5ded2b
003fed3fed2b2b5d31305d1b400c0915b96c09020321b96c030a00183f2b
3f2b30315901100223220211101233321201363635342627262623220607
0606151416171616333236040be9f3f6e6e9f3f6e6ff001d18181e1e6954
536b1f1e1613201d6b56536b02e9fe6ffe89017e018801930175fe7efcb6
4ae29a99e24b4c4f4f4e4ce8929cd2534d534f00>SFCUQT+Tahoma AddT42Char 
SFCUQT+Tahoma /CharStrings get begin
/zero 19 def
end
SFCUQT+Tahoma /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQT+Tahoma*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three 26{/.notdef}rp 
/N 3{/.notdef}rp /R /S 13{/.notdef}rp /a /.notdef /c 
/.notdef /e /f /g /h /i 4{/.notdef}rp /n 
/o 3{/.notdef}rp /s /t 2{/.notdef}rp /w 136{/.notdef}rp]
SFCUQT+Tahoma nf
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
127.9 55.17 mo
(0)sh
%ADOBeginSubsetFont: HAAAAA+Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SFCUQT+Tahoma gcheck setglobal} if
2 322 15 <0001004afe8e01f4011d00030048b0852b5840252a012b02350039024500
480255005902640074000a02020356042f050100000a021a0202022f5d33
2f5d0010f4322f3130015d1bb302020304001810c6322f30315901012313
01f4fee892b0011dfd71028f>SFCUQT+Tahoma AddT42Char 
SFCUQT+Tahoma /CharStrings get begin
/comma 15 def
end
SFCUQT+Tahoma /Encoding get
dup 44 /comma put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/SFCUQT+Tahoma*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two 
/three 26{/.notdef}rp /N 3{/.notdef}rp /R /S 13{/.notdef}rp /a 
/.notdef /c /.notdef /e /f /g /h /i 
4{/.notdef}rp /n /o 3{/.notdef}rp /s /t 2{/.notdef}rp /w 
136{/.notdef}rp]
SFCUQT+Tahoma nf
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
135.75 55.17 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
140.1 55.17 mo
(0)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
177.77 55.17 mo
(0)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
185.63 55.17 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
190 55.17 mo
(1)sh
SFCUQT+Tahoma*1 [14.55 0 0 -14.55 0 0 ]msf
227.1 55.17 mo
(0)sh
SFCUQT+Tahoma*1 [14.55 0 0 -14.55 0 0 ]msf
234.95 55.17 mo
(,)sh
SFCUQT+Tahoma*1 [14.55 0 0 -14.55 0 0 ]msf
239.3 55.17 mo
(2)sh
SFCUQT+Tahoma*1 [14.55 0 0 -14.55 0 0 ]msf
276.4 55.17 mo
(0)sh
SFCUQT+Tahoma*1 [14.55 0 0 -14.55 0 0 ]msf
284.25 55.17 mo
(,)sh
SFCUQT+Tahoma*1 [14.55 0 0 -14.55 0 0 ]msf
288.6 55.17 mo
(3)sh
SFCUQT+Tahoma*1 [14.55 0 0 -14.55 0 0 ]msf
128.33 104.83 mo
(1)sh
SFCUQT+Tahoma*1 [14.55 0 0 -14.55 0 0 ]msf
136.18 104.83 mo
(,)sh
SFCUQT+Tahoma*1 [14.55 0 0 -14.55 0 0 ]msf
140.52 104.83 mo
(0)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
177.77 104.67 mo
(1)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
185.63 104.67 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
190 104.67 mo
(1)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
226.8 104.67 mo
(1)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
234.65 104.67 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
239 104.67 mo
(2)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
276.4 104.67 mo
(1)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
284.25 104.67 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
288.6 104.67 mo
(3)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
473.45 104.7 mo
(1)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
481.3 104.7 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
485.68 104.7 mo
(1)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
522.47 104.7 mo
(1)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
530.33 104.7 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
534.67 104.7 mo
(2)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
572.08 104.7 mo
(1)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
579.92 104.7 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
584.27 104.7 mo
(3)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
621.18 104.77 mo
(1)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
629.03 104.77 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
633.4 104.77 mo
(0)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
473.45 55.1 mo
(0)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
481.3 55.1 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
485.65 55.1 mo
(0)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
523.35 55.1 mo
(0)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
531.2 55.1 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
535.55 55.1 mo
(1)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
572.65 55.12 mo
(0)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
580.5 55.12 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
584.85 55.12 mo
(2)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
621.95 55.12 mo
(0)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
629.8 55.12 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
634.15 55.12 mo
(3)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
128.08 153.72 mo
(2)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
135.93 153.72 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
140.27 153.72 mo
(0)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
177.38 153.68 mo
(2)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
185.22 153.68 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
189.58 153.68 mo
(1)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
226.6 153.8 mo
(2)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
234.45 153.8 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
238.83 153.8 mo
(2)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
276.13 153.83 mo
(2)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
283.98 153.83 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
288.32 153.83 mo
(3)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
572.42 153.8 mo
(2)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
580.27 153.8 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
584.63 153.8 mo
(0)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
621.58 153.8 mo
(2)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
629.42 153.8 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
633.77 153.8 mo
(1)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
473.35 153.85 mo
(2)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
481.2 153.85 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
485.55 153.85 mo
(2)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
522.58 153.75 mo
(2)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
530.42 153.75 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
534.78 153.75 mo
(3)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
128.13 202.975 mo
(3)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
135.98 202.975 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
140.33 202.975 mo
(0)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
177.6 203.075 mo
(3)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
185.45 203.075 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
189.83 203.075 mo
(1)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
226.7 203.075 mo
(3)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
234.55 203.075 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
238.9 203.075 mo
(2)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
276.2 202.875 mo
(3)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
284.05 202.875 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
288.4 202.875 mo
(3)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
523.1 203.075 mo
(3)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
530.95 203.075 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
535.3 203.075 mo
(0)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
572.52 203.125 mo
(3)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
580.38 203.125 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
584.75 203.125 mo
(1)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
621.63 203.125 mo
(3)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
629.47 203.125 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
633.83 203.125 mo
(2)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
473.73 202.975 mo
(3)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
481.58 202.975 mo
(,)sh
SFCUQT+Tahoma*1 [14.525 0 0 -14.525 0 0 ]msf
485.92 202.975 mo
(3)sh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/SFCUQT+Tahoma*1 uf
/SFCUQT+Tahoma uf
/HAAAAA+Tahoma uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
